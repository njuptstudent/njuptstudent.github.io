<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++之字符串</title>
    <url>/2025/02/12/C-%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>​	<strong>本节要点：</strong></p>
<ul>
<li>C++新增string类型处理字符串</li>
<li>需要用”#include<string>“包含头文件string</li>
<li>利用string类型可以进行赋值，复制等各种串操作</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 定义字符串变量s1</span></span><br><span class="line">	string s1;</span><br><span class="line">	<span class="comment">// 初始化字符串变量s2为&quot;Student&quot;</span></span><br><span class="line">	string s2 = <span class="string">&quot;Student&quot;</span>;</span><br><span class="line">	<span class="comment">// 将s2的值赋给s3</span></span><br><span class="line">	string s3 = s2;</span><br><span class="line">	<span class="comment">// 初始化字符串变量s4，包含8个字符&#x27;A&#x27;</span></span><br><span class="line">	<span class="function">string <span class="title">s4</span><span class="params">(<span class="number">8</span>, <span class="string">&#x27;A&#x27;</span>)</span></span>;</span><br><span class="line">	<span class="comment">// 从标准输入读取字符串赋值给s1</span></span><br><span class="line">	cin &gt;&gt; s1;</span><br><span class="line">	<span class="comment">// 输出s1的值</span></span><br><span class="line">	cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 输出s2的值</span></span><br><span class="line">	cout &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 输出s3的值</span></span><br><span class="line">	cout &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 输出s4的值</span></span><br><span class="line">	cout &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 将s1的值赋给s4</span></span><br><span class="line">	s4 = s1;</span><br><span class="line">	<span class="comment">// 输出s4的值及其长度</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;s4=&quot;</span> &lt;&lt; s4 &lt;&lt; <span class="string">&quot;Length=&quot;</span> &lt;&lt; s<span class="number">4.l</span>ength() &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 将s3和s4的值连接，并在中间插入空格，赋值给s2</span></span><br><span class="line">	s2 = s3 + <span class="string">&#x27; &#x27;</span> + s4;</span><br><span class="line">	<span class="comment">// 输出s2的值</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;s2=&quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 在s3的第7个位置插入&quot;&amp;Teacher&quot;</span></span><br><span class="line">	s<span class="number">3.</span><span class="built_in">insert</span>(<span class="number">7</span>, <span class="string">&quot;&amp;Teacher&quot;</span>);</span><br><span class="line">	<span class="comment">// 输出s3的值</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;s3=&quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 将s3从第2个位置开始的4个字符替换为&quot;ar&quot;</span></span><br><span class="line">	s<span class="number">3.</span><span class="built_in">replace</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="string">&quot;ar&quot;</span>);</span><br><span class="line">	<span class="comment">// 输出s3的值</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;s3=&quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 从s3的第6个位置开始提取7个字符，赋值给s1</span></span><br><span class="line">	s1 = s<span class="number">3.</span><span class="built_in">substr</span>(<span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line">	<span class="comment">// 输出s1的值</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;s1=&quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 查找s1在s3中的位置，并将结果赋值给pos</span></span><br><span class="line">	<span class="type">int</span> pos = s<span class="number">3.f</span>ind(s1);</span><br><span class="line">	<span class="comment">// 输出pos的值</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;pos=&quot;</span> &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 从s3的第5个位置开始删除8个字符</span></span><br><span class="line">	s<span class="number">3.</span><span class="built_in">erase</span>(<span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">	<span class="comment">// 输出s3的值</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;s3=&quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 比较s1和s4的大小，并将结果赋值给f</span></span><br><span class="line">	<span class="type">bool</span> f = s1 &gt; s4;</span><br><span class="line">	<span class="comment">// 输出f的值及其布尔形式</span></span><br><span class="line">	cout &lt;&lt; f &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; boolalpha &lt;&lt; f &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入<strong>Zhu</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Zhu</span><br><span class="line">Student</span><br><span class="line">Student</span><br><span class="line">AAAAAAAA</span><br><span class="line">s4=ZhuLength=3</span><br><span class="line">s2=Student Zhu</span><br><span class="line">s3=Student&amp;Teacher</span><br><span class="line">s3=Start&amp;Teacher</span><br><span class="line">s1=Teacher</span><br><span class="line">pos=6</span><br><span class="line">s3=Start</span><br><span class="line">0 false</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之this指针</title>
    <url>/2025/02/09/C/</url>
    <content><![CDATA[<p>​	this指针是隐含每一个非静态成员函数内的一种指针，this指针不需要定义，直接使用即可。</p>
<p>this指针的用途：</p>
<ul>
<li>当形参和成员变量同名时，可用this指针来区分</li>
<li>在类的非静态成员函数中返回对象本身，可使用return *this</li>
<li>存放当前对象的地址</li>
</ul>
<h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//当形参与成员变量相同时，用this指针区别</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Person&amp; <span class="title">personageAdd</span><span class="params">(Person&amp; p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;age += p.age;</span><br><span class="line">		<span class="comment">//返回对象本身</span></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;年龄是：&quot;</span> &lt;&lt; p<span class="number">1.</span>age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="comment">//链式法则</span></span><br><span class="line">	p<span class="number">2.</span><span class="built_in">personageAdd</span>(p1).<span class="built_in">personageAdd</span>(p1).<span class="built_in">personageAdd</span>(p1);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;年龄是：&quot;</span> &lt;&lt; p<span class="number">2.</span>age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">年龄是：10</span><br><span class="line">年龄是：40</span><br></pre></td></tr></table></figure>

<h3 id="课本实例"><a href="#课本实例" class="headerlink" title="课本实例"></a>课本实例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cdate</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> Date_Year, Date_Month, Date_Day;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">SetDate</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Cdate::SetDate</span><span class="params">(<span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Date_Day = d;</span><br><span class="line">	Date_Month = m;</span><br><span class="line">	Date_Year = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Cdate::Display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;调用该函数的this指针:&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;当前的对象Date_Year成员起始地址：&quot;</span>;</span><br><span class="line">	cout &lt;&lt; &amp;<span class="keyword">this</span>-&gt;Date_Year &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="keyword">this</span>-&gt;Date_Year &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;Date_Month &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;Date_Day &lt;&lt; endl;</span><br><span class="line">	cout&lt;&lt; Date_Year &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; Date_Month &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt;Date_Day &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Cdate date1;</span><br><span class="line">	date<span class="number">1.</span><span class="built_in">SetDate</span>(<span class="number">2025</span>, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;date1地址&quot;</span> &lt;&lt; &amp;date1 &lt;&lt; endl;</span><br><span class="line">	date<span class="number">1.</span><span class="built_in">Display</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date1地址0000002A83F1FA48</span><br><span class="line">调用该函数的this指针:0000002A83F1FA48</span><br><span class="line">当前的对象Date_Year成员起始地址：0000002A83F1FA48</span><br><span class="line">2025-2-4</span><br><span class="line">2025-2-4</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Career_Plan</title>
    <url>/2025/03/16/Career-Plan/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="职业生涯发展报告"><a href="#职业生涯发展报告" class="headerlink" title="职业生涯发展报告"></a>职业生涯发展报告</h1><h2 id="《逐梦南邮，开启璀璨职业规划征程》"><a href="#《逐梦南邮，开启璀璨职业规划征程》" class="headerlink" title="《逐梦南邮，开启璀璨职业规划征程》"></a>《逐梦南邮，开启璀璨职业规划征程》</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​	在踏入大学校园之前，我就对计算机领域充满了浓厚兴趣。成长过程中，一次偶然接触到软件编程，看到简单代码竟能实现神奇功能，从此开启了我的生涯启蒙。高中时，我主动学习基础编程知识，参加相关竞赛并取得不错成绩。进入大学选择信息安全专业，我希望系统学习专业知识，提升技能。这份生涯发展报告，将展示我在该领域的规划，期望得到老师的指导。 </p>
<h3 id="一、我的成长经历"><a href="#一、我的成长经历" class="headerlink" title="一、我的成长经历"></a>一、我的成长经历</h3><h4 id="一-我的大学"><a href="#一-我的大学" class="headerlink" title="( 一) 我的大学"></a>( <strong>一</strong>) 我的大学</h4><p>​	南京邮电大学在我心中，是一座充满创新活力与学术气息的殿堂。它宛如一座知识的宝库，为每一位学子敞开了探索未知的大门。我在大学的独特经历丰富而多彩。大一刚入学时，参加了学校组织的创新杯。在准备过程中，我和队友们日夜奋战。最终，我们团队获得了不错的成绩。这次经历不仅让我提升了编程能力，更让我深刻体会到了团队协作的重要性。</p>
<p>​	南邮“信达天下，自强不息”的校训深深地影响了我。它激励着我在学习和生活中不断追求进步，勇于挑战自我。学校浓厚的学术氛围也让我养成了勤奋好学、严谨治学的态度。在与老师们和同学们的交流中，我接触到了不同的思想和观点，拓宽了自己的视野，培养了创新思维。</p>
<p>​	学校为我们提供了丰富的成长资源。图书馆里有大量的专业书籍和学术期刊，为我们的学习和研究提供了坚实的基础。学校还拥有先进的实验室，配备了高性能的计算机和各种软件开发工具。在实验室里，我可以进行各种实验和项目开发，将理论知识应用到实践中。此外，学校的教师团队非常优秀，他们不仅在学术上有深厚的造诣，还非常关心学生的成长和发展。他们会耐心地指导我们的学习和研究，为我们的职业发展提供宝贵的建议。</p>
<h4 id="二-我的专业"><a href="#二-我的专业" class="headerlink" title="( 二) 我的专业"></a>( <strong>二</strong>) <strong>我的专业</strong></h4><p>​	信息安全专业涵盖了多个方面的知识。在基础课程方面，我们学习了高等数学、线性代数，这些知识为我们后续的专业学习打下了坚实的基础。在专业课程方面，我们将学习了密码学、网络安全、操作系统安全、数据库安全等课程。通过这些课程的学习，我们将掌握了信息安全的基本理论和技术方法。</p>
<p>​	信息安全专业旨在培养具有扎实的计算机科学基础、掌握信息安全基本理论和技术方法的高素质专门人才。这些人才能够在信息安全领域发挥重要作用，如保障国家关键信息基础设施的安全、防范网络攻击和数据泄露等。他们需要具备扎实的专业知识、较强的实践能力和创新能力，以及良好的团队合作精神和职业道德。</p>
<p>​	毕业后，可以在政府部门、企事业单位、金融机构等领域从事信息安全管理、安全技术研发、安全咨询等工作。也可以选择继续深造，攻读硕士学位或博士学位，从事信息安全领域的科研工作。当然，作为计算机大类，也可以从事软件开发等工作。</p>
<p>​	总之,我相信，通过学习专业技能和知识将为我未来的职业生涯发展奠定坚实的基础。</p>
<h4 id="三-我的探索与实践"><a href="#三-我的探索与实践" class="headerlink" title="( 三) 我的探索与实践"></a>( <strong>三</strong>) <strong>我的探索与实践</strong></h4><h4 id="1-自我探索"><a href="#1-自我探索" class="headerlink" title="1.自我探索"></a>1.自我探索</h4><p>​	霍兰德人格类型测试：我进行了霍兰德职业兴趣测试，结果显示我属于“研究型（I）”和“现实型（R）”的混合类型。研究型的特点表明我喜欢探索和理解事物的原理，对科学研究和解决复杂问题有浓厚兴趣；现实型则体现了我偏好具体的、实际的工作，动手能力较强。对照自身，我发现这个结果与我平时喜欢钻研代码问题、动手搭建软件环境等行为相契合。例如，在学习数据结构课程时，我会深入研究各种算法的原理，并通过实际编程来验证和优化它们。</p>
<p>​	MBTI 性格测试：MBTI 测试结果为 INTJ（建筑师型人格）。INTJ 类型的人通常具有强大的逻辑思维能力和战略眼光，喜欢独立思考和解决复杂问题。我在自我反思中发现，在团队项目中，我更倾向于制定整体的架构和规划，对细节有较高的要求，并且能够坚持自己的观点。但同时，我也意识到这种性格可能导致我在沟通和合作方面不够主动，需要在今后加以改进。</p>
<p>​	技能与价值观测评：通过技能测评，我了解到自己在编程语言（如 Java、Python）和数据库管理方面有一定的优势。在价值观测评中，我发现自己非常看重工作的成就感、创新性和自主性。这意味着我在选择职业时，会更倾向于那些能够让我发挥专业技能、有机会进行创新实践并且能够自主决策的工作。</p>
<p>​	他人反馈（360 度评估法）：我通过向老师、同学和家人发放调查问卷的方式进行了 360 度评估。老师认为我学习能力强，善于思考问题，但在团队协作中有时过于专注自己的任务，对团队成员的沟通和支持不够。同学评价我技术能力过硬，能够在项目中起到关键作用，但有时过于追求完美，导致项目进度可能受到影响。家人则觉得我有很强的责任心，但在生活中可能因为专注工作而忽略了休息。综合这些反馈，我认识到自己在团队协作和时间管理方面还有待提高。</p>
<h4 id="2-实习实践"><a href="#2-实习实践" class="headerlink" title="2.实习实践"></a>2.实习实践</h4><p><strong>实习目标</strong></p>
<ul>
<li><strong>技能提升</strong>：深入学习编程语言（如Java、Python、C++等），掌握开发工具和框架，提升代码质量和开发效率。</li>
<li><strong>项目经验积累</strong>：参与实际项目，了解软件开发的完整流程，积累实战经验。</li>
<li><strong>团队协作与沟通</strong>：学会在团队中有效沟通，理解并尊重他人意见，增强团队合作意识。</li>
<li><strong>职业素养培养</strong>：培养职业责任感、时间管理能力和问题解决能力，为未来职业生涯打下坚实基础。</li>
</ul>
<p><strong>实习内容</strong></p>
<ul>
<li><strong>参与项目开发</strong><ul>
<li>在团队中负责部分模块的编码和单元测试，确保代码质量符合团队标准。</li>
<li>通过参与实际项目，了解从需求分析、设计、编码、测试到部署的完整开发流程。</li>
</ul>
</li>
<li><strong>学习开发工具和框架</strong><ul>
<li>熟练使用开发工具（如Visual Studio、Eclipse、PyCharm）和版本控制系统（如Git）。</li>
<li>掌握主流框架（如Spring、Hibernate等），提升开发效率和代码质量。</li>
</ul>
</li>
<li><strong>数据库操作与优化</strong><ul>
<li>学习关系型数据库（如MySQL、Oracle）的基本概念和操作。</li>
<li>掌握数据库优化技巧，如索引优化、存储过程和事务管理。</li>
</ul>
</li>
<li><strong>团队协作与沟通</strong><ul>
<li>积极参与团队会议和讨论，与团队成员密切配合，共同完成项目任务。</li>
<li>学会表达自己的想法，同时理解并尊重他人的意见。</li>
</ul>
</li>
</ul>
<p><strong>实习方法</strong></p>
<ul>
<li><strong>企业导师指导</strong>：由企业导师进行一对一指导，帮助实习生快速适应工作环境，提升专业技能。</li>
<li><strong>定期交流与反馈</strong>：定期与导师和团队成员交流，获取反馈和建议，及时调整工作方法和计划。</li>
<li><strong>自主学习与实践</strong>：利用业余时间学习新技术和知识，参加线上线下的技术培训和研讨会，拓宽知识面。</li>
</ul>
<p><strong>实习总结与反思</strong></p>
<ul>
<li><strong>技能提升总结</strong>：回顾在编程能力、工具使用、数据库操作等方面的进步，明确自己的优势和不足。</li>
<li><strong>项目经验总结</strong>：总结参与项目的经验，包括遇到的问题、解决方法以及从中获得的收获。</li>
<li><strong>团队协作反思</strong>：反思在团队沟通和协作中的表现，思考如何进一步提升团队合作能力。</li>
</ul>
<p><strong>未来规划</strong></p>
<ul>
<li><strong>技术方向</strong>：继续深化专业知识，关注云计算、人工智能等新兴技术领域，提升技术水平。</li>
<li><strong>管理方向</strong>：加强软技能的培养，如领导力、沟通能力和项目管理能力，为未来向管理岗位发展做好准备。</li>
<li><strong>持续学习</strong>：保持对新技术的敏感度和学习热情，不断提升自己的综合素质和竞争力。</li>
</ul>
<h4 id="四-小结"><a href="#四-小结" class="headerlink" title="(四) 小结"></a>(<strong>四</strong>) <strong>小结</strong></h4><p>​	通过自我探索和对成长经历的梳理，我可以选择的职业方向有以下几个：</p>
<p>​	软件工程师：凭借自己在编程语言和软件开发方面的技能，我可以成为一名专业的软件工程师，负责开发各种类型的软件系统。这是我目前比较明确的职业方向之一，我希望能够在这个领域深入发展，不断提升自己的技术水平。</p>
<p>​	系统架构师：，我对系统架构设计产生了浓厚的兴趣。系统架构师需要具备全面的技术知识和丰富的项目经验，能够设计出高效、稳定的软件系统架构。我希望通过进一步的学习和实践，能够成为一名优秀的系统架构师。</p>
<p>​	软件项目经理：在参与项目的过程中，我逐渐展现出了一定的项目管理能力。软件项目经理需要负责项目的整体规划、进度控制和团队管理等工作。我认为自己具备良好的沟通能力和组织协调能力，有潜力成为一名软件项目经理。</p>
<p>​	目前，我最想进一步深入探索并将其确定为目标的职业是软件工程师和系统架构师。我计划在接下来的学习和实践中，不断提升自己在这两个领域的技能和知识，为未来的职业发展打下坚实的基础。</p>
<h3 id="二、我的职业探索"><a href="#二、我的职业探索" class="headerlink" title="二、我的职业探索"></a>二、我的职业探索</h3><h4 id="一-职业一：软件工程师"><a href="#一-职业一：软件工程师" class="headerlink" title="( 一) 职业一：软件工程师"></a>( <strong>一</strong>) <strong>职业一：软件工程师</strong></h4><h5 id="1-职业需求"><a href="#1-职业需求" class="headerlink" title="1.职业需求"></a>1.职业需求</h5><p>​	人才供求状况：随着信息技术的飞速发展，软件行业蓬勃兴起，国家和社会对软件工程师的需求持续增长。目前人才市场供不应求，特别是具备丰富经验和专业技能的高级软件工程师更是稀缺。</p>
<p>​	人才要求和准入标准：通常需要掌握至少一种主流编程语言，如 Java、Python 等，熟悉软件开发流程和相关工具。一般要求本科及以上学历，计算机科学、软件工程等相关专业优先。部分企业会要求有相关项目经验或专业认证。</p>
<p>​	主要工作内容和社会职责：主要负责软件系统的设计、开发、测试和维护等工作。其社会职责是通过开发高质量的软件产品，提高各行业的工作效率和信息化水平，推动社会的数字化转型。</p>
<p>​	职业意义和价值：软件工程师开发的软件广泛应用于各个领域，如医疗、金融、教育等，为社会创造了巨大的经济效益和社会效益。</p>
<p>​	职业发展空间：软件工程师有广阔的发展空间，可以从初级软件工程师晋升为高级软件工程师、技术主管、项目经理等，也可以选择专注于某一技术领域，成为技术专家。</p>
<h5 id="2-职业与专业"><a href="#2-职业与专业" class="headerlink" title="2.职业与专业"></a>2.职业与专业</h5><p>​	职业与专业培养方向一致。通过专业学习，系统掌握计算机科学和软件工程的基础知识，如数据结构、算法设计、编程语言等。在专业实践方面，可以参加学校组织的课程设计、实训项目，以及校外的实习活动，积累项目经验，提高解决实际问题的能力，从而获得从事软件工程师职业所必须的素质能力。</p>
<h5 id="3-职业趋势"><a href="#3-职业趋势" class="headerlink" title="3.职业趋势"></a>3.职业趋势</h5><p>​	社会发展的影响：科技进步将促使软件工程师需要不断学习新的技术，如人工智能、大数据、区块链等，以满足市场对创新软件产品的需求。随着经济的发展和人们生活水平的提高，对软件的功能和用户体验要求也越来越高，这将导致软件工程师的工作内容更加复杂和多样化。工作场景可能从传统的办公室逐渐向远程办公转变，工作方式也将更加注重团队协作和跨领域合作。对从业者的综合能力要求也将提高，除了技术能力，还需要具备良好的沟通能力、团队管理能力和创新思维。</p>
<p>​	应对准备和心态行动：为了适应这些变化，要提前学习新兴技术，拓宽自己的技术视野。保持积极学习的心态，不断更新知识体系。积极参与团队项目，提高沟通和协作能力。以开放、创新的心态迎接变化，勇于尝试新的技术和方法。</p>
<h5 id="4-我的人生楷模"><a href="#4-我的人生楷模" class="headerlink" title="4.我的人生楷模"></a>4.我的人生楷模</h5><p>​	我的人生楷模是林纳斯·托瓦兹（Linus Torvalds）。他是 Linux 内核的开发者，其成就在于开创了开源软件的先河，推动了整个计算机行业的发展。他的品质包括对技术的热爱、执着和创新精神。我想要学习他对技术的专注和追求卓越的态度，以及勇于挑战传统、推动开源文化发展的创新精神。 </p>
<h4 id="二-职业二：系统架构师"><a href="#二-职业二：系统架构师" class="headerlink" title="( 二) 职业二：系统架构师"></a>( <strong>二</strong>) <strong>职业二：系统架构师</strong></h4><h5 id="1-职业需求-1"><a href="#1-职业需求-1" class="headerlink" title="1.职业需求"></a>1.职业需求</h5><p>​	人才供求状况：系统架构师是软件行业中的高端人才，目前市场上供不应求。随着企业数字化转型的加速，对系统架构师的需求将持续增长。</p>
<p>​	人才要求和准入标准：需要具备深厚的技术功底，熟悉多种技术和架构模式，如微服务架构、云计算架构等。通常要求有丰富的软件开发经验，一般在 5 年以上。学历方面，本科及以上学历，计算机相关专业。部分企业会要求有相关的专业认证，如 TOGAF 认证等。</p>
<p>​	主要工作内容和社会职责：主要负责设计软件系统的整体架构，确保系统的高可用性、高性能和可扩展性。社会职责是为企业提供合理的技术架构方案，降低企业的技术成本和风险，推动企业的信息化建设。</p>
<p>​	职业意义和价值：系统架构师设计的架构直接影响软件系统的质量和性能，对企业的发展至关重要。优秀的架构可以提高企业的竞争力，促进社会资源的优化配置。</p>
<p>​	职业发展空间：系统架构师可以晋升为技术总监、首席技术官等高级管理职位，也可以成为独立的技术顾问，为不同企业提供专业的架构设计服务。</p>
<h5 id="2-职业与专业-1"><a href="#2-职业与专业-1" class="headerlink" title="2.职业与专业"></a><strong>2</strong>.职业与专业</h5><p>​	职业与专业培养方向一致。在专业学习中，深入学习计算机原理、操作系统、数据库等基础知识，为架构设计打下坚实的理论基础。通过专业实践，参与大型项目的开发，了解不同架构的应用场景和优缺点，积累架构设计经验。同时，学习架构设计的方法和工具，提高架构设计能力。</p>
<h5 id="3-职业趋势-1"><a href="#3-职业趋势-1" class="headerlink" title="3.职业趋势"></a><strong>3</strong>.职业趋势</h5><p>​	科技进步将带来新的架构模式和技术，如无服务器架构、人工智能架构等，系统架构师需要不断学习和掌握这些新技术。政治变革和经济发展可能会导致企业的业务需求发生变化，系统架构师需要根据企业的战略调整架构设计。随着人们生活水平的提高和消费习惯的改变，对软件系统的响应速度和用户体验要求也越来越高，这将促使系统架构师优化架构设计，提高系统的性能和可用性。对从业者的跨领域知识和创新能力要求也将提高。</p>
<p>​	提前关注行业的技术动态，学习新兴的架构模式和技术。培养跨领域的知识，了解不同行业的业务需求。保持创新思维，勇于尝试新的架构设计方法。以积极乐观的心态面对变化，不断提升自己的综合素质。</p>
<h5 id="4-我的人生楷模-1"><a href="#4-我的人生楷模-1" class="headerlink" title="4.我的人生楷模"></a>4.我的人生楷模</h5><p>​      我的人生楷模是马丁·福勒（Martin Fowler）。他是著名的软件开发专家，在软件架构和设计模式领域有深厚的造诣。他提出了许多经典的设计模式和架构原则，如敏捷开发、持续集成等，对软件开发行业产生了深远的影响。他的品质包括对软件开发的热情、严谨的治学态度和乐于分享的精神。我想要学习他对技术的深入研究和总结归纳能力，以及分享知识、推动行业发展的精神。 ( <strong>三</strong>) <strong>小结</strong></p>
<h4 id="首选职业方向"><a href="#首选职业方向" class="headerlink" title="首选职业方向"></a><strong>首选职业方向</strong></h4><p>​	经过对计算机软件工程领域的探索，作为大一学生，首选的职业方向可以是软件开发工程师。随着信息技术的快速发展，云计算、大数据、人工智能等新兴技术崛起，对软件开发工程师的需求急剧增加。软件开发工程师是软件工程领域的核心职位，负责应用程序、操作系统、数据库等软件的设计、开发和维护工作，具有广阔的发展前景.</p>
<p>​	渴望成为一名追求技术创新和卓越，注重团队合作和沟通，重视用户反馈和需求，关注社会影响和可持续发展的软件工程师。在这个信息时代，软件已经渗透到社会的各个角落，为社会创造的价值主要体现在以下几个方面：</p>
<p>​	提高生产效率：开发出高效的企业管理软件、办公自动化软件等，帮助企业优化业务流程，提高生产和管理效率。</p>
<p>​	改善生活质量：设计出便捷的移动应用程序，如医疗健康类应用、教育学习类应用等，为人们的生活和学习提供便利，改善生活质量。</p>
<p>​	推动科技进步：参与到前沿技术的研发中，如人工智能、大数据等领域的软件开发，为科技的进步和创新贡献自己的力量3软件工程师价值观、兴趣的满足:工作环境:工作报酬:工作与生活平衡</p>
<h4 id="人职适配分析"><a href="#人职适配分析" class="headerlink" title="人职适配分析"></a><strong>人职适配分析</strong></h4><p>​	兴趣匹配：对编程和软件开发有浓厚的兴趣，喜欢解决复杂的技术问题，享受学习新技术和编程语言的过程，这与软件开发工程师的职业要求相契合。因为软件开发工作需要不断地学习和探索新的技术，解决各种技术难题，对技术的热爱是做好这份工作的重要动力3软件工程师价值观、兴趣的满足:工作环境:工作报酬:工作与生活平衡:…。</p>
<p>​	性格优势：本人活泼开朗，善于与人沟通和合作，容易与人相处，具有一定的领导能力和团队协作精神。在软件开发过程中，通常需要团队成员之间密切配合，共同完成项目，良好的沟通和协作能力有助于提高团队的工作效率2软件工程师职业规划4计算机专业大学生职业规划。</p>
<p>​	学习能力：在大学期间积极进取，具有较强的学习能力和对新技术的追求精神，能够快速掌握新知识和新技能。软件开发行业技术更新换代快，需要不断学习和更新知识，较强的学习能力能够帮助自己适应行业的发展变化4计算机专业大学生职业规划。</p>
<p>​	专业知识不足：作为大一学生，目前所学的专业知识还比较基础，对于软件开发所需的编程语言、算法、数据库等知识掌握还不够深入和全面。例如，虽然可能已经学习了一些基础的编程语言，但在实际项目开发中，还需要掌握更多的编程技巧和优化方法。</p>
<p>​	实践经验缺乏：缺乏实际的软件开发项目经验，对软件项目的开发流程、团队协作模式等了解不够。在实际工作中，需要能够将理论知识应用到实际项目中，解决实际问题，而这需要通过大量的实践来积累经验。</p>
<p>​	项目管理能力有待提高：在软件开发过程中，除了技术能力外，还需要具备一定的项目管理能力，如制定项目计划、安排进度、协调资源等。目前还缺乏这方面的能力和经验，需要在今后的学习和实践中逐步培养。</p>
<h3 id="三、我的规划"><a href="#三、我的规划" class="headerlink" title="三、我的规划"></a>三、我的规划</h3><h4 id="一-目标分析"><a href="#一-目标分析" class="headerlink" title="( 一)  目标分析"></a>( <strong>一</strong>)  <strong>目标分析</strong></h4><h5 id="可利用资源"><a href="#可利用资源" class="headerlink" title="可利用资源"></a><strong>可利用资源</strong></h5><p>​      社会层面：社会上存在丰富的计算机软件工程相关资源。众多开源社区如 GitHub 提供了海量的代码资源和项目案例，可供学习参考。各类行业峰会和技术交流活动频繁举办，能拓宽视野，积累人脉。此外，一些企业为了吸引人才，会设立奖学金、助学金，资助优秀的软件工程专业学生。</p>
<p>​     学校层面：学校是学习和成长的重要平台。专业的课程设置为我们构建了系统的知识体系，实验室配备了先进的设备和软件，满足实践需求。学校还会与企业合作，为学生提供实习实践的场所和机会，如校企合作的实训基地、企业实习项目等。同时，学校的老师具有丰富的教学和实践经验，能够在学术和职业发展上给予引领和指导。</p>
<p>​     家庭层面：家庭是温暖的后盾。在物质方面，家人会提供必要的经费支持，保障学习和生活的开销。在精神方面，家人的鼓励和支持让我们在面对困难时更有信心和动力。他们会关心我们的学习和成长，给予情感上的慰藉。</p>
<h5 id="面临的困难"><a href="#面临的困难" class="headerlink" title="面临的困难"></a><strong>面临的困难</strong></h5><p>​     技术更新换代快：计算机软件工程领域技术发展日新月异，新的编程语言、框架和工具不断涌现。要保持对新技术的学习和掌握，需要投入大量的时间和精力，否则很容易跟不上技术发展的步伐。</p>
<p>​     竞争压力大：随着计算机软件工程专业的热门，每年都有大量的毕业生涌入市场，就业竞争非常激烈。企业对人才的要求也越来越高，不仅需要具备扎实的专业知识，还需要有丰富的实践经验和良好的综合素质。</p>
<p>​     学习难度大：软件工程专业的课程难度较大，涉及到很多复杂的理论和算法。例如，数据结构、算法设计与分析等课程，需要较强的逻辑思维和数学基础。学习过程中难免会遇到各种难题，需要花费大量的时间和精力去攻克。</p>
<h4 id="二-我的计划"><a href="#二-我的计划" class="headerlink" title="( 二) 我的计划"></a>( <strong>二</strong>) <strong>我的计划</strong></h4><h5 id="1-大学期间的行动计划"><a href="#1-大学期间的行动计划" class="headerlink" title="1.大学期间的行动计划"></a><strong>1</strong>.大学期间的行动计划</h5><p><strong>大一：</strong></p>
<p>学习目标：适应大学的学习节奏，打好专业基础。掌握计算机科学的基础知识，如编程语言（C、C++）、数据结构等。</p>
<p>行动计划：认真学习每一门课程，按时完成作业，积极参加课堂讨论。利用课余时间阅读相关的专业书籍和文献，拓宽知识面。</p>
<p>能力提升：参加学校的编程社团，通过社团活动提高编程能力和团队协作能力。</p>
<p>人际交往：积极参加班级和学校组织的活动，结识更多的同学和朋友，拓展人脉。</p>
<p>信息收集：关注专业相关的网站和论坛，了解行业动态和发展趋势。</p>
<p>身心健康：坚持每天锻炼，保持良好的作息习惯，保证充足的睡眠。</p>
<p><strong>大二：</strong></p>
<p>学习目标：深入学习专业课程，如操作系统、数据库原理等。掌握至少一种主流的开发框架。</p>
<p>行动计划：制定详细的学习计划，合理安排时间。多做实验和项目，加深对知识的理解和掌握。</p>
<p>能力提升：参加学校组织的实习实践活动，积累项目经验。</p>
<p>人际交往：与老师和同学保持良好的沟通，建立自己的人脉圈子。</p>
<p>信息收集：关注企业的招聘信息和实习需求，了解企业对人才的要求。</p>
<p>身心健康：参加一些兴趣爱好小组，缓解学习压力。</p>
<p><strong>大三：</strong></p>
<p>学习目标：选择自己感兴趣的方向进行深入学习，如人工智能、软件开发等。提高自己的实践能力和解决问题的能力。</p>
<p>行动计划：参加科研项目或竞赛，锻炼自己的创新能力和团队协作能力。</p>
<p>能力提升：找一家与专业相关的企业进行实习，了解企业的实际运作和开发流程。</p>
<p>人际交往：与实习单位的同事和领导建立良好的关系，积累人脉资源。</p>
<p>信息收集：关注行业内的前沿技术和发展趋势，为自己的职业发展做好准备。</p>
<p>身心健康：保持积极乐观的心态，应对学习和实习中的压力。</p>
<p><strong>大四：</strong></p>
<p>学习目标：完成毕业设计，确保顺利毕业。</p>
<p>行动计划：认真撰写毕业设计论文，积极与导师沟通，确保论文质量。</p>
<p>能力提升：总结大学期间的学习和实践经验，不断完善自己的简历和作品集。</p>
<p>人际交往：参加校园招聘会，与企业招聘人员进行交流，争取获得理想的工作机会。</p>
<p>信息收集：了解就业市场的动态和企业的需求，为自己的职业发展做出合理的规划。</p>
<p>身心健康：调整好心态，以积极的姿态迎接毕业和就业。</p>
<h5 id="2-职场的适应计划"><a href="#2-职场的适应计划" class="headerlink" title="2.职场的适应计划"></a><strong>2</strong>.职场的适应计划</h5><p>​	进入职初期（1 - 3 月）：了解公司的企业文化、规章制度和业务流程。与同事建立良好的关系，融入团队。虚心向同事和上级请教，尽快熟悉工作内容和工作环境。</p>
<p>​	成长阶段（3 - 6 月）：承担一些简单的项目任务，通过实践提高自己的工作能力。积极参加公司组织的培训和学习活动，不断提升自己的专业技能。主动与团队成员沟通协作，提高团队协作能力。</p>
<p>​	能力提升阶段（6 - 12 月）：独立完成一些复杂的项目任务，展现自己的工作能力和价值。与其他部门建立良好的合作关系，拓展自己的人脉资源。关注行业动态和技术发展趋势，为公司的发展提供一些有价值的建议</p>
<h5 id="3-长期的发展计划"><a href="#3-长期的发展计划" class="headerlink" title="3.长期的发展计划"></a><strong>3</strong>.长期的发展计划</h5><p>​	短期（1 - 3 年）：成为一名技术骨干，熟练掌握公司的核心技术和业务流程。带领团队完成一些重要的项目任务，提高自己的团队管理能力。</p>
<p>​	中期（3 - 5 年）：晋升为技术经理或项目经理，负责公司的技术研发和项目管理工作。制定公司的技术发展战略和项目计划，带领团队实现公司的业务目标。</p>
<p>​	长期（5 年以上）：成为公司的技术总监或高管，参与公司的战略决策和管理工作。推动公司的技术创新和业务发展，为公司的长期发展奠定坚实的基础。</p>
<h5 id="4-评估和调整"><a href="#4-评估和调整" class="headerlink" title="4.评估和调整"></a><strong>4</strong>.评估和调整</h5><p>​	风险和挑战：技术更新换代快，可能导致自己的技术过时；市场竞争激烈，可能面临失业的风险；职业发展遇到瓶颈，难以实现晋升。</p>
<p>​	应对措施：定期评估自己的职业发展状况，制定合理的学习计划，不断学习新知识和新技术，保持自己的竞争力。建立良好的人际关系网络，拓展职业发展渠道。当遇到职业发展瓶颈时，及时调整自己的职业规划，寻找新的发展机会。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>​	计算机软件工程师生涯发展是一个长期而复杂的过程，需要我们不断学习、不断实践、不断调整。在这个过程中，我们要充分利用各种资源，克服面临的困难，制定合理的计划，并根据实际情况进行评估和调整。相信通过自己的努力和坚持，一定能够实现自己的职业目标，成为一名优秀的计算机软件工程师。</p>
]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>plan</tag>
      </tags>
  </entry>
  <entry>
    <title>QT2nd</title>
    <url>/2025/03/22/QT2nd/</url>
    <content><![CDATA[<h1 id="Timecaculatorplus"><a href="#Timecaculatorplus" class="headerlink" title="Timecaculatorplus"></a>Timecaculatorplus</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> TIMEC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TIMEC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QCoreApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QString&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Time</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> Hour;</span><br><span class="line">    <span class="type">int</span> Minute;</span><br><span class="line">    <span class="type">int</span> Second;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Time</span>();</span><br><span class="line">    <span class="built_in">Time</span>(<span class="type">int</span> h, <span class="type">int</span> m, <span class="type">int</span> s);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">AddTime</span><span class="params">(Time&amp; t)</span></span>;</span><br><span class="line">    <span class="function">QString <span class="title">toString</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">setInput</span><span class="params">(<span class="type">const</span> QString&amp; timeStr)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getHour</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> Hour; &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getMinute</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> Minute; &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getSecond</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> Second; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// TIMEC_H</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> WIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;timec.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span>;</span><br><span class="line">&#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Widget</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">Widget</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_ClearpushButton_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_ClosepushButton_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_AddButton_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_SetButton_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui;</span><br><span class="line">    QString expression;</span><br><span class="line">    Time T;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// WIDGET_H</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    Widget w;</span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;timec.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Time::<span class="built_in">Time</span>():<span class="built_in">Hour</span>(<span class="number">0</span>),<span class="built_in">Minute</span>(<span class="number">0</span>),<span class="built_in">Second</span>(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Time::<span class="built_in">Time</span>(<span class="type">int</span> h, <span class="type">int</span> m, <span class="type">int</span> s)</span><br><span class="line">&#123;</span><br><span class="line">    Hour = h;</span><br><span class="line">    Minute = m;</span><br><span class="line">    Second = s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Time::AddTime</span><span class="params">(Time&amp; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> totalSeconds = (Hour * <span class="number">3600</span> + Minute * <span class="number">60</span> + Second) + (t.Hour * <span class="number">3600</span> + t.Minute * <span class="number">60</span> + t.Second);</span><br><span class="line">    Hour = totalSeconds / <span class="number">3600</span>;</span><br><span class="line">    totalSeconds %= <span class="number">3600</span>;</span><br><span class="line">    Minute = totalSeconds / <span class="number">60</span>;</span><br><span class="line">    Second = totalSeconds % <span class="number">60</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">QString <span class="title">Time::toString</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QString::<span class="built_in">asprintf</span>(<span class="string">&quot;%02d:%02d:%02d&quot;</span>, Hour, Minute, Second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Time::setInput</span><span class="params">(<span class="type">const</span> QString&amp; timeStr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QStringList parts = timeStr.<span class="built_in">split</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (parts.<span class="built_in">size</span>() != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> ok;</span><br><span class="line">    Hour = parts[<span class="number">0</span>].<span class="built_in">toInt</span>(&amp;ok);</span><br><span class="line">    <span class="keyword">if</span> (!ok || Hour &lt; <span class="number">0</span> || Hour &gt; <span class="number">23</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    Minute = parts[<span class="number">1</span>].<span class="built_in">toInt</span>(&amp;ok);</span><br><span class="line">    <span class="keyword">if</span> (!ok || Minute &lt; <span class="number">0</span> || Minute &gt; <span class="number">59</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    Second = parts[<span class="number">2</span>].<span class="built_in">toInt</span>(&amp;ok);</span><br><span class="line">    <span class="keyword">if</span> (!ok || Second &lt; <span class="number">0</span> || Second &gt; <span class="number">59</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;timec.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_ClearpushButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    expression.<span class="built_in">clear</span>();</span><br><span class="line">    ui-&gt;mainEdit-&gt;<span class="built_in">clear</span>();</span><br><span class="line">    ui-&gt;timeEdit-&gt;<span class="built_in">clear</span>();</span><br><span class="line">    ui-&gt;addEdit-&gt;<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_ClosepushButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_AddButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString current_time_str = ui-&gt;mainEdit-&gt;<span class="built_in">text</span>().<span class="built_in">trimmed</span>();</span><br><span class="line">    <span class="keyword">if</span> (current_time_str.<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;错误&quot;</span>, <span class="string">&quot;请先设置当前时间&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Time current_time;</span><br><span class="line">    <span class="keyword">if</span> (!current_time.<span class="built_in">setInput</span>(current_time_str)) &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;错误&quot;</span>, <span class="string">&quot;当前时间格式无效&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    QString add_time_str = ui-&gt;addEdit-&gt;<span class="built_in">text</span>().<span class="built_in">trimmed</span>();</span><br><span class="line">    <span class="keyword">if</span> (add_time_str.<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;错误&quot;</span>, <span class="string">&quot;请输入要添加的时间&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Time add_time;</span><br><span class="line">    <span class="keyword">if</span> (!add_time.<span class="built_in">setInput</span>(add_time_str)) &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;无效输入&quot;</span>, <span class="string">&quot;请输入正确的时间格式（HH:MM:SS）&quot;</span>);</span><br><span class="line">        ui-&gt;timeEdit-&gt;<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    current_time.<span class="built_in">AddTime</span>(add_time);</span><br><span class="line">    ui-&gt;mainEdit-&gt;<span class="built_in">setText</span>(current_time.<span class="built_in">toString</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_SetButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString timeStr = ui-&gt;timeEdit-&gt;<span class="built_in">text</span>().<span class="built_in">trimmed</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timeStr.<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">        ui-&gt;mainEdit-&gt;<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Time current;</span><br><span class="line">    <span class="keyword">if</span> (!current.<span class="built_in">setInput</span>(timeStr)) &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;无效输入&quot;</span>, <span class="string">&quot;请输入正确的时间格式（HH:MM:SS）&quot;</span>);</span><br><span class="line">        ui-&gt;timeEdit-&gt;<span class="built_in">clear</span>();</span><br><span class="line">        ui-&gt;mainEdit-&gt;<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ui-&gt;mainEdit-&gt;<span class="built_in">setText</span>(current.<span class="built_in">toString</span>());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>无需多言（</p>
<p>emmm,没写注释</p>
<p>kimi启动</p>
<p>这段代码是一个简单的 Qt 应用程序的一部分，主要用于处理时间的输入、验证和计算。以下是代码的详细解析：</p>
<h3 id="功能概述"><a href="#功能概述" class="headerlink" title="功能概述"></a>功能概述</h3><ol>
<li><p>**添加时间功能 (<code>on_AddButton_clicked</code>)**：</p>
<ul>
<li>从两个文本框中获取时间字符串。</li>
<li>验证时间格式是否正确。</li>
<li>如果格式正确，将两个时间相加，并将结果显示在主文本框中。</li>
</ul>
</li>
<li><p>**设置时间功能 (<code>on_SetButton_clicked</code>)**：</p>
<ul>
<li>从一个文本框中获取时间字符串。</li>
<li>验证时间格式是否正确。</li>
<li>如果格式正确，将结果显示在主文本框中。</li>
</ul>
</li>
</ol>
<h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h3><h4 id="1-添加时间功能-on-AddButton-clicked"><a href="#1-添加时间功能-on-AddButton-clicked" class="headerlink" title="1. 添加时间功能 (on_AddButton_clicked)"></a>1. 添加时间功能 (<code>on_AddButton_clicked</code>)</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_AddButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取主文本框中的当前时间字符串，并去除首尾空格</span></span><br><span class="line">    QString current_time_str = ui-&gt;mainEdit-&gt;<span class="built_in">text</span>().<span class="built_in">trimmed</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查当前时间是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (current_time_str.<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;错误&quot;</span>, <span class="string">&quot;请先设置当前时间&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 Time 对象并设置当前时间</span></span><br><span class="line">    Time current_time;</span><br><span class="line">    <span class="keyword">if</span> (!current_time.<span class="built_in">setInput</span>(current_time_str)) &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;错误&quot;</span>, <span class="string">&quot;当前时间格式无效&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取要添加的时间字符串，并去除首尾空格</span></span><br><span class="line">    QString add_time_str = ui-&gt;addEdit-&gt;<span class="built_in">text</span>().<span class="built_in">trimmed</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查要添加的时间是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (add_time_str.<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;错误&quot;</span>, <span class="string">&quot;请输入要添加的时间&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 Time 对象并设置要添加的时间</span></span><br><span class="line">    Time add_time;</span><br><span class="line">    <span class="keyword">if</span> (!add_time.<span class="built_in">setInput</span>(add_time_str)) &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;无效输入&quot;</span>, <span class="string">&quot;请输入正确的时间格式（HH:MM:SS）&quot;</span>);</span><br><span class="line">        ui-&gt;addEdit-&gt;<span class="built_in">clear</span>(); <span class="comment">// 清空无效输入</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将当前时间和要添加的时间相加</span></span><br><span class="line">    current_time.<span class="built_in">AddTime</span>(add_time);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将结果显示在主文本框中</span></span><br><span class="line">    ui-&gt;mainEdit-&gt;<span class="built_in">setText</span>(current_time.<span class="built_in">toString</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-设置时间功能-on-SetButton-clicked"><a href="#2-设置时间功能-on-SetButton-clicked" class="headerlink" title="2. 设置时间功能 (on_SetButton_clicked)"></a>2. 设置时间功能 (<code>on_SetButton_clicked</code>)</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_SetButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取时间设置文本框中的时间字符串，并去除首尾空格</span></span><br><span class="line">    QString timeStr = ui-&gt;timeEdit-&gt;<span class="built_in">text</span>().<span class="built_in">trimmed</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查时间字符串是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (timeStr.<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">        ui-&gt;mainEdit-&gt;<span class="built_in">clear</span>(); <span class="comment">// 清空主文本框</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 Time 对象并设置时间</span></span><br><span class="line">    Time current;</span><br><span class="line">    <span class="keyword">if</span> (!current.<span class="built_in">setInput</span>(timeStr)) &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;无效输入&quot;</span>, <span class="string">&quot;请输入正确的时间格式（HH:MM:SS）&quot;</span>);</span><br><span class="line">        ui-&gt;timeEdit-&gt;<span class="built_in">clear</span>(); <span class="comment">// 清空无效输入</span></span><br><span class="line">        ui-&gt;mainEdit-&gt;<span class="built_in">clear</span>(); <span class="comment">// 清空主文本框</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将结果显示在主文本框中</span></span><br><span class="line">    ui-&gt;mainEdit-&gt;<span class="built_in">setText</span>(current.<span class="built_in">toString</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码逻辑分析"><a href="#代码逻辑分析" class="headerlink" title="代码逻辑分析"></a>代码逻辑分析</h3><ol>
<li><p><strong>输入验证</strong>：</p>
<ul>
<li>每次从文本框获取时间字符串后，都会检查是否为空。</li>
<li>使用 <code>trimmed()</code> 方法去除首尾空格，避免因多余空格导致的格式错误。</li>
<li>使用 <code>Time</code> 类的 <code>setInput</code> 方法验证时间格式是否正确。</li>
</ul>
</li>
<li><p><strong>错误处理</strong>：</p>
<ul>
<li>如果输入的时间格式无效，会弹出警告框提示用户，并清空无效的输入框。</li>
</ul>
</li>
<li><p><strong>时间计算</strong>：</p>
<ul>
<li>使用 <code>Time</code> 类的 <code>AddTime</code> 方法将两个时间相加。</li>
<li>最终结果通过 <code>toString</code> 方法格式化为字符串显示在主文本框中。</li>
</ul>
</li>
</ol>
<p>这段代码是一个 <code>Time</code> 类的成员函数 <code>setInput</code>，用于验证和设置时间字符串。以下是代码的详细解析：</p>
<h3 id="功能概述-1"><a href="#功能概述-1" class="headerlink" title="功能概述"></a>功能概述</h3><p><code>setInput</code> 函数的作用是：</p>
<ol>
<li>接收一个时间格式的字符串（如 “HH:MM:SS”）。</li>
<li>验证字符串是否符合时间格式。</li>
<li>如果格式正确，将时间解析为小时、分钟和秒，并存储到类的成员变量中。</li>
<li>返回一个布尔值，表示设置是否成功。</li>
</ol>
<h3 id="代码解析-1"><a href="#代码解析-1" class="headerlink" title="代码解析"></a>代码解析</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Time::setInput</span><span class="params">(<span class="type">const</span> QString&amp; timeStr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 将时间字符串按冒号分割成部分</span></span><br><span class="line">    QStringList parts = timeStr.<span class="built_in">split</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查分割后的部分数量是否为3（小时、分钟、秒）</span></span><br><span class="line">    <span class="keyword">if</span> (parts.<span class="built_in">size</span>() != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果不是3部分，格式无效</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> ok;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 解析小时部分</span></span><br><span class="line">    Hour = parts[<span class="number">0</span>].<span class="built_in">toInt</span>(&amp;ok);</span><br><span class="line">    <span class="keyword">if</span> (!ok || Hour &lt; <span class="number">0</span> || Hour &gt; <span class="number">23</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 检查是否为有效整数且在0-23范围内</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析分钟部分</span></span><br><span class="line">    Minute = parts[<span class="number">1</span>].<span class="built_in">toInt</span>(&amp;ok);</span><br><span class="line">    <span class="keyword">if</span> (!ok || Minute &lt; <span class="number">0</span> || Minute &gt; <span class="number">59</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 检查是否为有效整数且在0-59范围内</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析秒部分</span></span><br><span class="line">    Second = parts[<span class="number">2</span>].<span class="built_in">toInt</span>(&amp;ok);</span><br><span class="line">    <span class="keyword">if</span> (!ok || Second &lt; <span class="number">0</span> || Second &gt; <span class="number">59</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 检查是否为有效整数且在0-59范围内</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果所有部分都有效，返回true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码逻辑分析-1"><a href="#代码逻辑分析-1" class="headerlink" title="代码逻辑分析"></a>代码逻辑分析</h3><ol>
<li><p><strong>字符串分割</strong>：</p>
<ul>
<li>使用 <code>split(&#39;:&#39;)</code> 方法将时间字符串按冒号分割成三部分。</li>
<li>例如，输入 “12:34:56” 会分割成 <code>[&quot;12&quot;, &quot;34&quot;, &quot;56&quot;]</code>。</li>
</ul>
</li>
<li><p><strong>检查分割结果</strong>：</p>
<ul>
<li>如果分割后的部分数量不是 3，说明格式不符合 “HH:MM:SS”，直接返回 <code>false</code>。</li>
</ul>
</li>
<li><p><strong>解析和验证每部分</strong>：</p>
<ul>
<li>使用 <code>toInt(&amp;ok)</code> 方法将字符串部分转换为整数，并检查转换是否成功。</li>
<li>验证每部分的数值范围：<ul>
<li>小时必须在 0-23 之间。</li>
<li>分钟和秒必须在 0-59 之间。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>返回结果</strong>：</p>
<ul>
<li>如果所有部分都有效，返回 <code>true</code>。</li>
<li>如果有任何部分无效，返回 <code>false</code>。</li>
</ul>
</li>
</ol>
<p>最后看一下效果吧！</p>
<iframe src="https://www.bilibili.com/video/BV1k7XnYiEdM/?spm_id_from=333.1387.homepage.video_card.click&vd_source=f9cc7a5150b1fcac8488d689a17439d6" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%"  height="580" quality="high" > </iframe>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>QT3rd定时器</title>
    <url>/2025/03/23/QT3rd%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
    <content><![CDATA[<h1 id="计时器，可以实现图片自动放映的功能"><a href="#计时器，可以实现图片自动放映的功能" class="headerlink" title="计时器，可以实现图片自动放映的功能"></a>计时器，可以实现图片自动放映的功能</h1><h2 id="QTimer（仅展示示例源码，需要的私我：）"><a href="#QTimer（仅展示示例源码，需要的私我：）" class="headerlink" title="QTimer（仅展示示例源码，需要的私我：）"></a>QTimer（仅展示示例源码，需要的私我：）</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::timeoutSlot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QString <span class="title">Path</span><span class="params">(<span class="string">&quot;D:........&quot;</span>)</span></span>;<span class="comment">//这里存放你自己的路径</span></span><br><span class="line">    Path += QString::<span class="built_in">number</span>(picID);<span class="comment">//出于简单考虑，图片路径为1.jpg,2,jpg...picID表示数字</span></span><br><span class="line">    Path += <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">    QImage img;</span><br><span class="line">    img.<span class="built_in">load</span>(Path);<span class="comment">//存入路径</span></span><br><span class="line">    ui-&gt;label-&gt;<span class="built_in">setPixmap</span>(QPixmap::<span class="built_in">fromImage</span>(img));<span class="comment">//显示图片</span></span><br><span class="line">    picID++;</span><br><span class="line">    <span class="keyword">if</span>(picID==<span class="number">5</span>)<span class="comment">//假设总共5张</span></span><br><span class="line">    &#123;</span><br><span class="line">        picID=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)<span class="comment">//构造函数</span></span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    picID=<span class="number">1</span>;</span><br><span class="line">    timer=<span class="keyword">new</span> QTimer;</span><br><span class="line">    QImage img;</span><br><span class="line">    img.<span class="built_in">load</span>(<span class="string">&quot;D:&quot;</span>);</span><br><span class="line">    ui-&gt;label-&gt;<span class="built_in">setPixmap</span>(QPixmap::<span class="built_in">fromImage</span>(img));<span class="comment">//展示第一张图</span></span><br><span class="line">    <span class="built_in">connect</span>(timer,&amp;QTimer::timeout,<span class="keyword">this</span>,&amp;Widget::timeoutSlot);<span class="comment">//当 QTimer 对象的间隔时间到达时，它会发出 timeout 信号。Qt 的事件循环会自动检测到这个信号，并调用与之相连的槽函数 </span></span><br><span class="line">        Widget::<span class="built_in">timeoutSlot</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>QTimer开始和结束按键比较简单this-&gt;start()，this-&gt;stop()。</p>
<h2 id="QObject"><a href="#QObject" class="headerlink" title="QObject"></a>QObject</h2><p>计时器的实现也可以使用这种方式，两者差别不大，注意一下开始和结束改为this-&gt;startTimer(),this-&gt;killTimer().</p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>QT4thclock</title>
    <url>/2025/03/30/QT4thclock/</url>
    <content><![CDATA[<h1 id="一个普普通通的小时钟"><a href="#一个普普通通的小时钟" class="headerlink" title="一个普普通通的小时钟"></a>一个普普通通的小时钟</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MAINWINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAINWINDOW_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>;</span><br><span class="line">&#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span> : <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MainWindow</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">MainWindow</span>();</span><br><span class="line">    <span class="type">int</span> picID=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">paintEvent</span><span class="params">(QPaintEvent *event)</span> <span class="keyword">override</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;QTimer&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;QTime&gt;</span></span></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    QTimer *timer=<span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">connect</span>(timer, &amp;QTimer::timeout, <span class="keyword">this</span>, QOverload&lt;&gt;::<span class="built_in">of</span>(&amp;MainWindow::update));</span><br><span class="line">    timer-&gt;<span class="built_in">start</span>(<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">setWindowTitle</span>(<span class="string">&quot;Clock&quot;</span>);</span><br><span class="line">    <span class="built_in">resize</span>(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::paintEvent</span><span class="params">(QPaintEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> QPoint hourHand[<span class="number">4</span>] = &#123;</span><br><span class="line">        <span class="built_in">QPoint</span>(<span class="number">5</span>, <span class="number">14</span>),</span><br><span class="line">        <span class="built_in">QPoint</span>(<span class="number">-5</span>, <span class="number">14</span>),</span><br><span class="line">        <span class="built_in">QPoint</span>(<span class="number">-4</span>, <span class="number">-61</span>),</span><br><span class="line">        <span class="built_in">QPoint</span>(<span class="number">4</span>, <span class="number">-61</span>)<span class="comment">//构成时针梯形的四个点</span></span><br><span class="line">    &#125;;<span class="comment">//时针</span></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> QPoint minuteHand[<span class="number">4</span>] = &#123;</span><br><span class="line">        <span class="built_in">QPoint</span>(<span class="number">4</span>, <span class="number">14</span>),</span><br><span class="line">        <span class="built_in">QPoint</span>(<span class="number">-4</span>, <span class="number">14</span>),</span><br><span class="line">        <span class="built_in">QPoint</span>(<span class="number">-3</span>, <span class="number">-79</span>),</span><br><span class="line">        <span class="built_in">QPoint</span>(<span class="number">3</span>, <span class="number">-79</span>)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> QPoint secondHand[<span class="number">4</span>] = &#123;</span><br><span class="line">        <span class="built_in">QPoint</span>(<span class="number">1</span>, <span class="number">14</span>),</span><br><span class="line">        <span class="built_in">QPoint</span>(<span class="number">-1</span>, <span class="number">14</span>),</span><br><span class="line">        <span class="built_in">QPoint</span>(<span class="number">-1</span>, <span class="number">-89</span>),</span><br><span class="line">        <span class="built_in">QPoint</span>(<span class="number">1</span>, <span class="number">-89</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="type">const</span> QColor <span class="title">hourColor</span><span class="params">(Qt::black)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">const</span> QColor <span class="title">minuteColor</span><span class="params">(Qt::blue)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">const</span> QColor <span class="title">secondColor</span><span class="params">(Qt::red)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> side = <span class="built_in">qMin</span>(<span class="built_in">width</span>(), <span class="built_in">height</span>());</span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    QTime time=QTime::<span class="built_in">currentTime</span>();<span class="comment">//获取时间</span></span><br><span class="line">    QDate date = QDate::<span class="built_in">currentDate</span>();<span class="comment">//获取日期</span></span><br><span class="line"></span><br><span class="line">    painter.<span class="built_in">setRenderHint</span>(QPainter::Antialiasing);<span class="comment">//平滑</span></span><br><span class="line">    painter.<span class="built_in">translate</span>(<span class="built_in">width</span>()/<span class="number">2</span>,<span class="built_in">height</span>()/<span class="number">2</span>);<span class="comment">//将原点移动到页面的中心</span></span><br><span class="line">    painter.<span class="built_in">scale</span>(side/<span class="number">200</span>,side/<span class="number">200</span>);<span class="comment">//设置长宽比例因子</span></span><br><span class="line">    painter.<span class="built_in">setBrush</span>(hourColor);<span class="comment">//设置画笔颜色</span></span><br><span class="line">    painter.<span class="built_in">setPen</span>(Qt::NoPen);</span><br><span class="line"></span><br><span class="line">    painter.<span class="built_in">save</span>();<span class="comment">//保存</span></span><br><span class="line">    painter.<span class="built_in">setPen</span>(Qt::blue);</span><br><span class="line">    painter.<span class="built_in">setFont</span>(<span class="built_in">QFont</span>(<span class="string">&quot;Arial&quot;</span>, <span class="number">10</span>));</span><br><span class="line">    painter.<span class="built_in">drawText</span>(<span class="built_in">QRect</span>(-side/<span class="number">2</span>,side/<span class="number">2</span><span class="number">-290</span>,side,<span class="number">290</span>),Qt::AlignCenter,<span class="built_in">tr</span>(<span class="string">&quot;Njupt&quot;</span>));</span><br><span class="line">    painter.<span class="built_in">restore</span>();</span><br><span class="line">    painter.<span class="built_in">save</span>();</span><br><span class="line">    painter.<span class="built_in">setPen</span>(Qt::black);<span class="comment">//设置画笔颜色</span></span><br><span class="line">    painter.<span class="built_in">setFont</span>(<span class="built_in">QFont</span>(<span class="string">&quot;Arial&quot;</span>, <span class="number">10</span>));<span class="comment">//设定字体</span></span><br><span class="line">    painter.<span class="built_in">drawText</span>(<span class="built_in">QRect</span>(-side/<span class="number">2</span>, side/<span class="number">2</span> - <span class="number">100</span>, side, <span class="number">100</span>), Qt::AlignCenter, date.<span class="built_in">toString</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>));<span class="comment">//将日期转化成字符串</span></span><br><span class="line">    painter.<span class="built_in">restore</span>();<span class="comment">//存储</span></span><br><span class="line"></span><br><span class="line">    painter.<span class="built_in">save</span>();</span><br><span class="line">    painter.<span class="built_in">rotate</span>(<span class="number">30</span>*(time.<span class="built_in">hour</span>()+time.<span class="built_in">minute</span>()/<span class="number">60</span>));</span><br><span class="line">    painter.<span class="built_in">drawConvexPolygon</span>(hourHand, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            painter.<span class="built_in">drawRect</span>(<span class="number">85</span>, <span class="number">-2</span>, <span class="number">10</span>, <span class="number">4</span>);<span class="comment">//(x,y,width,height)时针</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            painter.<span class="built_in">drawRect</span>(<span class="number">90</span>, <span class="number">-1</span>, <span class="number">5</span>, <span class="number">2</span>);<span class="comment">//(x,y,width,height)分针</span></span><br><span class="line">        &#125;</span><br><span class="line">        painter.<span class="built_in">rotate</span>(<span class="number">6</span>);<span class="comment">//每调用一次，转六度</span></span><br><span class="line">    &#125;</span><br><span class="line">    painter.<span class="built_in">restore</span>();</span><br><span class="line"></span><br><span class="line">    painter.<span class="built_in">save</span>();</span><br><span class="line">    painter.<span class="built_in">setBrush</span>(minuteColor);</span><br><span class="line"></span><br><span class="line">    painter.<span class="built_in">rotate</span>(<span class="number">6</span>*(time.<span class="built_in">minute</span>()+time.<span class="built_in">second</span>()/<span class="number">60</span>));</span><br><span class="line">    painter.<span class="built_in">drawConvexPolygon</span>(minuteHand, <span class="number">4</span>);</span><br><span class="line">    painter.<span class="built_in">restore</span>();</span><br><span class="line"></span><br><span class="line">    painter.<span class="built_in">save</span>();</span><br><span class="line">    painter.<span class="built_in">setBrush</span>(secondColor);</span><br><span class="line">    painter.<span class="built_in">rotate</span>(<span class="number">6</span>*time.<span class="built_in">second</span>());</span><br><span class="line">    painter.<span class="built_in">drawConvexPolygon</span>(secondHand, <span class="number">4</span>);<span class="comment">//</span></span><br><span class="line">    painter.<span class="built_in">drawEllipse</span>(<span class="number">-5</span>, <span class="number">-68</span>, <span class="number">10</span>, <span class="number">10</span>);<span class="comment">//(x,y,r,r)画小圆圈</span></span><br><span class="line">    painter.<span class="built_in">drawEllipse</span>(<span class="number">-5</span>, <span class="number">-6</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    painter.<span class="built_in">restore</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    MainWindow w;</span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>QT初识1st</title>
    <url>/2025/03/02/QT%E5%88%9D%E8%AF%861st/</url>
    <content><![CDATA[<h1 id="QT实现四则运算"><a href="#QT实现四则运算" class="headerlink" title="QT实现四则运算"></a>QT实现四则运算</h1><p>这里简单介绍一下思路，代码就不全放上来了。：（</p>
<p>（主要过于冗余了）</p>
<h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><p><img src="/img/qt1.png"></p>
<p>创建完项目后，先点击界面文件进入这个页面</p>
<p>在控件盒子中找到Buttons下的pushbutton,拖出后进行排列组合形成计算器的雏形，显示界面则从input Widge中拖出lineEdit,</p>
<p>之后给这些对象改名，方便后续操作。然后，右机这些对象，选择转到槽，回到编辑页面。</p>
<h3 id="二"><a href="#二" class="headerlink" title="二"></a>二</h3><p>在头文件private下添加</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QString expression;</span><br></pre></td></tr></table></figure>

<p>之后，在除了等于号之外的槽（函数）中添加如下代码</p>
<p><strong>以1举例</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_oneButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    expression += <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    ui-&gt;mainlineEdit-&gt;<span class="built_in">setText</span>(expression);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，肯定有更好的方法，但是作为初学者，我就先以能运行为目的：（</p>
<h3 id="三"><a href="#三" class="headerlink" title="三"></a>三</h3><p>至于等于号嘛</p>
<p>用到的算法有点复杂（实在不行就问问ai吧）</p>
<p>我也是通过ai加自己修改完成的:（</p>
<p>这里就直接放上来吧：0</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">QString <span class="title">Widget::infixToPostfix</span><span class="params">(<span class="type">const</span> QString &amp;expression)</span> </span>&#123;</span><br><span class="line">    QStack&lt;QChar&gt; stack;</span><br><span class="line">    QString postfix;</span><br><span class="line">    unordered_map&lt;QChar, <span class="type">int</span>&gt; precedence = &#123;</span><br><span class="line">        &#123;<span class="string">&#x27;+&#x27;</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;-&#x27;</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;*&#x27;</span>, <span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;/&#x27;</span>, <span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;(&#x27;</span>, <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;)&#x27;</span>, <span class="number">0</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; expression.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        QChar c = expression[i];</span><br><span class="line">        <span class="keyword">if</span> (c.<span class="built_in">isDigit</span>() || c == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 处理数字和小数点</span></span><br><span class="line">            <span class="type">int</span> j = i;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; expression.<span class="built_in">size</span>() &amp;&amp; (expression[j].<span class="built_in">isDigit</span>() || expression[j] == <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                postfix.<span class="built_in">append</span>(expression[j]);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            postfix.<span class="built_in">append</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            i = j - <span class="number">1</span>; <span class="comment">// 回溯到下一个操作符的位置</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            stack.<span class="built_in">push</span>(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.<span class="built_in">isEmpty</span>() &amp;&amp; stack.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                postfix.<span class="built_in">append</span>(stack.<span class="built_in">pop</span>());</span><br><span class="line">                postfix.<span class="built_in">append</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            stack.<span class="built_in">pop</span>(); <span class="comment">// 弹出 &#x27;(&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (precedence.<span class="built_in">count</span>(c)) &#123; <span class="comment">// 操作符</span></span><br><span class="line">            <span class="keyword">while</span> (!stack.<span class="built_in">isEmpty</span>() &amp;&amp; precedence[stack.<span class="built_in">top</span>()] &gt;= precedence[c]) &#123;</span><br><span class="line">                postfix.<span class="built_in">append</span>(stack.<span class="built_in">pop</span>());</span><br><span class="line">                postfix.<span class="built_in">append</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            stack.<span class="built_in">push</span>(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!stack.<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">        postfix.<span class="built_in">append</span>(stack.<span class="built_in">pop</span>());</span><br><span class="line">        postfix.<span class="built_in">append</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 去除多余的空格，确保每个标记之间有一个空格</span></span><br><span class="line">    <span class="keyword">return</span> postfix.<span class="built_in">simplified</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">calculate</span><span class="params">(<span class="type">const</span> QString &amp;postfix)</span> </span>&#123;</span><br><span class="line">    QStack&lt;<span class="type">double</span>&gt; stack;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Calculating postfix:&quot;</span> &lt;&lt; postfix; <span class="comment">// 调试输出后缀表达式</span></span><br><span class="line"></span><br><span class="line">    QStringList tokens = postfix.<span class="built_in">split</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> QString &amp;token : tokens) &#123;</span><br><span class="line">        <span class="keyword">if</span> (token.<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> ok;</span><br><span class="line">        <span class="type">double</span> num = token.<span class="built_in">toDouble</span>(&amp;ok);</span><br><span class="line">        <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">            stack.<span class="built_in">push</span>(num);</span><br><span class="line">            <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Pushed number:&quot;</span> &lt;&lt; num; <span class="comment">// 调试输出数字</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stack.<span class="built_in">size</span>() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Error: Less than two operands for operator&quot;</span> &lt;&lt; token; <span class="comment">// 调试输出错误</span></span><br><span class="line">                <span class="keyword">return</span> NAN;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> b = stack.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">double</span> a = stack.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">double</span> result;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (token == <span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line">                result = a + b;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token == <span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">                result = a - b;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token == <span class="string">&quot;*&quot;</span>) &#123;</span><br><span class="line">                result = a * b;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token == <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Error: Division by zero&quot;</span>; <span class="comment">// 调试输出错误</span></span><br><span class="line">                    <span class="keyword">return</span> NAN;</span><br><span class="line">                &#125;</span><br><span class="line">                result = a / b;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Error: Unknown operator&quot;</span> &lt;&lt; token; <span class="comment">// 调试输出错误</span></span><br><span class="line">                <span class="keyword">return</span> NAN;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            stack.<span class="built_in">push</span>(result);</span><br><span class="line">            <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Pushed result:&quot;</span> &lt;&lt; result; <span class="comment">// 调试输出中间结果</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (stack.<span class="built_in">size</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Error: Postfix expression has&quot;</span> &lt;&lt; stack.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;values left&quot;</span>; <span class="comment">// 调试输出错误</span></span><br><span class="line">        <span class="keyword">return</span> NAN;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> finalResult = stack.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Final result:&quot;</span> &lt;&lt; finalResult; <span class="comment">// 调试输出最终结果</span></span><br><span class="line">    <span class="keyword">return</span> finalResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_equalButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString input = ui-&gt;mainlineEdit-&gt;<span class="built_in">text</span>();</span><br><span class="line">    QString postfix = <span class="built_in">infixToPostfix</span>(input);</span><br><span class="line">    <span class="type">double</span> result = <span class="built_in">calculate</span>(postfix);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isnan</span>(result)) &#123;</span><br><span class="line">        ui-&gt;mainlineEdit-&gt;<span class="built_in">setText</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ui-&gt;mainlineEdit-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><p>最后看一下效果吧！</p>
<iframe src="https://www.bilibili.com/video/BV1hn9tYrE95/?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=f9cc7a5150b1fcac8488d689a17439d6" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%"  height="580" quality="high" > </iframe>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/03/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>beginning</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2025/05/11/mother/</url>
    <content><![CDATA[<html>

<body>
    <center><img border="0" ,
            src="https://img.ixintu.com/upload/jpg/20210523/4aba4b0b07f1918545cc7d3b2414967d_168972_800_807.jpg!con" ,
            width="800" , height="800" , /></center>

    <p>
        <b>慈母手中线，游子身上衣</b>。妈妈，您的爱就像那根线，无论我走到哪里，都牵绊着我的心。在这个特别的日子里，祝您母亲节快乐，愿您的生活如诗如画，岁月静好。
    </p>
</body>

</html>]]></content>
  </entry>
  <entry>
    <title>typora&amp;markdown</title>
    <url>/2025/02/04/typora-markdown/</url>
    <content><![CDATA[<h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>​	Typora 是一款由Abner Lee开发的轻量级 Markdown 编辑器。Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML （或HTML）文档。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>​	下载地址：<a href="https://typora.io/releases/all%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%8D%B3%E5%8F%AF%E3%80%82">https://typora.io/releases/all，下载安装即可。</a></p>
<h4 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h4><p>​	打开Typora后，会显示空白的编辑页，左上角会显示7个菜单入口，简单认识下常用的功能。</p>
<p><img src="/img/101.png"></p>
<h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><h4 id="块"><a href="#块" class="headerlink" title="块"></a>块</h4><h5 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h5><p>​	标题在行的开头使用1-6个<code>#</code>字符，对应于标题级别1-6。在Typora中输入<code># 标题内容</code>即可创建标题。注意：<code>#</code>与标题内容之间有个空格。</p>
<p>快捷键：<code>Ctrl+1</code>、<code>Ctrl+2</code>、<code>Ctrl+3</code>、<code>Ctrl+4</code>、<code>Ctrl+5</code>、<code>Ctrl+6</code>；Ctrl+1-6 对应标题级别1-6。</p>
<h5 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h5><p>​	引用在行的开头使用<code>&gt;</code>字符进行块引用。在Typora中输入<code>&gt;引用内容</code>即可生成块引用。块引用中继续输入<code>&gt;引用内容</code>，可以内嵌块引用。</p>
<p>快捷键：<code>Ctrl+Shift+Q</code>。</p>
<h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><h6 id="有序"><a href="#有序" class="headerlink" title="有序"></a>有序</h6><p>​	有序列表在行的开头输入<code>数字. 列表内容</code>可以创建有序列表，再按回车即可自动生成<code>数字+1.</code>的有序列表，即<code>1. 列表内容</code>回车后生成<code>2. 列表内容</code>。注意：<code>.</code>与列表内容之间有个空格。</p>
<blockquote>
<p>快捷键：<code>Ctrl+Shift+[</code>。</p>
</blockquote>
<p>第一个列表</p>
<p>第二个列表</p>
<h6 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h6><p>​	无序列表在行的开头输入<code>- 列表内容</code>可以创建无序列表，再按回车即可自动生成下个无序列表。注意：<code>-</code>与列表内容之间有个空格。</p>
<blockquote>
<p>快捷键：<code>Ctrl+Shift+]</code>。</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 第一个列表</span><br><span class="line"><span class="bullet">-</span> 第二个列表</span><br></pre></td></tr></table></figure>

<h6 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h6><p>​	任务列表在行的开头输入<code>- [ ] 列表内容</code> 、<code>- [x] 列表内容</code>可以创建未完成与已完成的任务列表。注意：<code>- [ ]</code>与列表内容之间有个空格。</p>
<blockquote>
<p>快捷键：<code>Ctrl+Shift+X</code>。</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> [ ] 未完成</span><br><span class="line"><span class="bullet">-</span> [x] 已完成</span><br></pre></td></tr></table></figure>

<h6 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h6><p>​	代码块在行的开头输入&#96;&#96;&#96;语言标识符，再按回车即可生成对应语言的代码块，包含语法高亮功能。</p>
<p>快捷键：Ctrl+Shift+K+ 对应的代码格式（python、java、shell）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="数学的模块"><a href="#数学的模块" class="headerlink" title="数学的模块"></a>数学的模块</h6><p>​	数学公式块在行的开头输入$$ + 回车键，即可生成接受Tex&#x2F;Latex源代码输入的区域。LaTex格式的数学表达式学习请参考LaTex&#x2F;数学。</p>
<p>快捷键：Ctrl+Shift+M。</p>
<p>$$<br>\lim\limits_{x \to \infty} \exp(-x) &#x3D; 0<br>$$</p>
<h6 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h6><p>​	表格推荐直接使用快捷键<code>Ctrl+T</code>，可以自定义生成几行几列的表格，</p>
<blockquote>
<p>快捷键：<code>Ctrl+T</code>。</p>
</blockquote>
<table>
<thead>
<tr>
<th>\</th>
<th>1</th>
<th>2</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td></td>
<td></td>
</tr>
<tr>
<td>2</td>
<td></td>
<td></td>
</tr>
<tr>
<td>3</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h6 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h6><p>​	水平线在行的开头输入<code>---</code> + 回车键即可生成水平线。</p>
<hr>
<h6 id="内容目录"><a href="#内容目录" class="headerlink" title="内容目录"></a>内容目录</h6><p>​	目录在行的开头输入<code>[toc]</code>+回车，即可生成文章目录，自动更新。</p>
<blockquote>
<p>快捷键：<code>鼠标右键-&gt;插入-&gt;内容目录</code>。</p>
</blockquote>
<h6 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h6><p>​	Typora 支持, sequence, flowchart and mermaid, 使用前要先从偏好设置—&gt;Markdown—&gt;面板—&gt;Markdown扩展语法中，勾选图表选项来启用该功能。</p>
<h6 id="序列图"><a href="#序列图" class="headerlink" title="序列图"></a>序列图</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">jpdsg-&gt;&gt;spreng: Says Hello</span><br><span class="line">Note right of spreng: spreng thinks\nabout it</span><br><span class="line">spreng--&gt;&gt;jpdsg: How are you?</span><br><span class="line">jpdsg-&gt;&gt;spreng: I am good thanks!</span><br></pre></td></tr></table></figure>

<h5 id="Span-元素"><a href="#Span-元素" class="headerlink" title="Span 元素"></a>Span 元素</h5><h6 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h6><p>​	快捷键：<code>Ctrl+K</code>。</p>
<p><a href="https://njuptstudent.github.io/">nnn</a></p>
<h6 id="URL网址"><a href="#URL网址" class="headerlink" title="URL网址"></a>URL网址</h6><p>​	文章中输入<code>&lt;URL网址&gt;</code>即可生成支持跳转的链接。使用<code>Ctrl</code>+点击此链接的方式跳转。Typora也支持自动链接标准URL。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">&lt;https://www.baidu.com/&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">www.baidu.com</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h6 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h6><p>​	文章中输入<code>**文本**</code>即可给文本加粗。</p>
<h6 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h6><p>​	文章中输入<code>^文本^</code>即可给文本添加上标效果。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">X^2^</span><br></pre></td></tr></table></figure>

<h6 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h6><p>​	文章中输入<code>~文本~</code>即可给文本添加下标效果。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">H~2~O</span><br></pre></td></tr></table></figure>

<h5 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h5><h6 id="嵌入内容"><a href="#嵌入内容" class="headerlink" title="嵌入内容"></a>嵌入内容</h6><p>​	文章中输入&lt;#iframe #src&#x3D;”在线视频嵌入代码或链接” #width&#x3D;”视频宽度” #height&#x3D;”视频高度”&gt;</iframe>即可插入视频。也可以通过在视频页面点击 “分享”&gt;“嵌入” 获取嵌入代码，然后在 Typora 中插入。（删去#</p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>typora</tag>
      </tags>
  </entry>
  <entry>
    <title>前端那些事NO.1</title>
    <url>/2025/02/05/%E5%89%8D%E7%AB%AF%E9%82%A3%E4%BA%9B%E4%BA%8BNO-1/</url>
    <content><![CDATA[<h3 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h3><h5 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="字体加粗"><a href="#字体加粗" class="headerlink" title="字体加粗"></a>字体加粗</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><pre><code>ctrl /
</code></pre>
<h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span>src=&quot;&quot;alt=&quot;&quot;<span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="标签嵌套"><a href="#标签嵌套" class="headerlink" title="标签嵌套"></a>标签嵌套</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot; &quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="功能性标签"><a href="#功能性标签" class="headerlink" title="功能性标签"></a>功能性标签</h3><h5 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h5><ol>
<li>空格 &amp;nbsp</li>
<li>版权 &amp;copy</li>
<li>引号 &amp;quot</li>
</ol>
<h2 id="come-on"><a href="#come-on" class="headerlink" title="come on"></a>come on</h2>]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>valarray类</title>
    <url>/2025/04/12/valarray%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="valarray"><a href="#valarray" class="headerlink" title="valarray"></a>valarray</h1><p>valarray类是由头文件valarray支持的。顾名思义，这个类用于处理数值，它支持诸如将数组中所有元素的值向家已经在数组中找出最值等操作。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">typedef</span> valarray&lt;<span class="type">double</span>&gt; ArrayDb;</span><br><span class="line">	string name;</span><br><span class="line">	ArrayDb scores;</span><br><span class="line">	<span class="function">ostream&amp; <span class="title">arr_out</span><span class="params">(std::ostream&amp; os)</span><span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Student</span>():<span class="built_in">name</span>(<span class="string">&quot;Null Student&quot;</span>),<span class="built_in">scores</span>()&#123; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">explicit</span> <span class="title">Student</span><span class="params">(<span class="type">const</span> string &amp;s)</span>:name(s),scores()&#123;</span> &#125;</span><br><span class="line">	<span class="function"><span class="keyword">explicit</span> <span class="title">Student</span><span class="params">(<span class="type">int</span> n)</span>:name(<span class="string">&quot;Nully&quot;</span>),scores(n)&#123;</span> &#125;</span><br><span class="line">	<span class="built_in">Student</span>(<span class="type">const</span> string&amp;s,<span class="type">int</span> n):<span class="built_in">name</span>(s),<span class="built_in">scores</span>(n)&#123; &#125;</span><br><span class="line">	<span class="built_in">Student</span>(<span class="type">const</span> string&amp;s,<span class="type">const</span> ArrayDb&amp;a):<span class="built_in">name</span>(s),<span class="built_in">scores</span>(a)&#123; &#125;</span><br><span class="line">	<span class="built_in">Student</span>(<span class="type">const</span> <span class="type">char</span>*str,<span class="type">const</span> <span class="type">double</span>*pd,<span class="type">int</span> n):<span class="built_in">name</span>(str),<span class="built_in">scores</span>(pd,n)&#123;&#125;</span><br><span class="line">	~<span class="built_in">Student</span>()&#123; &#125;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">Average</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">const</span> string&amp; <span class="title">Name</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">	<span class="type">double</span>&amp; <span class="keyword">operator</span>[](<span class="type">int</span> i);</span><br><span class="line">	<span class="type">double</span> <span class="keyword">operator</span>[](<span class="type">int</span> i)<span class="type">const</span>;</span><br><span class="line">	<span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, Student&amp; stu);</span><br><span class="line">	<span class="function"><span class="keyword">friend</span> istream&amp; <span class="title">getline</span><span class="params">(istream&amp; is, Student&amp; stu)</span></span>;</span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, Student&amp; stu);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ostream&amp; <span class="title">Student::arr_out</span><span class="params">(std::ostream&amp; os)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="type">int</span> lim = scores.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">if</span> (lim &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; lim;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			os &lt;&lt; scores[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">			<span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">4</span>)</span><br><span class="line">				cout &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">5</span> != <span class="number">0</span>)</span><br><span class="line">			os &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		os &lt;&lt; <span class="string">&quot;empty array&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Student::Average</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (scores.<span class="built_in">size</span>() &gt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> scores.<span class="built_in">sum</span>() / scores.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> string&amp; <span class="title">Student::Name</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span>&amp; Student::<span class="keyword">operator</span>[](<span class="type">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> scores[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> Student::<span class="keyword">operator</span>[](<span class="type">int</span> i) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> scores[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, Student&amp; stu)</span><br><span class="line">&#123;</span><br><span class="line">	is &gt;&gt; stu.name;</span><br><span class="line">	<span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">istream&amp; <span class="title">getline</span><span class="params">(istream&amp; is, Student&amp; stu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">getline</span>(is, stu.name);</span><br><span class="line">	<span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, Student&amp; stu)</span><br><span class="line">&#123;</span><br><span class="line">	os &lt;&lt; <span class="string">&quot;Scores for&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="string">&quot;:\n&quot;</span>;</span><br><span class="line">	stu.<span class="built_in">arr_out</span>(os);</span><br><span class="line">	<span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(Student&amp; sa, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Please enter the student&#x27;s name:&quot;</span>;</span><br><span class="line">	<span class="built_in">getline</span>(cin, sa);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Please enter &quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot; quze scores:\n&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; sa[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (cin.<span class="built_in">get</span>() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">		<span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> pupils = <span class="number">3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> quzzes = <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(Student&amp; sa, <span class="type">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Student ada[pupils] = &#123; <span class="built_in">Student</span>(quzzes),<span class="built_in">Student</span>(quzzes),<span class="built_in">Student</span>(quzzes) &#125;;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; pupils;++i)</span><br><span class="line">		<span class="built_in">set</span>(ada[i], quzzes);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\nStudent List:\n&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; pupils;++i)</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\nResults:&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; pupils;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; endl &lt;&lt; ada[i];</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;average:&quot;</span> &lt;&lt; ada[i].<span class="built_in">Average</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Done&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Please enter the student&#x27;s name:Gil Bayts</span><br><span class="line">Please enter 5 quze scores:</span><br><span class="line">92 94 96 93 95</span><br><span class="line">Please enter the student&#x27;s name:Pat Roone</span><br><span class="line">Please enter 5 quze scores:</span><br><span class="line">83 89 72 78 95</span><br><span class="line">Please enter the student&#x27;s name:Fleur O&#x27;Day</span><br><span class="line">Please enter 5 quze scores:</span><br><span class="line">92 89 96 74 64</span><br><span class="line"></span><br><span class="line">Student List:</span><br><span class="line"></span><br><span class="line">Results:</span><br><span class="line">Results:</span><br><span class="line">Results:</span><br><span class="line">Scores forGil Bayts:</span><br><span class="line">92 94 96 93 95</span><br><span class="line">average:94</span><br><span class="line"></span><br><span class="line">Scores forPat Roone:</span><br><span class="line">83 89 72 78 95</span><br><span class="line">average:83.4</span><br><span class="line"></span><br><span class="line">Scores forFleur O&#x27;Day:</span><br><span class="line">92 89 96 74 64</span><br><span class="line">average:83</span><br><span class="line">Done</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>前端那些事NO.2</title>
    <url>/2025/02/06/%E5%89%8D%E7%AB%AF%E9%82%A3%E4%BA%9B%E4%BA%8BNO-2/</url>
    <content><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>掌握<strong>CSS</strong>的语法结构和在网页上的应用</li>
<li>掌握<strong>CSS</strong>的文本和字体样式</li>
<li>掌握<strong>CSS</strong>背景样式</li>
</ul>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>​	<strong>CSS</strong> (Cascading Style Sheets，层叠样式表），是一种用来为结构化文档（如 HTML 文档或 XML 应用）添加样式（字体、间距和颜色等）的计算机语言，<strong>CSS</strong> 文件扩展名为 <strong>.css</strong>。通过使用 <strong>CSS</strong> 我们可以大大提升网页开发的工作效率！<strong>CSS3</strong> 现在已被大部分现代浏览器支持，而下一版的 <strong>CSS4</strong> 仍在开发中。         </p>
<ul>
<li>样式定义<strong>如何显示</strong> HTML 元素</li>
<li>样式通常存储在<strong>样式表</strong>中</li>
<li>把样式添加到 HTML 4.0 中，是为了<strong>解决内容与表现分离的问题</strong></li>
<li><strong>外部样式表</strong>可以极大提高工作效率</li>
<li>外部样式表通常存储在 <strong>CSS 文件</strong>中</li>
<li>多个样式定义可<strong>层叠</strong>为一个</li>
</ul>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h4 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>will<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>:yellow;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span>   &#123;<span class="attribute">font-size</span>:<span class="number">36pt</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h2</span>   &#123;<span class="attribute">color</span>:blue;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span>    &#123;<span class="attribute">margin-left</span>:<span class="number">50px</span>;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这个标题设置的大小为 36 pt<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这个标题设置的颜色为蓝色：blue<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这个段落的左外边距为 50 像素：50px<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Will<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>:tan;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span>   &#123;<span class="attribute">color</span>:maroon;<span class="attribute">font-size</span>:<span class="number">20pt</span>;&#125;</span></span><br><span class="line"><span class="language-css">hr   &#123;<span class="attribute">color</span>:navy;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span>    &#123;<span class="attribute">font-size</span>:<span class="number">11pt</span>;<span class="attribute">margin-left</span>:<span class="number">150px</span>;&#125;//元素与相邻元素的距离</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>    &#123;<span class="attribute">color</span>:green;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>:yellow;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>   &#123;<span class="attribute">color</span>:black;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>  &#123;<span class="attribute">color</span>:blue;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你可以看到这个段落是</span><br><span class="line">被设定的 CSS 渲染的。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.bilibili.com/&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>这是一个链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>​	id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。HTML元素以id属性来设置id选择器,CSS 中 id 选择器以 “#” 来定义。</p>
<p>以下的样式规则应用于元素属性 id&#x3D;”para1”:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Will<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#para1</span></span></span><br><span class="line"><span class="language-css">&#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">text-align</span>:center;//居中</span></span><br><span class="line"><span class="language-css">	<span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125; </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;para1&quot;</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这个段落不受该样式的影响。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a>class选择器</h4><p>​	class 选择器用于描述一组元素的样式，class 选择器有别于id选择器，class可以在多个元素中使用。class 选择器在 HTML 中以 class 属性表示, 在 CSS 中，类选择器以一个点 <strong>.</strong> 号显示，在以下的例子中，所有拥有 center 类的 HTML 元素均为居中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Will<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.center</span></span></span><br><span class="line"><span class="language-css">&#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span>标题居中<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span>段落居中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>不居中！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端那些事NO.3</title>
    <url>/2025/02/06/%E5%89%8D%E7%AB%AF%E9%82%A3%E4%BA%9B%E4%BA%8BNO-3/</url>
    <content><![CDATA[<h2 id="创建CSS"><a href="#创建CSS" class="headerlink" title="创建CSS"></a>创建CSS</h2><p>​	当读到一个样式表时，浏览器会根据它来格式化 HTML 文档。</p>
<h4 id="如何插入样式表"><a href="#如何插入样式表" class="headerlink" title="如何插入样式表"></a>如何插入样式表</h4><p>插入样式表的方法有三种:</p>
<ul>
<li>外部样式表(External style sheet)</li>
<li>内部样式表(Internal style sheet)</li>
<li>内联样式(Inline style)</li>
</ul>
<h4 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h4><p>​	当样式需要应用于很多页面时，外部样式表将是理想的选择。在使用外部样式表的情况下，你可以通过改变一个文件来改变整个站点的外观。每个页面使用 <link> 标签链接到样式表。 <link> 标签在（文档的）头部：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​	浏览器会从文件 mystyle.css 中读到样式声明，并根据它来格式文档。</p>
<p>​	外部样式表可以在任何文本编辑器中进行编辑。文件不能包含任何的 html 标签。样式表应该以 .css 扩展名进行保存。下面是一个样式表文件的例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">hr &#123;<span class="attribute">color</span>:sienna;&#125; <span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>:<span class="number">20px</span>;&#125; <span class="selector-tag">body</span> &#123;<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&quot;/images/back40.gif&quot;</span>);&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><img src="https://www.runoob.com/images/lamp.gif" alt="Remark"> 不要在属性值与单位之间留有空格（如：”margin-left: 20 px” ），正确的写法是 “margin-left: 20px” 。</p>
</blockquote>
<h4 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h4><p>​	当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用 <style> 标签在文档头部定义内部样式表，就像这样:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"> hr &#123;<span class="attribute">color</span>:sienna;&#125; <span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>:<span class="number">20px</span>;&#125; <span class="selector-tag">body</span> &#123;<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&quot;images/back40.gif&quot;</span>);&#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h4><p>​	由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。请慎用这种方法，例如当样式仅需要在一个元素上应用一次时。要使用内联样式，你需要在相关的标签内使用样式（style）属性。Style 属性可以包含任何 CSS 属性。本例展示如何改变段落的颜色和左外边距：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:sienna;margin-left:20px&quot;</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="多重样式优先级"><a href="#多重样式优先级" class="headerlink" title="多重样式优先级"></a>多重样式优先级</h4><p>​	样式表允许以多种方式规定样式信息。样式可以规定在单个的 HTML 元素中，在 HTML 页的头元素中，或在一个外部的 CSS 文件中。甚至可以在同一个 HTML 文档内部引用多个外部样式表。</p>
<p>一般情况下，优先级如下：*（内联样式）Inline style &gt; （内部样式）Internal style sheet &gt;（外部样式）External style sheet &gt; 浏览器默认样式  *</p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端那些事之仿京东边框</title>
    <url>/2025/02/10/%E5%89%8D%E7%AB%AF%E9%82%A3%E4%BA%9B%E4%BA%8B%E4%B9%8B%E4%BB%BF%E4%BA%AC%E4%B8%9C%E8%BE%B9%E6%A1%86/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>京东边框<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置页面整体字体 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 定义无序列表样式，移除默认样式并设置宽度和边框 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">212px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 定义列表项样式，包括背景色、文字颜色、字体大小、居中对齐和鼠标悬停效果 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 去除列表项中h3元素的默认外边距 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span> <span class="selector-tag">h3</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 定义顶部列表项的特殊样式，包括高度、行高和背景颜色 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#top</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">45px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">45px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">220</span>, <span class="number">44</span>, <span class="number">44</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导航栏，包含一个无序列表用于商品分类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;top&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>全部商品分类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>家用电器<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>电脑办公<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>美妆个护<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>服饰鞋包<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>母婴玩具<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>图书音像<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>男装女装<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>内衣配饰<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>汽车用品<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/jdtu.png"></p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>前端那些事NO.4</title>
    <url>/2025/02/06/%E5%89%8D%E7%AB%AF%E9%82%A3%E4%BA%9B%E4%BA%8BNO-4/</url>
    <content><![CDATA[<h2 id="CSS-文本格式"><a href="#CSS-文本格式" class="headerlink" title="CSS 文本格式"></a>CSS 文本格式</h2><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><p>​	This text is styled with some of the text formatting properties. The heading uses the text-align, text-transform, and color properties. The paragraph is indented, aligned, and the space between characters is specified. The underline is removed from the <a href="https://www.runoob.com/try/try.php?filename=trycss_text">“尝试一下”</a> link.</p>
<hr>
<h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><p>颜色属性被用来设置文字的颜色。</p>
<p>颜色是通过<em>CSS</em>最经常的指定：</p>
<ul>
<li>十六进制值 - 如: <strong>＃FF0000</strong></li>
<li>一个<em>RGB</em>值 - 如: <strong>RGB(255,0,0)</strong></li>
<li>颜色的名称 - 如: <strong>red</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Will<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;<span class="attribute">color</span>:red;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>:<span class="number">#00ff00</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span><span class="selector-class">.ex</span> &#123;<span class="attribute">color</span>:<span class="built_in">rgb</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>);&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是标题 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个普通的段落。请注意,本文是红色的。页面中定义默认的文本颜色选择器。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;ex&quot;</span>&gt;</span>这是一个类为&quot;ex&quot;的段落。这个文本是蓝色的。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h4><p>​	文本排列属性是用来设置文本的水平对齐方式。文本可居中或对齐到左或右,两端对齐.当text-align设置为”justify”，每一行被展开为宽度相等，左，右外边距是对齐（如杂志和报纸）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Will<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span> &#123;<span class="attribute">text-align</span>:center;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span><span class="selector-class">.date</span> &#123;<span class="attribute">text-align</span><span class="selector-pseudo">:right</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span><span class="selector-class">.main</span> &#123;<span class="attribute">text-align</span>:justify;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>CSS text-align 实例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;date&quot;</span>&gt;</span>2015 年 3 月 14 号<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span>“当我年轻的时候，我梦想改变这个世界；当我成熟以后，我发现我不能够改变这个世界，我将目光缩短了些，决定只改变我的国家；当我进入暮年以后，我发现我不能够改变我们的国家，我的最后愿望仅仅是改变一下我的家庭，但是，这也不可能。当我现在躺在床上，行将就木时，我突然意识到：如果一开始我仅仅去改变我自己，然后，我可能改变我的家庭；在家人的帮助和鼓励下，我可能为国家做一些事情；然后，谁知道呢?我甚至可能改变这个世界。”<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>注意：<span class="tag">&lt;/<span class="name">b</span>&gt;</span> 重置浏览器窗口大小查看 <span class="symbol">&amp;quot;</span>justify<span class="symbol">&amp;quot;</span> 是如何工作的。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CSS text-align 实例</span><br><span class="line">2015 年 3 月 14 号</span><br><span class="line"></span><br><span class="line">“当我年轻的时候，我梦想改变这个世界；当我成熟以后，我发现我不能够改变这个世界，我将目光缩短了些，决定只改变我的国家；当我进入暮年以后，我发现我不能够改变我们的国家，我的最后愿望仅仅是改变一下我的家庭，但是，这也不可能。当我现在躺在床上，行将就木时，我突然意识到：如果一开始我仅仅去改变我自己，然后，我可能改变我的家庭；在家人的帮助和鼓励下，我可能为国家做一些事情；然后，谁知道呢?我甚至可能改变这个世界。”</span><br><span class="line"></span><br><span class="line">注意： 重置浏览器窗口大小查看 &quot;justify&quot; 是如何工作的。</span><br></pre></td></tr></table></figure>



<h4 id="修饰"><a href="#修饰" class="headerlink" title="修饰"></a>修饰</h4><p>​	text-decoration 属性用来设置或删除文本的装饰。从设计的角度看 text-decoration属性主要是用来删除链接的下划线：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Will<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">a</span> &#123;<span class="attribute">text-decoration</span>:none;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>链接到: <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.bilibili.com/&quot;</span>&gt;</span>runoob.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​	也可以这样装饰文字：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Will<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span> &#123;<span class="attribute">text-decoration</span>:overline;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h2</span> &#123;<span class="attribute">text-decoration</span>:line-through;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h3</span> &#123;<span class="attribute">text-decoration</span>:underline;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is heading 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is heading 2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>This is heading 3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># This is heading 1</span><br><span class="line"></span><br><span class="line">## This is heading 2</span><br><span class="line"></span><br><span class="line">### This is heading 3</span><br></pre></td></tr></table></figure>



<h4 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h4><p>​	文本转换属性是用来指定在一个文本中的大写和小写字母。可用于所有字句变成大写或小写字母，或每个单词的首字母大写。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>will<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span><span class="selector-class">.uppercase</span> &#123;<span class="attribute">text-transform</span>:uppercase;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span><span class="selector-class">.lowercase</span> &#123;<span class="attribute">text-transform</span>:lowercase;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span><span class="selector-class">.capitalize</span> &#123;<span class="attribute">text-transform</span>:capitalize;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;uppercase&quot;</span>&gt;</span>This is some text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;lowercase&quot;</span>&gt;</span>This is some text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;capitalize&quot;</span>&gt;</span>This is some text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">THIS IS SOME TEXT</span><br><span class="line">this is some text.</span><br><span class="line">This Is Some Text.</span><br></pre></td></tr></table></figure>

<h4 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h4><p>​	文本缩进属性是用来指定文本的第一行的缩进。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span> &#123;<span class="attribute">text-indent</span>:<span class="number">50px</span>;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>In my younger and more vulnerable years my father gave me some advice that I&#x27;ve been turning over in my mind ever since. &#x27;Whenever you feel like criticizing anyone,&#x27; he told me, &#x27;just remember that all the people in this world haven&#x27;t had the advantages that you&#x27;ve had.&#x27;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In my younger and more vulnerable years my father gave me some advice that I&#x27;ve been turning over in my mind ever since. &#x27;Whenever you feel like criticizing anyone,&#x27; he told me, &#x27;just remember that all the people in this world haven&#x27;t had the advantages that you&#x27;ve had.&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>又開學了</title>
    <url>/2025/02/16/%E5%8F%88%E9%96%8B%E5%AD%B8%E4%BA%86/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">看来，我不得不离开港城，离开我亲手栽种的花园，</span><br><span class="line">不得不离开列祖列宗陵墓之所在地，你们以为此时此刻，</span><br><span class="line">我必定悲伤万分吗，以为我有说不出的遗憾吗？</span><br><span class="line">不，我内心实不堪忍受的，是我此去..............</span><br></pre></td></tr></table></figure>

<p><img src="/img/188.jpg"></p>
]]></content>
      <categories>
        <category>beginning</category>
      </categories>
  </entry>
  <entry>
    <title>学生信息管理系统3rd</title>
    <url>/2025/03/15/%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F3rd/</url>
    <content><![CDATA[<p>​	我们知道，一个学校有本科生，研究生，老师等各类人员。通过继承性的学习，我们可以对此进行管理。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	string ID;</span><br><span class="line">	string name;</span><br><span class="line">	string sex;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(string = <span class="string">&quot;000&quot;</span>, string = <span class="string">&quot;&quot;</span>, string = <span class="string">&quot;男&quot;</span>);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Input</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">GetID</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">GetName</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">GetSex</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> :<span class="keyword">virtual</span> <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	string speciality;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Student</span>(string, string, string, string = <span class="string">&quot;&quot;</span>);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Input</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">GetSpeciality</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graduate</span> :<span class="keyword">virtual</span> <span class="keyword">public</span> Student</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	string researchTopic;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Graduate</span>(string = <span class="string">&quot;000&quot;</span>, string = <span class="string">&quot;&quot;</span>, string = <span class="string">&quot;男&quot;</span>, string = <span class="string">&quot;&quot;</span>, string = <span class="string">&quot;&quot;</span>);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Input</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">GetResearchTopic</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> :<span class="keyword">virtual</span> <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	string academicTitle;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Teacher</span>(string, string , string , string = <span class="string">&quot;&quot;</span>);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Input</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">GetAcademicTitle</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PostgraduateOnJob</span> :<span class="keyword">public</span> Graduate, <span class="keyword">public</span> Teacher</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">PostgraduateOnJob</span>(string = <span class="string">&quot;000&quot;</span>, string = <span class="string">&quot;&quot;</span>, string = <span class="string">&quot;男&quot;</span>, string = <span class="string">&quot;&quot;</span>, string = <span class="string">&quot;&quot;</span>, string = <span class="string">&quot;&quot;</span>);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Input</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Person.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Person::<span class="built_in">Person</span>(string id, string na, string se):<span class="built_in">ID</span>(id),<span class="built_in">name</span>(na),<span class="built_in">sex</span>(se)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Person::Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入信息\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;编 号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; ID;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;姓 名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;性 别 （男/女）：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">Person::GetID</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> ID;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">Person::GetName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">Person::GetSex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student::<span class="built_in">Student</span>(string id, string na, string se, string sepc):<span class="built_in">Person</span>(id,na,se),<span class="built_in">speciality</span>(sepc)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person::<span class="built_in">Input</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;专 业：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; speciality;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">Student::GetSpeciality</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> speciality;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Teacher::<span class="built_in">Teacher</span>(string id, string na, string se, string title):<span class="built_in">Person</span>(id,na,se),<span class="built_in">academicTitle</span>(title)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Teacher::Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person::<span class="built_in">Input</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;职 称：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; academicTitle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">Teacher::GetAcademicTitle</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> academicTitle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Graduate::<span class="built_in">Graduate</span>(string id, string na, string se, string sepc, string rese):<span class="built_in">Person</span>(id,na,se),<span class="built_in">Student</span>(id,na,se,sepc),<span class="built_in">researchTopic</span>(rese)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Graduate::Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Student::<span class="built_in">Input</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;研究课题：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; researchTopic;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">Graduate::GetResearchTopic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> researchTopic;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PostgraduateOnJob::<span class="built_in">PostgraduateOnJob</span>(string id, string na, string se, string sepc, string rese, string title):<span class="built_in">Person</span>(id,na,se),<span class="built_in">Student</span>(id,na,se,sepc),<span class="built_in">Graduate</span>(id,na,se,sepc,rese),<span class="built_in">Teacher</span>(id,na,se,title)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PostgraduateOnJob::Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Graduate::<span class="built_in">Input</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;职 称：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; academicTitle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Person.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> SUM = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Group</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	PostgraduateOnJob st[SUM];</span><br><span class="line">	<span class="type">int</span> sum;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Group</span>();</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Input</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">SortByID</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Output</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Group::<span class="built_in">Group</span>()</span><br><span class="line">&#123;</span><br><span class="line">	sum = SUM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Group::Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sum;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		st[i].<span class="built_in">Input</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Group::SortByID</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> index, i, k;</span><br><span class="line">	PostgraduateOnJob temp;</span><br><span class="line">	<span class="keyword">for</span> (k = <span class="number">0</span>;k &lt; sum - <span class="number">1</span>;k++)</span><br><span class="line">	&#123;</span><br><span class="line">		index = k;</span><br><span class="line">		<span class="keyword">for</span> (i = k + <span class="number">1</span>;i &lt; sum;i++)</span><br><span class="line">			<span class="keyword">if</span> (st[i].<span class="built_in">GetID</span>() &lt; st[index].<span class="built_in">GetID</span>())</span><br><span class="line">				index = i;</span><br><span class="line">		<span class="keyword">if</span> (index != k)</span><br><span class="line">		&#123;</span><br><span class="line">			temp = st[index];</span><br><span class="line">			st[index] = st[k];</span><br><span class="line">			st[k] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Group::Output</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;学生信息表&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;编号 姓名 性别 专 业 研究课题 职称&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; sum;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; st[i].<span class="built_in">GetID</span>() &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; st[i].<span class="built_in">GetName</span>() &lt;&lt; <span class="built_in">setw</span>(<span class="number">7</span>) &lt;&lt; st[i].<span class="built_in">GetSex</span>() &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; st[i].<span class="built_in">GetSpeciality</span>() &lt;&lt; <span class="built_in">setw</span>(<span class="number">11</span>) &lt;&lt; st[i].<span class="built_in">GetResearchTopic</span>() &lt;&lt; <span class="built_in">setw</span>(<span class="number">7</span>) &lt;&lt; st[i].<span class="built_in">GetAcademicTitle</span>() &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Group g1;</span><br><span class="line">	g<span class="number">1.</span><span class="built_in">Input</span>();</span><br><span class="line">	g<span class="number">1.</span><span class="built_in">SortByID</span>();</span><br><span class="line">	g<span class="number">1.</span><span class="built_in">Output</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>下面是测试结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请输入信息</span><br><span class="line">编 号：10003</span><br><span class="line">姓 名：李华</span><br><span class="line">性 别 （男/女）：男</span><br><span class="line">专 业：Coumputer_Science</span><br><span class="line">研究课题：区块链</span><br><span class="line">职 称：助理教授</span><br><span class="line">请输入信息</span><br><span class="line">编 号：10002</span><br><span class="line">姓 名：刘娟</span><br><span class="line">性 别 （男/女）：女</span><br><span class="line">专 业：应用数学</span><br><span class="line">研究课题：Matlab</span><br><span class="line">职 称：讲师</span><br><span class="line">请输入信息</span><br><span class="line">编 号：10001</span><br><span class="line">姓 名：Bob</span><br><span class="line">性 别 （男/女）：男</span><br><span class="line">专 业：English</span><br><span class="line">研究课题：20世纪欧美文学</span><br><span class="line">职 称：外籍教授</span><br><span class="line"></span><br><span class="line">学生信息表</span><br><span class="line">编号 姓名 性别 专 业 研究课题 职称</span><br><span class="line">10001     Bob     男 English20世纪欧美文学外籍教授</span><br><span class="line">10002    刘娟     女应用数学     Matlab   讲师</span><br><span class="line">10003    李华     男Coumputer_Science     区块链助理教授</span><br></pre></td></tr></table></figure>

<p>(…为了简明起见，本程序在设计上做了一些简化，如没有采用用户界面，还有待提高…)</p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>支票透支了怎么办</title>
    <url>/2025/03/15/%E6%94%AF%E7%A5%A8%E9%80%8F%E6%94%AF%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
    <content><![CDATA[<p>​	在一定的范围内，支票透支后“好心”的银行也会让你取出来，但之后吗……利息是少不了的</p>
<p>:(</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Brass类表示一个基本的银行账户</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Brass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string fullName; <span class="comment">// 客户姓名</span></span><br><span class="line">    <span class="type">long</span> acctNum;    <span class="comment">// 账户号码</span></span><br><span class="line">    <span class="type">double</span> balance;  <span class="comment">// 账户余额</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数，初始化客户姓名、账户号码和余额</span></span><br><span class="line">    <span class="built_in">Brass</span>(<span class="type">const</span> string&amp; s = <span class="string">&quot;Nullbody&quot;</span>, <span class="type">long</span> an = <span class="number">-1</span>, <span class="type">double</span> bal = <span class="number">0.0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 存款函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Deposit</span><span class="params">(<span class="type">double</span> amt)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 虚函数，取款函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Withdraw</span><span class="params">(<span class="type">double</span> amt)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回账户余额</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">Balance</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 虚函数，显示账户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">ViewAcct</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 虚析构函数</span></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Brass</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BrassPlus类继承自Brass类，表示一个具有透支功能的银行账户</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BrassPlus</span> :<span class="keyword">public</span> Brass</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> maxLoan;   <span class="comment">// 最大贷款额</span></span><br><span class="line">    <span class="type">double</span> rate;      <span class="comment">// 贷款利率</span></span><br><span class="line">    <span class="type">double</span> owesBank;  <span class="comment">// 欠银行的钱</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数，初始化客户姓名、账户号码、余额、最大贷款额和贷款利率</span></span><br><span class="line">    <span class="built_in">BrassPlus</span>(<span class="type">const</span> string&amp; s = <span class="string">&quot;Nullbody&quot;</span>, <span class="type">long</span> an = <span class="number">-1</span>, <span class="type">double</span> bal = <span class="number">0.0</span>, <span class="type">double</span> m1 = <span class="number">500</span>, <span class="type">double</span> r = <span class="number">0.011125</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造函数，使用Brass对象初始化，并设置最大贷款额和贷款利率</span></span><br><span class="line">    <span class="built_in">BrassPlus</span>(<span class="type">const</span> Brass&amp; ba, <span class="type">double</span> m1 = <span class="number">500</span>, <span class="type">double</span> r = <span class="number">0.11125</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 虚函数，显示账户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">ViewAcct</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 虚函数，取款函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Withdraw</span><span class="params">(<span class="type">double</span> amt)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重置最大贷款额</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ResertMax</span><span class="params">(<span class="type">double</span> m)</span> </span>&#123;</span><br><span class="line">        maxLoan = m;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重置贷款利率</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ResertRate</span><span class="params">(<span class="type">double</span> r)</span> </span>&#123;</span><br><span class="line">        rate = r;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重置欠银行的钱为0</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ResertOwes</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        owesBank = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Brass.h&quot;</span></span></span><br><span class="line"><span class="keyword">typedef</span> ios_base::fmtflags format;</span><br><span class="line"><span class="keyword">typedef</span> streamsize precis;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置格式</span></span><br><span class="line"><span class="function">format <span class="title">setFormat</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 恢复格式</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">restore</span><span class="params">(format f, precis p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BrassPlus 构造函数</span></span><br><span class="line">BrassPlus::<span class="built_in">BrassPlus</span>(<span class="type">const</span> string&amp; s, <span class="type">long</span> an, <span class="type">double</span> bal, <span class="type">double</span> m1, <span class="type">double</span> r)</span><br><span class="line">&#123;</span><br><span class="line">    maxLoan = m1;</span><br><span class="line">    owesBank = <span class="number">0.0</span>;</span><br><span class="line">    rate = r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BrassPlus 构造函数</span></span><br><span class="line">BrassPlus::<span class="built_in">BrassPlus</span>(<span class="type">const</span> Brass&amp; ba, <span class="type">double</span> m1, <span class="type">double</span> r)</span><br><span class="line">&#123;</span><br><span class="line">    maxLoan = m1;</span><br><span class="line">    owesBank = <span class="number">0.0</span>;</span><br><span class="line">    rate = r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看账户信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BrassPlus::ViewAcct</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    format initialstate = <span class="built_in">setFormat</span>();</span><br><span class="line">    precis prec = cout.<span class="built_in">precision</span>(<span class="number">2</span>);</span><br><span class="line">    Brass::<span class="built_in">ViewAcct</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Maxium load: $&quot;</span> &lt;&lt; maxLoan &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Owed to bank: $&quot;</span> &lt;&lt; owesBank &lt;&lt; endl;</span><br><span class="line">    cout.<span class="built_in">precision</span>(<span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Loan Rate: &quot;</span> &lt;&lt; <span class="number">100</span> * rate &lt;&lt; <span class="string">&quot;%\n&quot;</span>;</span><br><span class="line">    <span class="built_in">restore</span>(initialstate, prec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提现</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BrassPlus::Withdraw</span><span class="params">(<span class="type">double</span> amt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    format initialstate = <span class="built_in">setFormat</span>();</span><br><span class="line">    precis prec = cout.<span class="built_in">precision</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="type">double</span> bal = <span class="built_in">Balance</span>();</span><br><span class="line">    <span class="keyword">if</span> (amt &lt;= bal)</span><br><span class="line">        Brass::<span class="built_in">Withdraw</span>(amt);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (amt &lt;= bal + maxLoan - owesBank)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> advance = amt - bal;</span><br><span class="line">        owesBank += advance * (<span class="number">1.0</span> + rate);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Bank advance: $&quot;</span> &lt;&lt; advance &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Finance charge : $&quot;</span> &lt;&lt; advance * rate &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">Deposit</span>(advance);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Credit limit exceeded. Transaction cancelled.\n&quot;</span>;</span><br><span class="line">    <span class="built_in">restore</span>(initialstate, prec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Brass 构造函数</span></span><br><span class="line">Brass::<span class="built_in">Brass</span>(<span class="type">const</span> string&amp; s, <span class="type">long</span> an, <span class="type">double</span> bal)</span><br><span class="line">&#123;</span><br><span class="line">    fullName = s;</span><br><span class="line">    acctNum = an;</span><br><span class="line">    balance = bal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存款</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Brass::Deposit</span><span class="params">(<span class="type">double</span> amt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (amt &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Negative deposit not allowed; deposit is cancelled.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        balance += amt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提现</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Brass::Withdraw</span><span class="params">(<span class="type">double</span> amt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    format initialstate = <span class="built_in">setFormat</span>();</span><br><span class="line">    precis prec = cout.<span class="built_in">precision</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取余额</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Brass::Balance</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> balance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看账户信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Brass::ViewAcct</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    format initialstate = <span class="built_in">setFormat</span>();</span><br><span class="line">    precis prec = cout.<span class="built_in">precision</span>(<span class="number">2</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Client: &quot;</span> &lt;&lt; fullName &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Account Number: &quot;</span> &lt;&lt; acctNum &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Balance: $&quot;</span> &lt;&lt; balance &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">restore</span>(initialstate, prec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Brass 析构函数</span></span><br><span class="line">Brass::~<span class="built_in">Brass</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置格式</span></span><br><span class="line"><span class="function">format <span class="title">setFormat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cout.<span class="built_in">setf</span>(ios_base::fixed, ios_base::floatfield);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 恢复格式</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">restore</span><span class="params">(format f, precis p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout.<span class="built_in">setf</span>(f, ios_base::floatfield);</span><br><span class="line">    cout.<span class="built_in">precision</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Brass.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个Brass对象Piggy，账户名为&quot;porcelot pigg&quot;，账户号为381299，初始余额为4000.00</span></span><br><span class="line">    <span class="function">Brass <span class="title">Piggy</span><span class="params">(<span class="string">&quot;porcelot pigg&quot;</span>, <span class="number">381299</span>, <span class="number">4000.00</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建一个BrassPlus对象Hoggy，账户名为&quot;Horation Hogg&quot;，账户号为382288，初始余额为3000.00</span></span><br><span class="line">    <span class="function">BrassPlus <span class="title">Hoggy</span><span class="params">(<span class="string">&quot;Horation Hogg&quot;</span>, <span class="number">382288</span>, <span class="number">3000.00</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 显示Piggy账户信息</span></span><br><span class="line">    Piggy.<span class="built_in">ViewAcct</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 显示Hoggy账户信息</span></span><br><span class="line">    Hoggy.<span class="built_in">ViewAcct</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 向Hoggy账户存入1000美元</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Depositing $1000 into the hogg Account:\n&quot;</span>;</span><br><span class="line">    Hoggy.<span class="built_in">Deposit</span>(<span class="number">1000.00</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;New balance: $&quot;</span> &lt;&lt; Hoggy.<span class="built_in">Balance</span>() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从Piggy账户取出4200美元</span></span><br><span class="line">    Piggy.<span class="built_in">Withdraw</span>(<span class="number">4200.00</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Piggy account balance: $&quot;</span> &lt;&lt; Piggy.<span class="built_in">Balance</span>() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从Hoggy账户取出4200美元</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Withdrawing $4200 from the Hogg Account:\n&quot;</span>;</span><br><span class="line">    Hoggy.<span class="built_in">Withdraw</span>(<span class="number">4200.00</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 显示Hoggy账户信息</span></span><br><span class="line">    Hoggy.<span class="built_in">ViewAcct</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 暂停系统，等待用户输入</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>结果：</strong></em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Client:porcelot pigg</span><br><span class="line">Account Number:<span class="number">381299</span></span><br><span class="line">Balance: $<span class="number">4000.00</span></span><br><span class="line"></span><br><span class="line">Client:Nullbody</span><br><span class="line">Account Number:<span class="number">-1</span></span><br><span class="line">Balance: $<span class="number">0.00</span></span><br><span class="line">Maxium load: $<span class="number">500.00</span></span><br><span class="line">Owed to bank: $<span class="number">0.00</span></span><br><span class="line">Loan Rate: <span class="number">1.113</span>%</span><br><span class="line"></span><br><span class="line">Depositing $<span class="number">1000</span> into the hogg Account:</span><br><span class="line">Nem balance: $<span class="number">1000</span></span><br><span class="line">Pigg account balance:$<span class="number">4000.00</span></span><br><span class="line">Withdrawing $<span class="number">4200</span> from the Hogg Account:</span><br><span class="line">Credit limit exceeded.Transaction cancelled.</span><br><span class="line">Client:Nullbody</span><br><span class="line">Account Number:<span class="number">-1</span></span><br><span class="line">Balance: $<span class="number">1000.00</span></span><br><span class="line">Maxium load: $<span class="number">500.00</span></span><br><span class="line">Owed to bank: $<span class="number">0.00</span></span><br><span class="line">Loan Rate: <span class="number">1.113</span>%</span><br></pre></td></tr></table></figure>

<p>特别鸣谢Github Copilot生成的注释）</p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>李嘉诚228亿美元出售巴拿马港口!美资巨头即将接盘</title>
    <url>/2025/03/23/%E6%9D%8E%E5%98%89%E8%AF%9A228%E4%BA%BF%E7%BE%8E%E5%85%83%E5%87%BA%E5%94%AE%E5%B7%B4%E6%8B%BF%E9%A9%AC%E6%B8%AF%E5%8F%A3-%E7%BE%8E%E8%B5%84%E5%B7%A8%E5%A4%B4%E5%8D%B3%E5%B0%86%E6%8E%A5%E7%9B%98/</url>
    <content><![CDATA[<h1 id="李嘉诚228亿美元出售巴拿马港口！美资巨头即将接盘？"><a href="#李嘉诚228亿美元出售巴拿马港口！美资巨头即将接盘？" class="headerlink" title="李嘉诚228亿美元出售巴拿马港口！美资巨头即将接盘？"></a>李嘉诚228亿美元出售巴拿马港口！美资巨头即将接盘？</h1><p>近日，李嘉诚家族旗下的香港长江和记集团宣布，同意以228亿美元向一美国财团出售其大部分全球港口业务，包括最敏感的巴拿马运河两端。巴拿马运河是全球航运的重要枢纽，被称为“世界桥梁”。这场交易将产生怎样的政治影响？对中美两国的角力又意味着什么？一起来听今天的讲解。</p>
<h2 id="英文原文"><a href="#英文原文" class="headerlink" title="英文原文"></a>英文原文</h2><h3 id="Panama-Port-Deal-Plants-U-S-Flag-in-China-Dominated-Sector"><a href="#Panama-Port-Deal-Plants-U-S-Flag-in-China-Dominated-Sector" class="headerlink" title="Panama Port Deal Plants U.S. Flag in China-Dominated Sector"></a>Panama Port Deal Plants U.S. Flag in China-Dominated Sector</h3><p>巴拿马港口协议：美国入局中资主导领域</p>
<p>1.plant one’s flag</p>
<p>宣称所有权，占领（claim ownership）</p>
<p>拓展:</p>
<p>The company plants its flag in a new market. </p>
<p>该公司进军新市场，占领一席之地。</p>
<p>2.sector</p>
<p>英 [ˈsektə] 美 [ˈsektər]</p>
<p>n. 行业，领域</p>
<h3 id="An-investment-group-led-by-Wall-Street-fund-manager-BlackRock-this-week-struck-a-22-8-billion-agreement-to-buy-Hong-Kong-based-CK-Hutchison-Holdings’s-majority-ownership-of-43-port-operations-in-over-20-countries-most-notably-facilities-at-either-end-of-the-Panama-Canal"><a href="#An-investment-group-led-by-Wall-Street-fund-manager-BlackRock-this-week-struck-a-22-8-billion-agreement-to-buy-Hong-Kong-based-CK-Hutchison-Holdings’s-majority-ownership-of-43-port-operations-in-over-20-countries-most-notably-facilities-at-either-end-of-the-Panama-Canal" class="headerlink" title="An investment group led by Wall Street fund manager BlackRock this week struck a $22.8 billion agreement to buy Hong Kong-based CK Hutchison Holdings’s majority ownership of 43 port operations in over 20 countries, most notably facilities at either end of the Panama Canal."></a>An investment group led by Wall Street fund manager BlackRock this week struck a $22.8 billion agreement to buy Hong Kong-based CK Hutchison Holdings’s majority ownership of 43 port operations in over 20 countries, most notably facilities at either end of the Panama Canal.</h3><p>本周，由华尔街基金公司贝莱德（BlackRock）牵头的投资集团达成了一项价值228亿美元的协议，收购香港长江和记实业（CK Hutchison Holdings）分布在20多个国家的43个港口业务的多数股权，而其中最引人注目的是巴拿马运河两端的设施。</p>
<p>3.fund manager</p>
<p>（本文）基金公司、机构；基金经理</p>
<p>5.strike</p>
<p>英 [straɪk] 美 [straɪk]</p>
<p>v. 达成（协议）</p>
<p>拓展:</p>
<p>strike an agreement&#x2F;a deal 达成协议</p>
<p>6.majority ownership</p>
<p>多数股权（对一家公司超过50%的控制权&#x2F;控股权）</p>
<p>拓展:</p>
<p>minority ownership 少数股权</p>
<p>7.operation</p>
<p>英 [ˌɒprˈeɪʃn] 美 [ˌɑːpəˈreɪʃn]</p>
<p>n. 运营，经营</p>
<p>8.notably</p>
<p>英 [ˈnəʊtəbli] 美 [ˈnoʊtəbli]</p>
<p>adv. 引人注目地（particularly）</p>
<p>拓展:</p>
<p>She excels in many areas, notably in leadership.</p>
<p>她在多个领域表现出色，尤其是在领导力方面。</p>
<p>9.either</p>
<p>英 [ˈaɪðə ˈiːðə] 美 [ˈaɪðər ˈiːðər]</p>
<p>det. （两者中）每个</p>
<p>拓展:</p>
<p>Unfortunately I was sitting at the table with smokers on either side of me. </p>
<p>真倒霉，餐桌上坐在我两边的人都抽烟。</p>
<h3 id="That-aspect-of-the-deal-could-blunt-a-key-argument-by-President-Trump-that-China-is-in-control-of-the-Panama-Canal-a-questionable-proposition-from-the-start-but-evidence-of-his-intent-to-reorder-world-trade"><a href="#That-aspect-of-the-deal-could-blunt-a-key-argument-by-President-Trump-that-China-is-in-control-of-the-Panama-Canal-a-questionable-proposition-from-the-start-but-evidence-of-his-intent-to-reorder-world-trade" class="headerlink" title="That aspect of the deal could blunt a key argument by President Trump that China is in control of the Panama Canal, a questionable proposition from the start but evidence of his intent to reorder world trade."></a>That aspect of the deal could blunt a key argument by President Trump that China is in control of the Panama Canal, a questionable proposition from the start but evidence of his intent to reorder world trade.</h3><p>这项交易的该部分内容可能会削弱特朗普总统提出的一个重要论点，即中国控制了巴拿马运河。这一观点从一开始就值得商榷，但的确反映了特朗普重新调整全球贸易格局的意图。</p>
<p>10.blunt</p>
<p>英 [blʌnt] 美 [blʌnt]</p>
<p>v. （本文）削弱；变钝</p>
<p>拓展:</p>
<p>blunt the effects of the economic downturn 减弱经济衰退的影响</p>
<p>11.proposition</p>
<p>英 [ˌprɒpəˈzɪʃn] 美 [ˌprɑːpəˈzɪʃn]</p>
<p>n. 论点，言论（argument）</p>
<p>12.intent</p>
<p>英 [ɪnˈtent] 美 [ɪnˈtent]</p>
<p>n. 意图</p>
<p>拓展:</p>
<p>It wasn’t my intent to hurt anyone. </p>
<p>我本无意伤害任何人。</p>
<p>13.reorder</p>
<p>英 [ˌriːˈɔːdə] 美 [ˌriːˈɔːdər]</p>
<p>v. 重新排序，重新整理</p>
<h3 id="BlackRock’s-investment-represents-a-rare-multi-country-U-S-expansion-into-the-ports-sector—and-a-uniquely-American-one"><a href="#BlackRock’s-investment-represents-a-rare-multi-country-U-S-expansion-into-the-ports-sector—and-a-uniquely-American-one" class="headerlink" title="BlackRock’s investment represents a rare multi country U.S. expansion into the ports sector—and a uniquely American one."></a>BlackRock’s investment represents a rare multi country U.S. expansion into the ports sector—and a uniquely American one.</h3><p>贝莱德的投资代表着美国罕见地在多国港口领域进行扩张行动，而且是独具美国特色的扩张。</p>
<p>14.uniquely</p>
<p>英 [juːˈniːkli] 美 [juːˈniːkli]</p>
<p>adv. 独具某风格地</p>
<p>拓展:</p>
<p>She has a uniquely British sense of humor. </p>
<p>她有独特的英式幽默。</p>
<h3 id="Seaports-represent-the-most-globalized-dimension-of-China’s-expansive-construction-and-management-of-infrastructure-around-the-world-And-Beijing-claims-port-footholds-on-virtually-every-continent-through-its-government-owned-operators-Cosco-and-China-Merchants"><a href="#Seaports-represent-the-most-globalized-dimension-of-China’s-expansive-construction-and-management-of-infrastructure-around-the-world-And-Beijing-claims-port-footholds-on-virtually-every-continent-through-its-government-owned-operators-Cosco-and-China-Merchants" class="headerlink" title="Seaports represent the most globalized dimension of China’s expansive construction and management of infrastructure around the world. And Beijing claims port footholds on virtually every continent through its government-owned operators Cosco and China Merchants."></a>Seaports represent the most globalized dimension of China’s expansive construction and management of infrastructure around the world. And Beijing claims port footholds on virtually every continent through its government-owned operators Cosco and China Merchants.</h3><p>中国在全球范围内大规模建设和运营基础设施，海港是其中最具全球化特征的领域。通过国有企业中国远洋海运集团（Cosco）和招商局集团（China Merchants），中国几乎在各大洲都建立了港口。</p>
<p>15.dimension</p>
<p>英 [ˌdaɪˈmenʃn] 美 [ˌdɪˈmenʃn]</p>
<p>n. （事物的）维度、方面</p>
<p>16.claim</p>
<p>英 [kleɪm] 美 [kleɪm]</p>
<p>v. 认领所有权</p>
<p>拓展:</p>
<p>claim something 声称拥有某物 </p>
<p>Early settlers claimed the land as their own. </p>
<p>早期定居者宣称这片土地归他们所有。</p>
<p>17.foothold</p>
<p>英 [ˈfʊthəʊld] 美 [ˈfʊthoʊld]</p>
<p>n. 立足点</p>
<p>拓展:</p>
<p>gain a foothold in the Japanese market 在日本市场取得一席之地</p>
<p>18.virtually</p>
<p>英 [ˈvɜːtʃuəli] 美 [ˈvɜrːtʃuəli]</p>
<p>adv. 几乎（almost）</p>
<h3 id="Trump-hasn’t-made-clear-how-far-the-BlackRock-deal-goes-toward-allaying-his-concerns-Trump-this-week-signaled-awareness-that-the-U-S-has-fallen-behind-pledging-in-his-congressional-address-to-establish-a-White-House-office-to-promote-shipbuilding-in-the-U-S"><a href="#Trump-hasn’t-made-clear-how-far-the-BlackRock-deal-goes-toward-allaying-his-concerns-Trump-this-week-signaled-awareness-that-the-U-S-has-fallen-behind-pledging-in-his-congressional-address-to-establish-a-White-House-office-to-promote-shipbuilding-in-the-U-S" class="headerlink" title="Trump hasn’t made clear how far the BlackRock deal goes toward allaying his concerns. Trump this week signaled awareness that the U.S. has fallen behind, pledging in his congressional address to establish a White House office to promote shipbuilding in the U.S."></a>Trump hasn’t made clear how far the BlackRock deal goes toward allaying his concerns. Trump this week signaled awareness that the U.S. has fallen behind, pledging in his congressional address to establish a White House office to promote shipbuilding in the U.S.</h3><p>特朗普尚未明确表示贝莱德的交易在多大程度上缓解了他的担忧。本周，特朗普表示他意识到美国在这一领域已经落后，并在国会演讲中承诺要成立一个白宫办公室，以促进美国造船业的发展。</p>
<p>21.go toward something&#x2F;doing something</p>
<p>用于（某用途）</p>
<p>拓展:</p>
<p>All efforts are now going towards assessing the situation. </p>
<p>现在所有的精力都用于评估现状了。</p>
<p>22.allay</p>
<p>英 [əˈleɪ] 美 [əˈleɪ]</p>
<p>v. 减轻，缓解</p>
<p>拓展:</p>
<p>allay concern 缓解担忧</p>
<p>allay fears 缓解恐惧</p>
<p>23.signal</p>
<p>英 [ˈsɪɡnl] 美 [ˈsɪɡnl]</p>
<p>v. （本文）表示，表达（show, demonstrate）；发信号</p>
<p>拓展:</p>
<p>He signaled that he might run for office next year. </p>
<p>他表示明年可能会参选。</p>
<h3 id="Hutchison-denied-that-its-pullback-from-the-sector-came-in-response-to-“recent-political-news-reports-”-“Superman-knows-when-to-flip-a-property-in-this-case-definitely-well-in-the-money-”-said-Matthew-Flynn-a-Hong-Kong-based-family-office-adviser-referring-to-Li’s-nickname"><a href="#Hutchison-denied-that-its-pullback-from-the-sector-came-in-response-to-“recent-political-news-reports-”-“Superman-knows-when-to-flip-a-property-in-this-case-definitely-well-in-the-money-”-said-Matthew-Flynn-a-Hong-Kong-based-family-office-adviser-referring-to-Li’s-nickname" class="headerlink" title="Hutchison denied that its pullback from the sector came in response to “recent political news reports.” “Superman knows when to flip a property, in this case definitely well in the money,” said Matthew Flynn, a Hong Kong-based family-office adviser, referring to Li’s nickname."></a>Hutchison denied that its pullback from the sector came in response to “recent political news reports.” “Superman knows when to flip a property, in this case definitely well in the money,” said Matthew Flynn, a Hong Kong-based family-office adviser, referring to Li’s nickname.</h3><p>长和否认其从该领域的撤出是对“近期政治新闻报道”的回应。香港家族办公室顾问马修·弗林（Matthew Flynn）表示：“李超人知道什么时候该抛售资产，这次肯定是赚得盆满钵满。”该绰号指的是李嘉诚。</p>
<p>24.pullback</p>
<p>英 [ˈpʊlbæk] 美 [ˈpʊlbæk]</p>
<p>n. 撤退</p>
<p>25.flip a property</p>
<p>抛售资产（指低买高卖、快速倒卖房产的情形）</p>
<p>拓展:</p>
<p>flip v. 快速翻转</p>
<p>26.in the money</p>
<p>（本文）投资已赚钱、盈利；期权看涨</p>
<p>拓展:</p>
<p>out of the money 期权看跌</p>
]]></content>
      <categories>
        <category>News</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>程序猿的时间</title>
    <url>/2025/03/19/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<h3 id="Homework-low"><a href="#Homework-low" class="headerlink" title="Homework(low)"></a>Homework(low)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Time</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> Hour;</span><br><span class="line">    <span class="type">int</span> Minute;</span><br><span class="line">    <span class="type">int</span> Second;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Time</span>() :<span class="built_in">Hour</span>(<span class="number">0</span>), <span class="built_in">Minute</span>(<span class="number">0</span>), <span class="built_in">Second</span>(<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Time</span>(<span class="type">int</span> h, <span class="type">int</span> m, <span class="type">int</span> s);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">AddTime</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Reset</span><span class="params">(Time &amp;t)</span></span>;</span><br><span class="line">    <span class="function">Time <span class="title">sum</span><span class="params">(<span class="type">const</span> Time&amp; t)</span><span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Time.h&quot;</span></span></span><br><span class="line">Time::<span class="built_in">Time</span>(<span class="type">int</span> h, <span class="type">int</span> m, <span class="type">int</span> s)</span><br><span class="line">&#123;</span><br><span class="line">    Hour = h;</span><br><span class="line">    Minute = m;</span><br><span class="line">    Second = s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Time::Reset</span><span class="params">(Time&amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t.<span class="built_in">input</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Time::show</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; Hour &lt;&lt; <span class="string">&quot; hours,&quot;</span> &lt;&lt; Minute &lt;&lt; <span class="string">&quot; minutes, &quot;</span> &lt;&lt; Second &lt;&lt; <span class="string">&quot; second&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Time::input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;小时：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; Hour;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;分钟：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; Minute;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;秒钟：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; Second;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Time::AddTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> h, m, s;</span><br><span class="line">    cin &gt;&gt; h;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    Second += s;</span><br><span class="line">    Minute += s / <span class="number">60</span>;</span><br><span class="line">    Second %= <span class="number">60</span>;</span><br><span class="line">    Minute += m;</span><br><span class="line">    Hour += Minute / <span class="number">60</span>;</span><br><span class="line">    Minute %= <span class="number">60</span>;</span><br><span class="line">    Hour += h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Time <span class="title">Time::sum</span><span class="params">(<span class="type">const</span> Time&amp; t)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Time sum; </span><br><span class="line">    sum.Second = Second + t.Second;</span><br><span class="line">    sum.Minute = Minute + t.Minute + sum.Second / <span class="number">60</span>;</span><br><span class="line">    sum.Hour = Hour + t.Hour + sum.Minute / <span class="number">60</span>;</span><br><span class="line">    sum.Minute %= <span class="number">60</span>;</span><br><span class="line">    sum.Second %= <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Time.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">chose</span><span class="params">(<span class="type">char</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a == <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> a,b;</span><br><span class="line">	Time coding;</span><br><span class="line">	Time fixing;</span><br><span class="line">	Time total;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入编码时间：\n&quot;</span>;</span><br><span class="line">	coding.<span class="built_in">input</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;coding  time=&quot;</span>;</span><br><span class="line">	coding.<span class="built_in">show</span>();</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;是否需要重新设定时间(Y/N)\n&quot;</span>;</span><br><span class="line">	cin &gt;&gt; a;</span><br><span class="line">	<span class="keyword">if</span> (a)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;输入重新设定的编码时间：\n&quot;</span>;</span><br><span class="line">		coding.<span class="built_in">Reset</span>(coding);</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;After reseting coding time=&quot;</span>;</span><br><span class="line">		coding.<span class="built_in">show</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		coding.<span class="built_in">show</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入DEBUG时间：\n&quot;</span>;</span><br><span class="line">	fixing.<span class="built_in">input</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;fixing time=&quot;</span>;</span><br><span class="line">	fixing.<span class="built_in">show</span>();</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;是否需要增加设定时间(Y/N)\n&quot;</span>;</span><br><span class="line">	cin &gt;&gt; b;</span><br><span class="line">	<span class="keyword">if</span> (b)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;请输入增加的DEBUG时间（h/m/s)：\n&quot;</span>;</span><br><span class="line">		fixing.<span class="built_in">AddTime</span>();</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;After adding fixing time=&quot;</span>;</span><br><span class="line">		fixing.<span class="built_in">show</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		fixing.<span class="built_in">show</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	total = coding.<span class="built_in">sum</span>(fixing);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;sum=&quot;</span>;</span><br><span class="line">	total.<span class="built_in">show</span>();</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">输入编码时间：</span><br><span class="line">小时：3</span><br><span class="line">分钟：23</span><br><span class="line">秒钟：34</span><br><span class="line">coding  time=3 hours,23 minutes, 34 second</span><br><span class="line"></span><br><span class="line">是否需要重新设定时间(Y/N)</span><br><span class="line">Y</span><br><span class="line">输入重新设定的编码时间：</span><br><span class="line">小时：2</span><br><span class="line">分钟：44</span><br><span class="line">秒钟：8</span><br><span class="line">After reseting coding time=2 hours,44 minutes, 8 second</span><br><span class="line"></span><br><span class="line">输入DEBUG时间：</span><br><span class="line">小时：3</span><br><span class="line">分钟：23</span><br><span class="line">秒钟：33</span><br><span class="line">fixing time=3 hours,23 minutes, 33 second</span><br><span class="line"></span><br><span class="line">是否需要增加设定时间(Y/N)</span><br><span class="line">Y</span><br><span class="line">请输入增加的DEBUG时间（h/m/s)：</span><br><span class="line">1 22 35</span><br><span class="line">After adding fixing time=4 hours,45 minutes, 8 second</span><br><span class="line"></span><br><span class="line">sum=7 hours,29 minutes, 16 second</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>每日积累</title>
    <url>/2025/03/17/%E6%AF%8F%E6%97%A5%E5%90%8D%E8%A8%80/</url>
    <content><![CDATA[<p>只要我还能感受到内心那把既黯淡又炽热的火，那就是我，活着的我——<br>我感谢生命让我得以燃烧。<br>&#x2F;《加缪手记》2025-3-17</p>
<p>我常想若是有人让我住在一根枯树干里，天天无事可做，只能仰望那一小块天空的变化，最后我也会慢慢习惯。人到最后什么事都会习以为常。<br>&#x2F;加缪《局外人》2025-3-18</p>
<p>有人把生命局促于互窥互监、互猜互损，有人把生命释放于大地长天、远山沧海。<br>&#x2F;余秋雨《行者无疆》2025-3-19</p>
<p>十月是银白的流云，轻盈的秋。天空清亮，事物明朗，我们踏入轻快的日子。<br>十月快乐☁️——</p>
<p>黎明召唤着<br>祈祷的海水、鸣叫的海鸥和白嘴鸦<br>千舸帆影一声声拍打渔网密布的岸墙<br>催促我启程<br>&#x2F;狄兰·托马斯《十月献诗》2025-3-20</p>
<p>尤其当十月的风<br>以霜冻的手指惩罚我的发丝<br>被蟹行的太阳捉住，我踏火而行<br>&#x2F;狄兰·托马斯《尤其当十月的风》2025-3-21</p>
<p>你并不孤独，<br>诗歌说，<br>在黑暗的隧道里。<br>&#x2F;露易丝·格丽克《十月》 2025-3-22</p>
<p>沿十月之水，你和她行走于一根断弦<br>你从那天起就开始揣测这个意义<br>十月之水边，初秋第一次听到落叶<br>&#x2F;张枣《十月之水》2025-3-23</p>
<p>十月小阳春<br>胜友良朋的天气<br>秋色乾尊色、鼎盛色<br>曲肱而枕的醉颜酡色<br>&#x2F;木心《单衣》2025-3-24</p>
<p>十月从干净的部分开始<br>景色与你们相似<br>&#x2F;石光华《十月》2025-3-25</p>
<p>银白色，十月似坚果，早霜如锡，闪闪发光。<br>&#x2F;鲍里斯·帕斯捷尔纳克《冬天临近了》 2025-3-26</p>
<p>十月的清空多游云，海上多白浪。<br>&#x2F;郑愁予《编秋草》 2025-3-27</p>
<p>落日熔金，十月之水逐渐隐进你的肢体<br>此刻，在对岸，一定有人梦见了你<br>&#x2F;张枣 2025-3-28</p>
]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>sayings</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之函数调用规则</title>
    <url>/2025/02/07/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<p>默认情况下，C++编译器至少给一个类添加3个函数</p>
<ol>
<li>默认构造函数（无参，函数体为空）</li>
<li>默认析构函数（无参，函数体为空）</li>
<li>默认拷贝构造函数；对属性进行拷贝</li>
</ol>
<p>构造函数调用规则如下</p>
<ul>
<li>如果用户定义有参构造函数c++不在提供默认无参构造函数，但是会提供默认拷贝构造</li>
<li>如果用户定义默认拷贝函数，c++不会在通过其他构造函数</li>
</ul>
<p>举个栗子</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Person</span>() &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;默认构造函数。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Person</span>(<span class="type">int</span> a)</span><br><span class="line">	&#123;</span><br><span class="line">		age = a;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;有参构造函数。\n&quot;</span>;</span><br><span class="line">		cout &lt;&lt;<span class="string">&quot;年龄:&quot;</span>&lt;&lt; age&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//Person(const Person&amp; p)</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; &quot;拷贝构造函数。\n&quot;;</span></span><br><span class="line">	<span class="comment">//	age = p.age;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line">	~<span class="built_in">Person</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;析构函数。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person p;</span><br><span class="line">	p = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">默认构造函数。</span><br><span class="line">有参构造函数。</span><br><span class="line">年龄:10</span><br><span class="line">析构函数。</span><br><span class="line">析构函数。</span><br></pre></td></tr></table></figure>

















]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之const修饰成员函数</title>
    <url>/2025/02/10/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8Bconst%E4%BF%AE%E9%A5%B0%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="常函数"><a href="#常函数" class="headerlink" title="常函数"></a>常函数</h3><ul>
<li><p>成员函数加const后我们称这个函数为常函数</p>
</li>
<li><p>常函数内不可修改成员属性</p>
</li>
<li><p>成员属性声明时加关键字mutable后，在常函数中依然可以修改</p>
</li>
<li><p>类型	函数名（形式参数表）	const</p>
</li>
</ul>
<h3 id="常对象"><a href="#常对象" class="headerlink" title="常对象"></a>常对象</h3><ul>
<li><p>声明对象前加const称该对象为常对象</p>
</li>
<li><p>常对象只能调用常函数</p>
</li>
<li><p>const	类型名  常数据成员名</p>
</li>
</ul>
<h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> A_age;</span><br><span class="line">	<span class="keyword">mutable</span> <span class="type">int</span> B_age;<span class="comment">//特殊变量mutable,即使在常函数中也能修改</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">showperson</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//this-&gt;A_age = 20;无法修改</span></span><br><span class="line">		<span class="comment">//this-&gt;B_age = 30;可以</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; B_age&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person p;</span><br><span class="line">	p.B_age = <span class="number">80</span>;</span><br><span class="line">	p.<span class="built_in">showperson</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//常对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">const</span> Person p;</span><br><span class="line">	<span class="comment">//p.A_age=20会报错</span></span><br><span class="line">	p.B_age = <span class="number">30</span>;<span class="comment">//在常对象下也可以修改</span></span><br><span class="line">	<span class="comment">//常对象只能调用常函数</span></span><br><span class="line">	p.<span class="built_in">showperson</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">年龄：80</span><br><span class="line">年龄：30</span><br></pre></td></tr></table></figure>



<h3 id="课本实例"><a href="#课本实例" class="headerlink" title="课本实例"></a>课本实例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Croster</span></span><br><span class="line">&#123;</span><br><span class="line">	string name;</span><br><span class="line">	<span class="type">int</span> Math;</span><br><span class="line">	<span class="type">const</span> <span class="type">double</span> Score;<span class="comment">//定义学分常数据成员</span></span><br><span class="line">	<span class="type">double</span> GPA;<span class="comment">//绩点</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Croster</span>(string na = <span class="string">&quot;undef&quot;</span>, <span class="type">int</span> m = <span class="number">100</span>, <span class="type">double</span> s = <span class="number">3</span>);</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">GetGPA</span><span class="params">()</span> <span class="type">const</span></span>;<span class="comment">//常数据成员函数返回绩点</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l4_07.h&quot;</span></span></span><br><span class="line">Croster::<span class="built_in">Croster</span>(string na, <span class="type">int</span> m, <span class="type">double</span> s) :<span class="built_in">name</span>(na), <span class="built_in">Math</span>(m), <span class="built_in">Score</span>(s)</span><br><span class="line">&#123;</span><br><span class="line">	GPA = Math / <span class="number">100.0</span> * Score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Croster::GetGPA</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> GPA;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Croster::Display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;This is void Display().\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; name &lt;&lt; <span class="string">&quot;get &quot;</span> &lt;&lt; Math &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Your GPA is &quot;</span> &lt;&lt; <span class="built_in">GetGPA</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Croster::Display</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;This is void Display() const.\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; name &lt;&lt; <span class="string">&quot;get &quot;</span> &lt;&lt; Math &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Your GPA is &quot;</span> &lt;&lt; <span class="built_in">GetGPA</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l4_07.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">const</span> Croster <span class="title">stu_A</span><span class="params">(<span class="string">&quot;赵衍&quot;</span>, <span class="number">92</span>, <span class="number">3</span>)</span></span>;<span class="comment">//定义常对象</span></span><br><span class="line">	<span class="function">Croster <span class="title">stu_B</span><span class="params">(<span class="string">&quot;孙立&quot;</span>,<span class="number">98</span>,<span class="number">3</span>)</span></span>;</span><br><span class="line">	stu_A.<span class="built_in">Display</span>();</span><br><span class="line">	stu_B.<span class="built_in">Display</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is void Display() const.</span><br><span class="line">赵衍get 92</span><br><span class="line">Your GPA is 2.76</span><br><span class="line">This is void Display().</span><br><span class="line">孙立get 98</span><br><span class="line">Your GPA is 2.94</span><br></pre></td></tr></table></figure>

<p>​	该程序中的Display()函数有重载的版本,一个是常成员函数,另一个是普通成员函数,函数首部的最后是否有const加以区分。从运行结果可知，同样是调用Display()函数，常对象的调用的一定是常成员函数void Display() const，而普通对象在调用时遵循这样的原则：如果有普通成员函数的重载版本，则首先调用普通成员函数；否则，自动调用常成员函数，因为普通对象也是可以调用常函数的。</p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之初始化列表</title>
    <url>/2025/02/08/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<p>​	在此前的代码中，我们在构造函数体中使用赋值语句初始化对象的数据成员，还可以用另一种方式——<strong>初始化列表</strong></p>
<p>格式：构造函数（）：属性1（值1）属性2（值2）…{}</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CDate</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> Date_Year, Date_Month, Date_Day;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">CDate</span>(<span class="type">int</span> y = <span class="number">2000</span>, <span class="type">int</span> m = <span class="number">1</span>, <span class="type">int</span> d = <span class="number">1</span>);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l3_08.h&quot;</span></span></span><br><span class="line"><span class="comment">//传统初始化</span></span><br><span class="line"><span class="comment">//CDate::CDate(int y, int m, int d)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	cout &lt;&lt; &quot;Excuting constructor...\n&quot;;</span></span><br><span class="line"><span class="comment">//	Date_Day = d;</span></span><br><span class="line"><span class="comment">//	Date_Month = m;</span></span><br><span class="line"><span class="comment">//	Date_Year = y;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//初始化列表</span></span><br><span class="line">CDate::<span class="built_in">CDate</span>(<span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d):<span class="built_in">Date_Year</span>(y),<span class="built_in">Date_Month</span>(m),<span class="built_in">Date_Day</span>(d)</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Excuting constructor...\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CDate::Display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; Date_Year &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; Date_Month &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; Date_Day &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l3_08.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 定义一个CDate对象initiateday，使用默认构造函数初始化</span></span><br><span class="line">	CDate initiateday;</span><br><span class="line">	<span class="comment">// 定义一个CDate对象newday，使用带年份参数的构造函数初始化</span></span><br><span class="line">	<span class="function">CDate <span class="title">newday</span><span class="params">(<span class="number">2019</span>)</span></span>;</span><br><span class="line">	<span class="comment">// 定义一个CDate对象today，使用带年、月、日参数的构造函数初始化</span></span><br><span class="line">	<span class="function">CDate <span class="title">today</span><span class="params">(<span class="number">2019</span>, <span class="number">3</span>, <span class="number">9</span>)</span></span>;</span><br><span class="line">	<span class="comment">// 输出initiateday的日期信息</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Inintiateday is:&quot;</span>;</span><br><span class="line">	initiateday.<span class="built_in">Display</span>();</span><br><span class="line">	<span class="comment">// 输出newday的日期信息</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Newday is:&quot;</span>;</span><br><span class="line">	newday.<span class="built_in">Display</span>();</span><br><span class="line">	<span class="comment">// 输出today的日期信息</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Today is:&quot;</span>;</span><br><span class="line">	today.<span class="built_in">Display</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之review</title>
    <url>/2025/02/13/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8Breview/</url>
    <content><![CDATA[<p>​	面向对象编程(OOP)是一种特殊的，设计程序的概念性方法，C++通过一些特性改进了C语言，使得应用这种方法更容易。下面是最重要的OOP特性：</p>
<ul>
<li>抽象</li>
<li>封装和数据隐藏</li>
<li>多态</li>
<li>继承</li>
<li>代码的可重用性</li>
</ul>
<h2 id="抽象和类"><a href="#抽象和类" class="headerlink" title="抽象和类"></a>抽象和类</h2><p>​	生活中充满复杂性，处理复杂性的方法之一是简化和抽象。人的身体是由无数个原子组成的，而一些学者认为人的思想是由半自主的主体组成的。但将人自己看作一个实体将简单的多。在计算中，为了根据信息与用户之间的接口来表示它，抽象是最重要的。抽象是通往用户的定义类型的捷径，在C++中，用户定义类型指的是实现抽象类接口的类设计。</p>
<p>​	类是一种将抽象转换为用户定义类型的C++工具，它将数据表示和操纵数据的方法组合成一个简洁的包。下面来看一个表示股票的类。可以对其进行简化。</p>
<p><strong>可执行的操作</strong>：</p>
<ul>
<li>获得股票</li>
<li>增持</li>
<li>减持</li>
<li>更新股票价格</li>
<li>显示关于股票信息</li>
</ul>
<p><strong>需存储的信息</strong>：</p>
<ul>
<li>公司名称</li>
<li>持股数量</li>
<li>股价</li>
<li>股值</li>
</ul>
<p><strong>定义类</strong>：</p>
<ol>
<li>类声明：以数据成员的方式描述数据部分，以成员函数的方式描述公有接口</li>
<li>类方法定义：描述如何实现类成员函数。</li>
</ol>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">stock</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string company;</span><br><span class="line">	<span class="type">long</span> shares;</span><br><span class="line">	<span class="type">double</span> share_val;</span><br><span class="line">	<span class="type">double</span> total_val;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">set_tot</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		total_val = shares * share_val;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">acquire</span><span class="params">(<span class="type">const</span> string&amp; co, <span class="type">long</span> n, <span class="type">double</span> pr)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">buy</span><span class="params">(<span class="type">long</span> num, <span class="type">double</span> price)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">sell</span><span class="params">(<span class="type">long</span> num, <span class="type">double</span> price)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">double</span> price)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stock.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stock::acquire</span><span class="params">(<span class="type">const</span> string&amp; co, <span class="type">long</span> n, <span class="type">double</span> pr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	company = co;</span><br><span class="line">	<span class="keyword">if</span> (n &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Numbers of shares can&#x27;t be negative!&quot;</span> &lt;&lt; company &lt;&lt; <span class="string">&quot; shares set to 0.\n&quot;</span>;</span><br><span class="line">		shares = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		shares = n;</span><br><span class="line">	&#125;</span><br><span class="line">	share_val = pr;</span><br><span class="line">	<span class="built_in">set_tot</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stock::buy</span><span class="params">(<span class="type">long</span> num, <span class="type">double</span> price)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (num &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Number of shares purchased can&#x27;t be nagative. &quot;</span> &lt;&lt; <span class="string">&quot;Transation is absorbed.\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		shares += num;</span><br><span class="line">		share_val = price;</span><br><span class="line">		<span class="built_in">set_tot</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stock::sell</span><span class="params">(<span class="type">long</span> num, <span class="type">double</span> price)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (num &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;You can&#x27;t sell more than you have!&quot;</span> &lt;&lt; <span class="string">&quot;Transaction is adsorbed.\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (num &gt; shares)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;You can&#x27;t sell morer than you have!&quot;</span> &lt;&lt; <span class="string">&quot;Transaction is absorbed.\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		shares -= num;</span><br><span class="line">		share_val = price;</span><br><span class="line">		<span class="built_in">set_tot</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stock::update</span><span class="params">(<span class="type">double</span> price)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	share_val = price;</span><br><span class="line">	<span class="built_in">set_tot</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stock::show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Company name: &quot;</span> &lt;&lt; company &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Number of shares: &quot;</span> &lt;&lt; shares &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Share price: &quot;</span> &lt;&lt; share_val &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Total value: &quot;</span> &lt;&lt; total_val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stock.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stock fluffy_the_cat;</span><br><span class="line">	fluffy_the_cat.<span class="built_in">acquire</span>(<span class="string">&quot;NanoSmart&quot;</span>, <span class="number">20</span>, <span class="number">12.50</span>);</span><br><span class="line">	fluffy_the_cat.<span class="built_in">show</span>();</span><br><span class="line">	fluffy_the_cat.<span class="built_in">buy</span>(<span class="number">15</span>, <span class="number">18.125</span>);</span><br><span class="line">	fluffy_the_cat.<span class="built_in">show</span>();</span><br><span class="line">	fluffy_the_cat.<span class="built_in">sell</span>(<span class="number">5</span>, <span class="number">19.50</span>);</span><br><span class="line">	fluffy_the_cat.<span class="built_in">show</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Company name: NanoSmart</span><br><span class="line">Number of shares: 20</span><br><span class="line">Share price: 12.5</span><br><span class="line">Total value: 250</span><br><span class="line">Company name: NanoSmart</span><br><span class="line">Number of shares: 35</span><br><span class="line">Share price: 18.125</span><br><span class="line">Total value: 634.375</span><br><span class="line">Company name: NanoSmart</span><br><span class="line">Number of shares: 30</span><br><span class="line">Share price: 19.5</span><br><span class="line">Total value: 585</span><br></pre></td></tr></table></figure>

<h2 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h2><p>​	stock类非常具体。然而，程序员常常通过定义类来表示更通用的概念。例如，就实现计算机专家们所说的抽象数据类型(abstract data type,ADT)而言，使用类是一种非常好的方式。顾名思义，ADT以通用的方式描述数据类型，而没有引入语言或实现细节。例如，通过栈，可以以这样的方式存储数据，即总是从栈添加或删除数据。例如，C++程序通过栈来管理自动变量。当新的自动变量被生成后，它们被添加到栈顶；消亡时，从栈删除它们。</p>
<p>​	下面简要地介绍一下栈的特征：</p>
<ul>
<li>可创建空栈</li>
<li>可将数据项添加到栈顶(压入)</li>
<li>看从栈顶删除数据项(弹出)</li>
<li>可查看栈是否填满</li>
<li>可查看栈是否为空</li>
</ul>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> Item;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">stack</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">enum</span> &#123; MAX = <span class="number">10</span> &#125;; <span class="comment">// 定义栈的最大容量</span></span><br><span class="line">	Item items[MAX]; <span class="comment">// 存储栈元素的数组</span></span><br><span class="line">	<span class="type">int</span> top; <span class="comment">// 栈顶指针</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">stack</span>(); <span class="comment">// 构造函数，初始化栈</span></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">isenputy</span><span class="params">()</span></span>; <span class="comment">// 判断栈是否为空</span></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">isfull</span><span class="params">()</span></span>; <span class="comment">// 判断栈是否已满</span></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(<span class="type">const</span> Item&amp; item)</span></span>; <span class="comment">// 入栈操作</span></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(Item&amp; item)</span></span>; <span class="comment">// 出栈操作</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">stack::<span class="built_in">stack</span>()</span><br><span class="line">&#123;</span><br><span class="line">	top = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">stack::isenputy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> top==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">stack::isfull</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> top==MAX;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">stack::push</span><span class="params">(<span class="type">const</span> Item&amp; item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (top&lt;MAX)</span><br><span class="line">	&#123;</span><br><span class="line">		items[top++] = item;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">stack::pop</span><span class="params">(Item&amp; item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (top &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		item = items[--top];</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stack.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="comment">// 主函数，程序入口</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stack st;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> po;</span><br><span class="line">	<span class="comment">// 提示用户输入操作选项</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Please enter A to add apurchase order,\n&quot;</span> &lt;&lt; <span class="string">&quot;P to process a PO.or Q to quit.\n&quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; ch &amp;&amp; <span class="built_in">toupper</span>(ch) != <span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (cin.<span class="built_in">get</span>() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="comment">// 检查输入是否为字母</span></span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">isalpha</span>(ch))</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&#x27;\a&#x27;</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">switch</span> (ch)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="comment">// 添加采购订单</span></span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:cout &lt;&lt; <span class="string">&quot;Enter a PO number to add:&quot;</span>;</span><br><span class="line">			cin &gt;&gt; po;</span><br><span class="line">			<span class="keyword">if</span> (st.<span class="built_in">isfull</span>())</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;stack already full\n&quot;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				st.<span class="built_in">push</span>(po);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="comment">// 处理采购订单</span></span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;P&#x27;</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;p&#x27;</span>:</span><br><span class="line">			<span class="keyword">if</span> (st.<span class="built_in">isenputy</span>())</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;stack already empty\n&quot;</span>;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				st.<span class="built_in">pop</span>(po);</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;PO #&quot;</span> &lt;&lt; po &lt;&lt; <span class="string">&quot; popped\n&quot;</span>;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 重复提示用户输入操作选项</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Please enter A to add a purchase order,\n&quot;</span> &lt;&lt; <span class="string">&quot;P to process a PO ,or Q to quit.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 程序结束提示</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Bye.\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Please enter A to add apurchase order,</span><br><span class="line">P to process a PO.or Q to quit.</span><br><span class="line">A</span><br><span class="line">Enter a PO number to add:17885</span><br><span class="line">Please enter A to add a purchase order,</span><br><span class="line">P to process a PO ,or Q to quit.</span><br><span class="line">P</span><br><span class="line">PO #17885 popped</span><br><span class="line">Please enter A to add a purchase order,</span><br><span class="line">P to process a PO ,or Q to quit.</span><br><span class="line">A</span><br><span class="line">Enter a PO number to add:17965</span><br><span class="line">Please enter A to add a purchase order,</span><br><span class="line">P to process a PO ,or Q to quit.</span><br><span class="line">A</span><br><span class="line">Enter a PO number to add:18002</span><br><span class="line">Please enter A to add a purchase order,</span><br><span class="line">P to process a PO ,or Q to quit.</span><br><span class="line">P</span><br><span class="line">PO #18002 popped</span><br><span class="line">Please enter A to add a purchase order,</span><br><span class="line">P to process a PO ,or Q to quit.</span><br><span class="line">P</span><br><span class="line">PO #17965 popped</span><br><span class="line">Please enter A to add a purchase order,</span><br><span class="line">P to process a PO ,or Q to quit.</span><br><span class="line">P</span><br><span class="line">stack already empty</span><br><span class="line">Please enter A to add a purchase order,</span><br><span class="line">P to process a PO ,or Q to quit.</span><br><span class="line">Q</span><br><span class="line">Bye.</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​	面向对象编程强调的是程序如何表示数据。使用OPP方法解决编程问题的第一步是根据他与程序之间的接口来描述数据，从而指定如何使用数据。然后，设计一个类来实现该接口。一般来说私有数据成员存储信息，公有成员函数(方法)提供访问数据的唯一途径。类将数据和方法组合成一个单元，其私有性实现数据隐藏。</p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之友元</title>
    <url>/2025/02/10/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%8F%8B%E5%85%83/</url>
    <content><![CDATA[<p>​	在程序里，有些所有属性也想让类外特殊的一些函数进行访问，就需要用到友元技术。友元的目的就是让一个函数或类访问另一个类中私有成员。友元的关键字就是friend.</p>
<p>友元的三种实现：</p>
<ul>
<li>全局变量做友元</li>
<li>类做友元</li>
<li>成员函数做友元</li>
</ul>
<h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><p>全局变量做友元：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">goodgay</span><span class="params">(Building* b)</span></span>;</span><br><span class="line">	string bedroom;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Building</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		livingroom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">		bedroom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	string livingroom;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">goodgay</span><span class="params">(Building* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;好基友正在访问......&quot;</span> &lt;&lt; b-&gt;livingroom &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//如果直接改成卧室会报错</span></span><br><span class="line">	<span class="comment">//但如果把此全局函数复制到类的首部并加上friend则可以访问卧室</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;好基友正在访问......&quot;</span> &lt;&lt; b-&gt;bedroom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Building b;</span><br><span class="line">	<span class="built_in">goodgay</span>(&amp;b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">好基友正在访问......客厅</span><br><span class="line">好基友正在访问......卧室</span><br></pre></td></tr></table></figure>

<p>类做友元：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Goodgay</span>;</span><br><span class="line">	string bedroom;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Building</span>();</span><br><span class="line"></span><br><span class="line">	string livingroom;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Goodgay</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Building* b;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="built_in">Goodgay</span>();</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Building::<span class="built_in">Building</span>()</span><br><span class="line">&#123;</span><br><span class="line">	livingroom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">	bedroom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Goodgay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;好基友正在访问......&quot;</span> &lt;&lt; b-&gt;livingroom &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;好基友正在访问......&quot;</span> &lt;&lt; b-&gt;bedroom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Goodgay::<span class="built_in">Goodgay</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//创建新对象</span></span><br><span class="line">	b = <span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Goodgay gg;</span><br><span class="line">	gg.<span class="built_in">visit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">好基友正在访问......客厅</span><br><span class="line">好基友正在访问......卧室</span><br></pre></td></tr></table></figure>

<p>成员函数做友元：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Goodgay::visit</span><span class="params">()</span></span>; <span class="comment">// 友元声明</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string bedroom;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Building</span>();</span><br><span class="line"></span><br><span class="line">    string livingroom;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Goodgay</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Building* b;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="built_in">Goodgay</span>();</span><br><span class="line">    ~<span class="built_in">Goodgay</span>(); <span class="comment">// 析构函数，用来释放动态分配的内存</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Building::<span class="built_in">Building</span>()</span><br><span class="line">&#123;</span><br><span class="line">    livingroom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">    bedroom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Goodgay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;好基友正在访问......&quot;</span> &lt;&lt; b-&gt;livingroom &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;好基友正在访问......&quot;</span> &lt;&lt; b-&gt;bedroom &lt;&lt; endl; <span class="comment">// 正确访问私有成员</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Goodgay::<span class="built_in">Goodgay</span>()</span><br><span class="line">&#123;</span><br><span class="line">    b = <span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Goodgay::~<span class="built_in">Goodgay</span>() <span class="comment">// 析构函数，用来释放动态分配的内存</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> b;</span><br><span class="line">    b = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Goodgay gg;</span><br><span class="line">    gg.<span class="built_in">visit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">好基友正在访问......客厅</span><br><span class="line">好基友正在访问......卧室</span><br></pre></td></tr></table></figure>

<h3 id="课本实例"><a href="#课本实例" class="headerlink" title="课本实例"></a>课本实例</h3><h5 id="友元函数："><a href="#友元函数：" class="headerlink" title="友元函数："></a>友元函数：</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Croster</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">bool</span> <span class="title">Equal</span><span class="params">(Croster&amp;, Croster&amp;)</span></span>;</span><br><span class="line">	string name;</span><br><span class="line">	<span class="type">int</span> Math;</span><br><span class="line">	<span class="type">const</span> <span class="type">double</span> Score;<span class="comment">//定义学分常数据成员</span></span><br><span class="line">	<span class="type">double</span> GPA;<span class="comment">//绩点</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Croster</span>(string na = <span class="string">&quot;undef&quot;</span>, <span class="type">int</span> m = <span class="number">100</span>, <span class="type">double</span> s = <span class="number">3</span>);</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">GetGPA</span><span class="params">()</span> <span class="type">const</span></span>;<span class="comment">//常数据成员函数返回绩点</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l4_08.h&quot;</span></span></span><br><span class="line">Croster::<span class="built_in">Croster</span>(string na, <span class="type">int</span> m, <span class="type">double</span> s) :<span class="built_in">name</span>(na), <span class="built_in">Math</span>(m), <span class="built_in">Score</span>(s)</span><br><span class="line">&#123;</span><br><span class="line">	GPA = Math / <span class="number">100.0</span> * Score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Croster::GetGPA</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> GPA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Equal</span><span class="params">(Croster &amp;A, Croster &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (A.GPA==B.GPA)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l4_08.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Croster <span class="title">stuA</span><span class="params">(<span class="string">&quot;李梅&quot;</span>, <span class="number">96</span>, <span class="number">3</span>)</span>, <span class="title">stuB</span><span class="params">(<span class="string">&quot;孙立&quot;</span>, <span class="number">98</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">Equal</span>(stuA, stuB))</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;GPA is same\n&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;GPA is different\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="其他的大同小异，就不赘述了…………"><a href="#其他的大同小异，就不赘述了…………" class="headerlink" title="其他的大同小异，就不赘述了………….."></a>其他的大同小异，就不赘述了…………..</h5>]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之学生信息管理系统NO.2</title>
    <url>/2025/02/11/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9FNO-2/</url>
    <content><![CDATA[<p>​	经过一个单元的学习，学生信息管理系统迎来了优化！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student2</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">subject</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> score[<span class="number">3</span>];</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> SMath, SEng, SCpp;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">subject</span>();</span><br><span class="line">	<span class="built_in">subject</span>(<span class="type">int</span> math, <span class="type">int</span> eng, <span class="type">int</span> cpp);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Input</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Delete</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">student2</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;subject.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student2</span></span><br><span class="line">&#123;</span><br><span class="line">	string name;</span><br><span class="line">	string ID;</span><br><span class="line">	<span class="type">double</span> GPA;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> count;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">student2</span>();</span><br><span class="line">	<span class="built_in">student2</span>(string na, string id);</span><br><span class="line">	<span class="function">string <span class="title">GetName</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ReckonGPA</span><span class="params">(<span class="type">const</span> subject&amp; sub)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">GetGPA</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">(<span class="type">const</span> subject&amp; sub)</span> <span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Input</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Delete</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">GetCount</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">OutputStu</span><span class="params">(<span class="type">const</span> student2* array)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;subject.h&quot;</span></span></span><br><span class="line">subject::<span class="built_in">subject</span>():<span class="built_in">SMath</span>(<span class="number">0</span>), <span class="built_in">SEng</span>(<span class="number">0</span>), <span class="built_in">SCpp</span>(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">		score[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subject::<span class="built_in">subject</span>(<span class="type">int</span> math, <span class="type">int</span> eng, <span class="type">int</span> cpp):<span class="built_in">SMath</span>(<span class="number">0</span>), <span class="built_in">SEng</span>(<span class="number">0</span>), <span class="built_in">SCpp</span>(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">	score[<span class="number">0</span>]=math;</span><br><span class="line">	score[<span class="number">1</span>]=eng;</span><br><span class="line">	score[<span class="number">2</span>]=cpp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">subject::Display</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;Math &quot;</span>&lt;&lt;<span class="string">&quot; SEng &quot;</span>&lt;&lt;<span class="string">&quot;SCpp &quot;</span>&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;SMath&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;SEng&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;SCpp&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;score[i];</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">subject::Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;输入成绩：&quot;</span>&lt;&lt;endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入 数学：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; score[<span class="number">0</span>];</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入 英语：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; score[<span class="number">1</span>];</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入 C++：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; score[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">subject::Insert</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(score[<span class="number">0</span>]&lt;<span class="number">0</span>)</span><br><span class="line">		<span class="built_in">Input</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">subject::Delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">		score[i]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;student2.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">student2::Delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GPA=<span class="number">-1</span>;</span><br><span class="line">    count--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> student2::count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">student2::GetCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2::<span class="built_in">student2</span>()</span><br><span class="line">&#123;</span><br><span class="line">    name = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">    ID = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">    GPA = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2::<span class="built_in">student2</span>(string na, string id)</span><br><span class="line">&#123;</span><br><span class="line">    name = na;</span><br><span class="line">    ID = id;</span><br><span class="line">    GPA = <span class="number">-1</span>;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">student2::GetName</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">student2::ReckonGPA</span><span class="params">(<span class="type">const</span> subject&amp; sub)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GPA = ((sub.score[<span class="number">0</span>] - <span class="number">60</span>) / <span class="number">40.0</span> * sub.SMath * sub.SMath + (sub.score[<span class="number">0</span>]<span class="number">-60</span>)/<span class="number">40.0</span>*sub.SEng*sub.SEng + (sub.score[<span class="number">0</span>]<span class="number">-60</span>)/<span class="number">40.0</span>*sub.SCpp*sub.SCpp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">student2::GetGPA</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GPA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">student2::Display</span><span class="params">(<span class="type">const</span> subject&amp; sub)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Name: &quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ID: &quot;</span> &lt;&lt; ID &lt;&lt; endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot; Math &quot;</span>&lt;&lt;<span class="string">&quot; SEng &quot;</span>&lt;&lt;<span class="string">&quot; SCpp &quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">        cout&lt;&lt;sub.score[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;GPA: &quot;</span> &lt;&lt; GPA &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">student2::Display</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Name: &quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ID: &quot;</span> &lt;&lt; ID &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">student2::Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter name: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; name;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter ID: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; ID;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">student2::Insert</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(GPA&lt;<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">Input</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OutputStu</span><span class="params">(<span class="type">const</span> student2* array)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;学生总人数=&quot;</span>&lt;&lt;student2::<span class="built_in">GetCount</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; student2::<span class="built_in">GetCount</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i].<span class="built_in">GetGPA</span>() != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;name: &quot;</span>&lt;&lt;array[i].name&lt;&lt;<span class="string">&quot;, ID: &quot;</span>&lt;&lt;array[i].ID&lt;&lt;<span class="string">&quot;, GPA: &quot;</span>&lt;&lt;array[i].GPA&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;student2.h&quot;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">menu</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">InputStu</span><span class="params">(student2* array)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InputSel</span><span class="params">(subject* Select, <span class="type">int</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SearchStu</span><span class="params">(<span class="type">const</span> student2* array, string na)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">InsertStu</span><span class="params">(student2* array)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeleteStu</span><span class="params">(student2* array,subject* Select, string na)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	student2 array[N];</span><br><span class="line">	subject Select[N];</span><br><span class="line">	<span class="type">int</span> choice, i;</span><br><span class="line">	string name;</span><br><span class="line">	<span class="type">char</span> ch = <span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">menu</span>();</span><br><span class="line">		cin &gt;&gt; choice;</span><br><span class="line">		<span class="keyword">switch</span> (choice)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			<span class="keyword">while</span> (ch == <span class="string">&#x27;Y&#x27;</span> || ch == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				i = <span class="built_in">InputStu</span>(array);</span><br><span class="line">				<span class="built_in">InputSel</span>(Select, i);</span><br><span class="line">				array[i].<span class="built_in">ReckonGPA</span>(Select[i]);</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;Do you want to add more students? (Y/N): &quot;</span>;</span><br><span class="line">				cin &gt;&gt; ch;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Enter the name of the student to search:\n &quot;</span>;</span><br><span class="line">			cin &gt;&gt; name;</span><br><span class="line">			<span class="type">int</span> i;</span><br><span class="line">			i = <span class="built_in">SearchStu</span>(array, name);</span><br><span class="line">			<span class="keyword">if</span> (i == N)</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;Student not found.&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				array[i].<span class="built_in">Display</span>(Select[i]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			<span class="built_in">OutputStu</span>(array);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			i = <span class="built_in">InsertStu</span>(array);</span><br><span class="line">			<span class="keyword">if</span> (i)</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;成功插入一条记录\n&quot;</span>;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;录入成绩吗？(Y/N):&quot;</span>;</span><br><span class="line">				cin &gt;&gt; ch;</span><br><span class="line">				<span class="keyword">if</span> (ch == <span class="string">&#x27;Y&#x27;</span> || ch == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					Select[i].<span class="built_in">Input</span>();</span><br><span class="line">					array[i].<span class="built_in">ReckonGPA</span>(Select[i]);</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;已达到最大容量，无法插入。\n&quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Enter the name of the student to delete:\n &quot;</span>;</span><br><span class="line">			cin &gt;&gt; name;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">DeleteStu</span>(array, Select, name))</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;删除成功。\n&quot;</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;删除失败。\n&quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Invalid choice.\n&quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">while</span> (choice);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*********1.录入信息*********\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*********2.查询信息*********\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*********3.浏览信息*********\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*********4.插入信息*********\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*********5.删除信息*********\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*********0.退    出*********\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">InputStu</span><span class="params">(student2* array)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (student2::<span class="built_in">GetCount</span>() ==N)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;已达到最大容量，无法插入。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (array[i].<span class="built_in">GetGPA</span>() &gt; <span class="number">0</span>)</span><br><span class="line">			i++;</span><br><span class="line">		array[i].<span class="built_in">Input</span>();</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;录入成功。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InputSel</span><span class="params">(subject* Select, <span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Select[i].<span class="built_in">Input</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SearchStu</span><span class="params">(<span class="type">const</span> student2* array, string na)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i,j=N;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (array[i].<span class="built_in">GetGPA</span>() != <span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (array[i].<span class="built_in">GetName</span>() == na)</span><br><span class="line">			&#123;</span><br><span class="line">				j = i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> j;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">InsertStu</span><span class="params">(student2* array)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (student2::<span class="built_in">GetCount</span>() == N)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;已达到最大容量，无法插入。\n&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (array[i].<span class="built_in">GetGPA</span>() &gt; <span class="number">0</span>)</span><br><span class="line">		i++;</span><br><span class="line">	array[i].<span class="built_in">Input</span>();</span><br><span class="line">	<span class="keyword">return</span> i;</span><br><span class="line">		</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeleteStu</span><span class="params">(student2* array, subject* Select, string na)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (student2::<span class="built_in">GetCount</span>() == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;学生信息为空，无法删除。\n&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> i = <span class="built_in">SearchStu</span>(array, na);</span><br><span class="line">	<span class="keyword">if</span> (i == N)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;学生不存在。\n&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	array[i].<span class="built_in">Delete</span>();</span><br><span class="line">	Select[i].<span class="built_in">Delete</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*********1.录入信息*********</span><br><span class="line">*********2.查询信息*********</span><br><span class="line">*********3.浏览信息*********</span><br><span class="line">*********4.插入信息*********</span><br><span class="line">*********5.删除信息*********</span><br><span class="line">*********0.退    出*********</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之学生信息管理系统NO.1</title>
    <url>/2025/02/07/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9FNO-1/</url>
    <content><![CDATA[<p>最近准备陆续把之前敲过的代码放进来，顺序就……..(:</p>
<p>​	在对类的定义和使用有了初步认识之后，可以尝试面向对象的风格设计一个简单的学生信息管理系统（：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string name;</span><br><span class="line">	string ID;</span><br><span class="line">	string number;</span><br><span class="line">	string speciality;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">student</span>();</span><br><span class="line">	<span class="built_in">student</span>(string na, string id, string num, string spec, <span class="type">int</span> ag);</span><br><span class="line">	<span class="built_in">student</span>(<span class="type">const</span> student&amp; per);</span><br><span class="line">	<span class="function">string <span class="title">GetName</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">GetID</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">GetNumber</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">GetSpec</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">GetAge</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Input</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;student.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">student::<span class="built_in">student</span>()</span><br><span class="line">&#123;</span><br><span class="line">	name = <span class="string">&quot; &quot;</span>;</span><br><span class="line">	age = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student::<span class="built_in">student</span>(string na, string id, string num, string spec, <span class="type">int</span> ag):<span class="built_in">name</span>(na),<span class="built_in">ID</span>(id),<span class="built_in">number</span>(num),<span class="built_in">speciality</span>(spec),<span class="built_in">age</span>(age)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student::<span class="built_in">student</span>(<span class="type">const</span> student&amp; per)</span><br><span class="line">&#123;</span><br><span class="line">	name = per.name;</span><br><span class="line">	ID = per.ID;</span><br><span class="line">	number = per.number;</span><br><span class="line">	speciality = per.speciality;</span><br><span class="line">	age = per.age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">student::GetName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">student::GetID</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ID;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">student::GetNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">string</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">student::GetSpec</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> speciality;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">student::GetAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">student::Display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;姓 名：&quot;</span>;</span><br><span class="line">	cout &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;身份证：&quot;</span> &lt;&lt; ID &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;学 号：&quot;</span> &lt;&lt; number &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;专 业：&quot;</span> &lt;&lt; speciality &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;年 龄：&quot;</span> &lt;&lt; age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">student::Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入姓 名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入身份证号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; ID;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入年 龄：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; age;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入专 业：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; speciality;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入学 号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;student.h&quot;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">menu</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OutputStu</span><span class="params">(student* array)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InputStu</span><span class="params">(student* array)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SearchStu</span><span class="params">(student* array, string na)</span></span>;</span><br><span class="line"><span class="type">int</span> coo = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	student array[N];</span><br><span class="line">	<span class="type">int</span> choice;</span><br><span class="line">	string na;</span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		<span class="built_in">menu</span>();</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Please input your choice:&quot;</span>;</span><br><span class="line">		cin &gt;&gt; choice;</span><br><span class="line">		<span class="keyword">switch</span> (choice)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:<span class="built_in">InputStu</span>(array);<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:cout &lt;&lt; <span class="string">&quot;Input the name searched:&quot;</span> &lt;&lt; endl;</span><br><span class="line">			cin &gt;&gt; na;</span><br><span class="line">			<span class="type">int</span> i;</span><br><span class="line">			i = <span class="built_in">SearchStu</span>(array, na);</span><br><span class="line">			<span class="keyword">if</span> (i == N)</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;查无此人！\n&quot;</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				array[i].<span class="built_in">Display</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">OutputStu</span>(array);<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>:cout &lt;&lt; <span class="string">&quot;Thanks,see you...&quot;</span> &lt;&lt; endl;<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:cout &lt;&lt; <span class="string">&quot;Input error!&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">while</span> (choice);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*********1.录入信息*********\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*********2.查询信息*********\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*********3.浏览信息*********\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*********0.退    出*********\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OutputStu</span><span class="params">(student* array)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;学生总人数=&quot;</span> &lt;&lt; coo &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; coo;i++)</span><br><span class="line">		array[i].<span class="built_in">Display</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InputStu</span><span class="params">(student* array)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		array[coo].<span class="built_in">Input</span>();</span><br><span class="line">		coo++;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;继续输入吗？（Y or N)\n&quot;</span>;</span><br><span class="line">		cin &gt;&gt; ch;</span><br><span class="line">	&#125; <span class="keyword">while</span> ((ch == <span class="string">&#x27;Y&#x27;</span>) || (ch == <span class="string">&#x27;y&#x27;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SearchStu</span><span class="params">(student* array, string na)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i, j = N;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; coo;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (array[i].<span class="built_in">GetName</span>() == na)</span><br><span class="line">			j = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*********1.录入信息*********</span><br><span class="line">*********2.查询信息*********</span><br><span class="line">*********3.浏览信息*********</span><br><span class="line">*********0.退    出*********</span><br><span class="line">Please input your choice:1</span><br><span class="line">输入姓 名：zhangcheng</span><br><span class="line">输入身份证号：320106200101011819</span><br><span class="line">输入年 龄：18</span><br><span class="line">输入专 业：computer</span><br><span class="line">输入学 号：19070302</span><br><span class="line">继续输入吗？（Y or N)</span><br><span class="line">Y</span><br><span class="line">输入姓 名：wangcheng</span><br><span class="line">输入身份证号：320101200201014011</span><br><span class="line">输入年 龄：17</span><br><span class="line">输入专 业：accounting</span><br><span class="line">输入学 号：19070320</span><br><span class="line">继续输入吗？（Y or N)</span><br><span class="line">N</span><br><span class="line">*********1.录入信息*********</span><br><span class="line">*********2.查询信息*********</span><br><span class="line">*********3.浏览信息*********</span><br><span class="line">*********0.退    出*********</span><br><span class="line">Please input your choice:2</span><br><span class="line">Input the name searched:</span><br><span class="line">zhangcheng</span><br><span class="line">姓 名：zhangcheng</span><br><span class="line">身份证：320106200101011819</span><br><span class="line">学 号：19070302</span><br><span class="line">专 业：computer</span><br><span class="line">年 龄：18</span><br><span class="line">*********1.录入信息*********</span><br><span class="line">*********2.查询信息*********</span><br><span class="line">*********3.浏览信息*********</span><br><span class="line">*********0.退    出*********</span><br><span class="line">Please input your choice:3</span><br><span class="line">学生总人数=2</span><br><span class="line">姓 名：zhangcheng</span><br><span class="line">身份证：320106200101011819</span><br><span class="line">学 号：19070302</span><br><span class="line">专 业：computer</span><br><span class="line">年 龄：18</span><br><span class="line">姓 名：wangcheng</span><br><span class="line">身份证：320101200201014011</span><br><span class="line">学 号：19070320</span><br><span class="line">专 业：accounting</span><br><span class="line">年 龄：17</span><br><span class="line">*********1.录入信息*********</span><br><span class="line">*********2.查询信息*********</span><br><span class="line">*********3.浏览信息*********</span><br><span class="line">*********0.退    出*********</span><br><span class="line">Please input your choice:0</span><br><span class="line">Thanks,see you...</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之对象成员</title>
    <url>/2025/02/05/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%AF%B9%E8%B1%A1%E6%88%90%E5%91%98/</url>
    <content><![CDATA[<p>The function of good software is to make the complex appear to be simple.</p>
<p>​                                                                                                                     ————-Grady Booch</p>
<h3 id="Main-Point"><a href="#Main-Point" class="headerlink" title="Main Point"></a>Main Point</h3><ul>
<li>认识对象成员</li>
<li>掌握对象成员的构造与析构</li>
</ul>
<h3 id="一-定义"><a href="#一-定义" class="headerlink" title="一.定义"></a>一.定义</h3><p>​	<strong>对象成员</strong>简单地说就是在定义一个新类型是，可以用已有的类类型实例化对象作为数据成员使用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>	</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">    A obj_a;</span><br><span class="line">    B obj_b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中x,y 是普通的数据成员，而obj_a,obj_b是类类型A和B实例化的对象，再次作为C的数据成员出现，称之为对象成员。</p>
<p>​	注：对象成员和任何其他成员一样，存在服务属性问题。如果对象成员在新类中被定义为private，则只能从新类内部引用，如果将对象成员在新类中定义为public，就可以在新类外部对其进行访问，但是对象成员本身的私有属性成员仍然是不可直接访问的。</p>
<h3 id="二-对象成员的构造与析构"><a href="#二-对象成员的构造与析构" class="headerlink" title="二.对象成员的构造与析构"></a>二.对象成员的构造与析构</h3><p>​	与普通对象一样，对象成员在创建时需要调用构造函数，在生命周期结束时需要调用析构函数。</p>
<h5 id="构造与析构函数的调用次序"><a href="#构造与析构函数的调用次序" class="headerlink" title="构造与析构函数的调用次序"></a>构造与析构函数的调用次序</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">A</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;创建A\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">A</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;析构A\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line">	A a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">B</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;创建B\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">B</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;析构B\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	B obj;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建A</span><br><span class="line">创建B</span><br><span class="line">析构B</span><br><span class="line">析构A</span><br></pre></td></tr></table></figure>



<h5 id="含有参数的对象成员构造函数的调用"><a href="#含有参数的对象成员构造函数的调用" class="headerlink" title="含有参数的对象成员构造函数的调用"></a>含有参数的对象成员构造函数的调用</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CDate</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> Date_Year, Date_Month, Date_Day;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">CDate</span>(<span class="type">int</span> y = <span class="number">2000</span>, <span class="type">int</span> m = <span class="number">1</span>, <span class="type">int</span> d = <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">CDate</span>(<span class="type">const</span> CDate &amp;date);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l3_09.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Croster</span></span><br><span class="line">&#123;</span><br><span class="line">	string name;</span><br><span class="line">	CDate birthday;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Croster</span>(string na, <span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span>;</span><br><span class="line">	~<span class="built_in">Croster</span>();</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l3_09.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">CDate::<span class="built_in">CDate</span>(<span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d):<span class="built_in">Date_Year</span>(y),<span class="built_in">Date_Month</span>(m),<span class="built_in">Date_Day</span>(d)</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Constructor called.\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CDate::<span class="built_in">CDate</span>(<span class="type">const</span> CDate&amp; date)</span><br><span class="line">&#123;</span><br><span class="line">	Date_Year = date.Date_Year;</span><br><span class="line">	Date_Month = date.Date_Month;</span><br><span class="line">	Date_Day = date.Date_Day<span class="number">+1</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Copy Constructor called.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CDate::Display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; Date_Year &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; Date_Month &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; Date_Day &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l4_02.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Croster::<span class="built_in">Croster</span>(string na, <span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d) :<span class="built_in">birthday</span>(y, m, d)</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Croster constructor called.\n&quot;</span>;</span><br><span class="line">	name = na;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Croster::Display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">	birthday.<span class="built_in">Display</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Croster::~<span class="built_in">Croster</span>()</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Croster deconstructor called.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l4_02.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Croster <span class="title">stuA</span><span class="params">(<span class="string">&quot;王衍&quot;</span>, <span class="number">2000</span>, <span class="number">3</span>, <span class="number">27</span>)</span></span>;</span><br><span class="line">	stuA.<span class="built_in">Display</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Constructor called.</span><br><span class="line">Croster constructor called.</span><br><span class="line">王衍</span><br><span class="line">2000-3-27</span><br><span class="line">Croster deconstructor called.</span><br></pre></td></tr></table></figure>



<h3 id="三-总结"><a href="#三-总结" class="headerlink" title="三.总结"></a>三.总结</h3><p>​	在实际应用中，在已有的简单类的基础上构建新的复杂类，不仅能提高开发行了，而且增加代码的可维护性。</p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之构造函数</title>
    <url>/2025/02/06/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="Main-Point"><a href="#Main-Point" class="headerlink" title="Main Point"></a>Main Point</h2><ul>
<li>掌握构造函数的定义，特点和作用</li>
<li>掌握无参构造函数与带默认参数值的构造函数的定义与使用</li>
<li>掌握复制构造函数的定义与使用</li>
<li>掌握析构函数的定义与使用</li>
</ul>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>​	构造函数是类的一种特殊的成员函数。</p>
<p>特点：</p>
<ol>
<li>无返回值，不用void</li>
<li>函数名与类名相同</li>
<li>构造函数可以有参数，可以发生重载</li>
<li>创建对象的时候，构造函数会自动调用，而且只调用一次</li>
</ol>
<h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><p>​	创建类的对象时，系统会自动调用构造函数。同样，当对象生命结束时，需要释放所占的内存资源，程序将自动调用类的析构函数来完成。</p>
<p>特点：</p>
<ol>
<li>进行清理操作</li>
<li>无返回值，不用void</li>
<li>函数名于类名名称前加~</li>
<li>析构函数无参，不能重载</li>
<li>对象在销毁前会自动调用析构函数，而且仅调用一次</li>
</ol>
<h2 id="构造函数和析构函数实例"><a href="#构造函数和析构函数实例" class="headerlink" title="构造函数和析构函数实例"></a>构造函数和析构函数实例</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CDate</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> Date_Year, Date_Month, Date_Day;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//构造函数</span></span><br><span class="line">	<span class="comment">//无返回值无void</span></span><br><span class="line">	<span class="comment">//函数名与类名相同</span></span><br><span class="line">	<span class="comment">//可以有参数，可以重载</span></span><br><span class="line">	<span class="comment">//创建对象时，构造函数会自动调用，并且只调用一次</span></span><br><span class="line">	<span class="built_in">CDate</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l3_07.h&quot;</span></span></span><br><span class="line">CDate::<span class="built_in">CDate</span>(<span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d)</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Executing constructor...&quot;</span>;</span><br><span class="line">	Date_Year = y;</span><br><span class="line">	Date_Month = m;</span><br><span class="line">	Date_Day = d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CDate::Display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; Date_Year &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; Date_Month &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; Date_Day &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l3_07.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">CDate <span class="title">today</span><span class="params">(<span class="number">2025</span>, <span class="number">2</span>, <span class="number">5</span>)</span></span>;<span class="comment">//定义对象同时完成初始化</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;today is...\n&quot;</span>;</span><br><span class="line">	today.<span class="built_in">Display</span>();</span><br><span class="line">	today = <span class="built_in">CDate</span>(<span class="number">2010</span>, <span class="number">3</span>, <span class="number">4</span>);<span class="comment">//定义无名对象</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;today is...\n&quot;</span>;</span><br><span class="line">	today.<span class="built_in">Display</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Executing constructor...today is...</span><br><span class="line">2025-2-5</span><br><span class="line">Executing constructor...today is...</span><br><span class="line">2010-3-4</span><br></pre></td></tr></table></figure>

<h2 id="构造函数分类及调用"><a href="#构造函数分类及调用" class="headerlink" title="构造函数分类及调用"></a>构造函数分类及调用</h2><h4 id="两种分类方式"><a href="#两种分类方式" class="headerlink" title="两种分类方式"></a>两种分类方式</h4><ul>
<li><p>有参</p>
</li>
<li><p>无参</p>
</li>
</ul>
<h4 id="三种分类方式"><a href="#三种分类方式" class="headerlink" title="三种分类方式"></a>三种分类方式</h4><ul>
<li>括号法</li>
<li>显示法</li>
<li>隐式转换法</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//普通构造函数</span></span><br><span class="line">	<span class="built_in">Person</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;无参构造函数。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Person</span>(<span class="type">int</span> a)</span><br><span class="line">	&#123;</span><br><span class="line">		age = a;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;有参构造函数。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Person</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;析构。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//拷贝构造函数</span></span><br><span class="line">	<span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//将传入的人身上所有的属性拷贝到我身上。</span></span><br><span class="line">		age = p.age;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;拷贝构造函数。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">task1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//括号法</span></span><br><span class="line">	<span class="comment">//Person p1;//默认构造函数</span></span><br><span class="line">	<span class="comment">//Person p2(10);//有参构造函数</span></span><br><span class="line">	<span class="comment">//Person p3(p2);//拷贝构造函数</span></span><br><span class="line">	<span class="comment">//默认构造函数不能写（）</span></span><br><span class="line">	<span class="comment">//显示法</span></span><br><span class="line">	Person p1;</span><br><span class="line">	Person p2 = <span class="built_in">Person</span>(<span class="number">10</span>);</span><br><span class="line">	Person p3 = <span class="built_in">Person</span> (p2);</span><br><span class="line">	<span class="comment">//Person(10);匿名对象</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;a\n&quot;;</span></span><br><span class="line">	<span class="comment">//隐式写法</span></span><br><span class="line">	Person p4 = <span class="number">10</span>;<span class="comment">//等价于Person p4=Person(10)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">task1</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">无参构造函数。</span><br><span class="line">有参构造函数。</span><br><span class="line">拷贝构造函数。</span><br><span class="line">有参构造函数。</span><br><span class="line">析构。</span><br><span class="line">析构。</span><br><span class="line">析构。</span><br><span class="line">析构。</span><br></pre></td></tr></table></figure>





























]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之小task</title>
    <url>/2025/02/07/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%8Ftask/</url>
    <content><![CDATA[<h1 id="task"><a href="#task" class="headerlink" title="task"></a>task</h1><p>​	设计一个产品类Product,允许通过如下方式创建产品对象。</p>
<ol>
<li>通过指定产品名创建。</li>
<li>通过指定产品名和产品价格创建。</li>
<li>通过指定产品名，产品价格，出厂日期（对象成员）创建。</li>
<li>Product还应该包含如下属性：生产厂家，易碎标记，有效日期（使用对象成员）。设计该类时，至少增加3个其他属性。成员函数包括访问和修改这些属性的操作。</li>
<li>在main()中定义对象，并输出相关信息。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Product</span>();</span><br><span class="line">	<span class="built_in">Product</span>(string na);</span><br><span class="line">	<span class="built_in">Product</span>(string na, <span class="type">double</span> pr);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">SetProduct</span><span class="params">(string na, <span class="type">double</span> pr, string fa, <span class="type">bool</span> ea, string co, <span class="type">double</span> h)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">output</span><span class="params">()</span></span>;</span><br><span class="line">	~<span class="built_in">Product</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string name;</span><br><span class="line">	<span class="type">double</span> price;</span><br><span class="line">	string factory;</span><br><span class="line">	<span class="type">bool</span> easy_break;</span><br><span class="line">	string color;</span><br><span class="line">	<span class="type">double</span> high;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Product::<span class="built_in">Product</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Product::<span class="built_in">Product</span>(string na)</span><br><span class="line">&#123;</span><br><span class="line">	na = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Product::<span class="built_in">Product</span>(string na, <span class="type">double</span> pr)</span><br><span class="line">&#123;</span><br><span class="line">	na = name;</span><br><span class="line">	pr = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Product::SetProduct</span><span class="params">(string na, <span class="type">double</span> pr, string fa, <span class="type">bool</span> ea, string co, <span class="type">double</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	name = na;</span><br><span class="line">	price = pr;</span><br><span class="line">	factory = fa;</span><br><span class="line">	easy_break = ea;</span><br><span class="line">	color = co;</span><br><span class="line">	high = h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Product::output</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; price &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; factory&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; easy_break &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; color &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; high &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Product::~<span class="built_in">Product</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Product <span class="title">p1</span><span class="params">(<span class="string">&quot;car&quot;</span>)</span></span>;</span><br><span class="line">	<span class="function">Product <span class="title">p2</span><span class="params">(<span class="string">&quot;glass&quot;</span>, <span class="number">3.00</span>)</span></span>;</span><br><span class="line">	p<span class="number">1.</span><span class="built_in">SetProduct</span>(<span class="string">&quot;car&quot;</span>, <span class="number">100000.0</span>, <span class="string">&quot;nj&quot;</span>, <span class="number">0</span>, <span class="string">&quot;red&quot;</span>, <span class="number">1.5</span>);</span><br><span class="line">	p<span class="number">1.</span><span class="built_in">output</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">car 100000</span><br><span class="line">nj 0</span><br><span class="line">red 1.5</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之拷贝构造函数的调用</title>
    <url>/2025/02/07/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<p>emmmm,这一篇是对之前一章构造函数的补充。</p>
<h2 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h2><p>​	拷贝构造函数也是一种重载版本的构造函数，它是用一个已存在的对象初始化另一个新创建的同类对象。该函数的参数与普通构造函数不同，是一个同类的常引用。高效地传递对象，也能保证原对象不被修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">类名（const 类名&amp;对象名）；</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Person</span>()&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;默认构造函数。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Person</span>(<span class="type">int</span> a)</span><br><span class="line">	&#123;</span><br><span class="line">		age = a;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;有参构造函数。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;拷贝构造函数。\n&quot;</span>;</span><br><span class="line">		age = p.age;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Person</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;析构函数。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用一个已经创建完毕的对象来初始化一个新对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p2的年龄：&quot;</span> &lt;&lt;p<span class="number">2.</span>age &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//值传递的方式给函数参数传值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dowork</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt;<span class="string">&quot;年龄：&quot;</span> &lt;&lt; p.age &lt;&lt; endl;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="built_in">dowork</span>(p);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//值方式返回局部变量</span></span><br><span class="line"> <span class="function">Person <span class="title">dowork2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	cout &lt;&lt; (<span class="type">int</span>*)&amp;p1 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; p<span class="number">1.</span>age &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Person</span>(p1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person p = <span class="built_in">dowork2</span>();</span><br><span class="line">	cout &lt;&lt; (<span class="type">int</span>*)&amp;p &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line">	<span class="built_in">test03</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用一个已经创建完毕的对象来初始化一个新对象</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有参构造函数。</span><br><span class="line">拷贝构造函数。</span><br><span class="line">p2的年龄：10</span><br><span class="line">析构函数。</span><br><span class="line">析构函数。</span><br></pre></td></tr></table></figure>

<ul>
<li>值传递的方式给函数参数传值</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有参构造函数。</span><br><span class="line">拷贝构造函数。</span><br><span class="line">年龄：10</span><br><span class="line">析构函数。</span><br><span class="line">析构函数。</span><br></pre></td></tr></table></figure>

<ul>
<li>值方式返回局部变量</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有参构造函数。</span><br><span class="line">000000DB556FF364</span><br><span class="line">年龄：10</span><br><span class="line">拷贝构造函数。</span><br><span class="line">析构函数。</span><br><span class="line">000000DB556FF4A4</span><br><span class="line">析构函数。</span><br></pre></td></tr></table></figure>





















































]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之析构函数和动态内存分配</title>
    <url>/2025/02/08/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
    <content><![CDATA[<p>​	程序中经常要为类成员申请动态内存空间。比如在构造函数中，使用new操作符申请了一块动态内存空间，那么该对象生命周期结束时，申请的动态内存空间如何释放呢？我们通过一个简单的类来学习在析构函数中释放动态内存空间。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CMessage</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span>* pmessage;<span class="comment">//字符指针变量</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">CMessage</span>(<span class="type">const</span> <span class="type">char</span>* text = <span class="string">&quot;中国一点也没有少！&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		pmessage = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(text) + <span class="number">1</span>];</span><br><span class="line">		<span class="built_in">strcpy_s</span>(pmessage, <span class="built_in">strlen</span>(text) + <span class="number">1</span>, text);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; pmessage&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">CMessage</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Destructor called.\n&quot;</span>;</span><br><span class="line">		<span class="keyword">delete</span>[]pmessage;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l3_11.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CMessage Mes1;</span><br><span class="line">	<span class="function">CMessage <span class="title">Mes2</span><span class="params">(<span class="string">&quot;爱我中华！&quot;</span>)</span></span>;</span><br><span class="line">	CMessage* pm = <span class="keyword">new</span> <span class="built_in">CMessage</span>(<span class="string">&quot;我爱我的祖国&quot;</span>);</span><br><span class="line">	Mes<span class="number">1.</span><span class="built_in">show</span>();</span><br><span class="line">	Mes<span class="number">2.</span><span class="built_in">show</span>();</span><br><span class="line">	pm-&gt;<span class="built_in">show</span>();</span><br><span class="line">	<span class="keyword">delete</span> pm;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">中国一点也没有少！</span><br><span class="line">爱我中华！</span><br><span class="line">我爱我的祖国</span><br><span class="line">Destructor called.</span><br><span class="line">Destructor called.</span><br><span class="line">Destructor called.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之静态成员</title>
    <url>/2025/02/09/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%9D%99%E6%80%81%E6%88%90%E5%91%98/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>​	静态成员就是在成员变量和成员函数前加关键词static。</p>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h4 id="静态成员变量"><a href="#静态成员变量" class="headerlink" title="静态成员变量"></a>静态成员变量</h4><ul>
<li>所以对象共享同一份数据</li>
<li>在编译阶段分配内存</li>
<li>类内声明，类外初始化</li>
</ul>
<h4 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h4><ul>
<li>所有对象共享同一函数</li>
<li>静态成员函数只能访问静态成员变量</li>
</ul>
<h2 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>();</span><br><span class="line">	~<span class="built_in">Person</span>();</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> m_A;</span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_A = <span class="number">2000</span>;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;static void 调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> Person::m_A = <span class="number">10</span>;</span><br><span class="line">Person::<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person::~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//通过对象进行访问</span></span><br><span class="line">	Person P;</span><br><span class="line">	<span class="comment">//100</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; P.m_A &lt;&lt; endl;</span><br><span class="line">	Person p2;</span><br><span class="line">	p<span class="number">2.</span>m_A = <span class="number">20</span>;</span><br><span class="line">	<span class="comment">//200</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; P.m_A &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//通过类名进行访问</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; Person::m_A &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">年龄：10</span><br><span class="line">年龄：20</span><br><span class="line">年龄：20</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//通过类名进行访问</span></span><br><span class="line">	Person::<span class="built_in">func</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; Person::m_A &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//通过对象进行访问</span></span><br><span class="line">	Person P;</span><br><span class="line">	P.<span class="built_in">func</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; P.m_A &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static void 调用</span><br><span class="line">年龄：2000</span><br><span class="line">static void 调用</span><br><span class="line">年龄：2000</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line">	<span class="built_in">test03</span>();</span><br><span class="line">	<span class="built_in">test04</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="书本实例"><a href="#书本实例" class="headerlink" title="书本实例"></a>书本实例</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Croster</span></span><br><span class="line">&#123;</span><br><span class="line">	string name;</span><br><span class="line">	<span class="type">int</span> Math;</span><br><span class="line">	<span class="comment">/*int English;*/</span></span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> Sum;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Croster</span>(string na = <span class="string">&quot;undef&quot;</span>, <span class="type">int</span> m = <span class="number">100</span><span class="comment">/*, int e = 100*/</span>);</span><br><span class="line">	<span class="comment">/*void Display();*/</span></span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> Count;</span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l4_03.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> Croster::Count = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> Croster::Sum;</span><br><span class="line">Croster::<span class="built_in">Croster</span>(string na, <span class="type">int</span> m) :<span class="built_in">name</span>(na), <span class="built_in">Math</span>(m)</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;欢迎新同学&quot;</span> &lt;&lt; endl;</span><br><span class="line">	Count--;</span><br><span class="line">	Sum += Math;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Croster::Display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//cout&lt;&lt;&quot;name:&quot;&lt;&lt;name&lt;&lt;endl;</span></span><br><span class="line">	<span class="comment">//静态成员函数不允许访问非静态成员</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Sum:&quot;</span> &lt;&lt; Sum &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">if</span> (Count == <span class="number">100</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Average=0&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Average=&quot;</span> &lt;&lt; Sum * <span class="number">1.0</span> / (<span class="number">100</span> - Count) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l4_03.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Croster::<span class="built_in">Display</span>();</span><br><span class="line">	Croster list[<span class="number">3</span>] = &#123; <span class="built_in">Croster</span>(<span class="string">&quot;赵衍&quot;</span>,<span class="number">95</span>),<span class="built_in">Croster</span>(<span class="string">&quot;钱多多&quot;</span>,<span class="number">90</span>),<span class="built_in">Croster</span>(<span class="string">&quot;孙立&quot;</span>,<span class="number">92</span>) &#125;;</span><br><span class="line">	list[<span class="number">1</span>].<span class="built_in">Display</span>();</span><br><span class="line">	<span class="function">Croster <span class="title">stu_A</span><span class="params">(<span class="string">&quot;李梅&quot;</span>)</span></span>;</span><br><span class="line">	stu_A.<span class="built_in">Display</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sum:0</span><br><span class="line">Average=0</span><br><span class="line">欢迎新同学</span><br><span class="line">欢迎新同学</span><br><span class="line">欢迎新同学</span><br><span class="line">Sum:277</span><br><span class="line">Average=92.3333</span><br><span class="line">欢迎新同学</span><br><span class="line">Sum:377</span><br><span class="line">Average=94.25</span><br></pre></td></tr></table></figure>





















]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之深复制</title>
    <url>/2025/03/17/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E6%B7%B1%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CMessage</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">char</span>* pmessage;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">CMessage</span>(<span class="type">const</span> <span class="type">char</span>* text = <span class="string">&quot;中国一点也不能少！&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		pmessage = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(text) + <span class="number">1</span>];</span><br><span class="line">		<span class="built_in">strcpy_s</span>(pmessage, <span class="built_in">strlen</span>(text) + <span class="number">1</span>, text);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; pmessage &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">CMessage</span>(<span class="type">const</span> CMessage&amp; oMes)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">size_t</span> len = <span class="built_in">strlen</span>(oMes.pmessage) + <span class="number">1</span>;</span><br><span class="line">		pmessage = <span class="keyword">new</span> <span class="type">char</span>[len];</span><br><span class="line">		<span class="built_in">strcpy_s</span>(pmessage, len, oMes.pmessage);</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">CMessage</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Destructor called!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">delete</span>[]pmessage;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">CMessage <span class="title">Mes1</span><span class="params">(<span class="string">&quot;爱我中华!&quot;</span>)</span></span>;</span><br><span class="line">	<span class="function">CMessage <span class="title">Mes2</span><span class="params">(Mes1)</span></span>;</span><br><span class="line">	Mes<span class="number">1.</span><span class="built_in">show</span>();</span><br><span class="line">	Mes<span class="number">2.</span><span class="built_in">show</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">爱我中华!</span><br><span class="line">爱我中华!</span><br><span class="line">Destructor called!</span><br><span class="line">Destructor called!</span><br></pre></td></tr></table></figure>

<p>本章是对《类与对象之析构函数和动态内存分配》的一个补充（</p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
