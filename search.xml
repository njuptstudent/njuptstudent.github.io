<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++之字符串</title>
    <url>/2025/02/12/C-%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>​	<strong>本节要点：</strong></p>
<ul>
<li>C++新增string类型处理字符串</li>
<li>需要用”#include<string>“包含头文件string</li>
<li>利用string类型可以进行赋值，复制等各种串操作</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 定义字符串变量s1</span></span><br><span class="line">	string s1;</span><br><span class="line">	<span class="comment">// 初始化字符串变量s2为&quot;Student&quot;</span></span><br><span class="line">	string s2 = <span class="string">&quot;Student&quot;</span>;</span><br><span class="line">	<span class="comment">// 将s2的值赋给s3</span></span><br><span class="line">	string s3 = s2;</span><br><span class="line">	<span class="comment">// 初始化字符串变量s4，包含8个字符&#x27;A&#x27;</span></span><br><span class="line">	<span class="function">string <span class="title">s4</span><span class="params">(<span class="number">8</span>, <span class="string">&#x27;A&#x27;</span>)</span></span>;</span><br><span class="line">	<span class="comment">// 从标准输入读取字符串赋值给s1</span></span><br><span class="line">	cin &gt;&gt; s1;</span><br><span class="line">	<span class="comment">// 输出s1的值</span></span><br><span class="line">	cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 输出s2的值</span></span><br><span class="line">	cout &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 输出s3的值</span></span><br><span class="line">	cout &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 输出s4的值</span></span><br><span class="line">	cout &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 将s1的值赋给s4</span></span><br><span class="line">	s4 = s1;</span><br><span class="line">	<span class="comment">// 输出s4的值及其长度</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;s4=&quot;</span> &lt;&lt; s4 &lt;&lt; <span class="string">&quot;Length=&quot;</span> &lt;&lt; s<span class="number">4.l</span>ength() &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 将s3和s4的值连接，并在中间插入空格，赋值给s2</span></span><br><span class="line">	s2 = s3 + <span class="string">&#x27; &#x27;</span> + s4;</span><br><span class="line">	<span class="comment">// 输出s2的值</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;s2=&quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 在s3的第7个位置插入&quot;&amp;Teacher&quot;</span></span><br><span class="line">	s<span class="number">3.</span><span class="built_in">insert</span>(<span class="number">7</span>, <span class="string">&quot;&amp;Teacher&quot;</span>);</span><br><span class="line">	<span class="comment">// 输出s3的值</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;s3=&quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 将s3从第2个位置开始的4个字符替换为&quot;ar&quot;</span></span><br><span class="line">	s<span class="number">3.</span><span class="built_in">replace</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="string">&quot;ar&quot;</span>);</span><br><span class="line">	<span class="comment">// 输出s3的值</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;s3=&quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 从s3的第6个位置开始提取7个字符，赋值给s1</span></span><br><span class="line">	s1 = s<span class="number">3.</span><span class="built_in">substr</span>(<span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line">	<span class="comment">// 输出s1的值</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;s1=&quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 查找s1在s3中的位置，并将结果赋值给pos</span></span><br><span class="line">	<span class="type">int</span> pos = s<span class="number">3.f</span>ind(s1);</span><br><span class="line">	<span class="comment">// 输出pos的值</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;pos=&quot;</span> &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 从s3的第5个位置开始删除8个字符</span></span><br><span class="line">	s<span class="number">3.</span><span class="built_in">erase</span>(<span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">	<span class="comment">// 输出s3的值</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;s3=&quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 比较s1和s4的大小，并将结果赋值给f</span></span><br><span class="line">	<span class="type">bool</span> f = s1 &gt; s4;</span><br><span class="line">	<span class="comment">// 输出f的值及其布尔形式</span></span><br><span class="line">	cout &lt;&lt; f &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; boolalpha &lt;&lt; f &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入<strong>Zhu</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Zhu</span><br><span class="line">Student</span><br><span class="line">Student</span><br><span class="line">AAAAAAAA</span><br><span class="line">s4=ZhuLength=3</span><br><span class="line">s2=Student Zhu</span><br><span class="line">s3=Student&amp;Teacher</span><br><span class="line">s3=Start&amp;Teacher</span><br><span class="line">s1=Teacher</span><br><span class="line">pos=6</span><br><span class="line">s3=Start</span><br><span class="line">0 false</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/02/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>begining</tag>
      </tags>
  </entry>
  <entry>
    <title>typora&amp;markdown</title>
    <url>/2025/02/04/typora-markdown/</url>
    <content><![CDATA[<h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>​	Typora 是一款由Abner Lee开发的轻量级 Markdown 编辑器。Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML （或HTML）文档。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>​	下载地址：<a href="https://typora.io/releases/all%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%8D%B3%E5%8F%AF%E3%80%82">https://typora.io/releases/all，下载安装即可。</a></p>
<h4 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h4><p>​	打开Typora后，会显示空白的编辑页，左上角会显示7个菜单入口，简单认识下常用的功能。</p>
<p><img src="/img/101.png"></p>
<h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><h4 id="块"><a href="#块" class="headerlink" title="块"></a>块</h4><h5 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h5><p>​	标题在行的开头使用1-6个<code>#</code>字符，对应于标题级别1-6。在Typora中输入<code># 标题内容</code>即可创建标题。注意：<code>#</code>与标题内容之间有个空格。</p>
<p>快捷键：<code>Ctrl+1</code>、<code>Ctrl+2</code>、<code>Ctrl+3</code>、<code>Ctrl+4</code>、<code>Ctrl+5</code>、<code>Ctrl+6</code>；Ctrl+1-6 对应标题级别1-6。</p>
<h5 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h5><p>​	引用在行的开头使用<code>&gt;</code>字符进行块引用。在Typora中输入<code>&gt;引用内容</code>即可生成块引用。块引用中继续输入<code>&gt;引用内容</code>，可以内嵌块引用。</p>
<p>快捷键：<code>Ctrl+Shift+Q</code>。</p>
<h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><h6 id="有序"><a href="#有序" class="headerlink" title="有序"></a>有序</h6><p>​	有序列表在行的开头输入<code>数字. 列表内容</code>可以创建有序列表，再按回车即可自动生成<code>数字+1.</code>的有序列表，即<code>1. 列表内容</code>回车后生成<code>2. 列表内容</code>。注意：<code>.</code>与列表内容之间有个空格。</p>
<blockquote>
<p>快捷键：<code>Ctrl+Shift+[</code>。</p>
</blockquote>
<p>第一个列表</p>
<p>第二个列表</p>
<h6 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h6><p>​	无序列表在行的开头输入<code>- 列表内容</code>可以创建无序列表，再按回车即可自动生成下个无序列表。注意：<code>-</code>与列表内容之间有个空格。</p>
<blockquote>
<p>快捷键：<code>Ctrl+Shift+]</code>。</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 第一个列表</span><br><span class="line"><span class="bullet">-</span> 第二个列表</span><br></pre></td></tr></table></figure>

<h6 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h6><p>​	任务列表在行的开头输入<code>- [ ] 列表内容</code> 、<code>- [x] 列表内容</code>可以创建未完成与已完成的任务列表。注意：<code>- [ ]</code>与列表内容之间有个空格。</p>
<blockquote>
<p>快捷键：<code>Ctrl+Shift+X</code>。</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> [ ] 未完成</span><br><span class="line"><span class="bullet">-</span> [x] 已完成</span><br></pre></td></tr></table></figure>

<h6 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h6><p>​	代码块在行的开头输入&#96;&#96;&#96;语言标识符，再按回车即可生成对应语言的代码块，包含语法高亮功能。</p>
<p>快捷键：Ctrl+Shift+K+ 对应的代码格式（python、java、shell）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="数学的模块"><a href="#数学的模块" class="headerlink" title="数学的模块"></a>数学的模块</h6><p>​	数学公式块在行的开头输入$$ + 回车键，即可生成接受Tex&#x2F;Latex源代码输入的区域。LaTex格式的数学表达式学习请参考LaTex&#x2F;数学。</p>
<p>快捷键：Ctrl+Shift+M。</p>
<p>$$<br>\lim\limits_{x \to \infty} \exp(-x) &#x3D; 0<br>$$</p>
<h6 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h6><p>​	表格推荐直接使用快捷键<code>Ctrl+T</code>，可以自定义生成几行几列的表格，</p>
<blockquote>
<p>快捷键：<code>Ctrl+T</code>。</p>
</blockquote>
<table>
<thead>
<tr>
<th>\</th>
<th>1</th>
<th>2</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td></td>
<td></td>
</tr>
<tr>
<td>2</td>
<td></td>
<td></td>
</tr>
<tr>
<td>3</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h6 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h6><p>​	水平线在行的开头输入<code>---</code> + 回车键即可生成水平线。</p>
<hr>
<h6 id="内容目录"><a href="#内容目录" class="headerlink" title="内容目录"></a>内容目录</h6><p>​	目录在行的开头输入<code>[toc]</code>+回车，即可生成文章目录，自动更新。</p>
<blockquote>
<p>快捷键：<code>鼠标右键-&gt;插入-&gt;内容目录</code>。</p>
</blockquote>
<h6 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h6><p>​	Typora 支持, sequence, flowchart and mermaid, 使用前要先从偏好设置—&gt;Markdown—&gt;面板—&gt;Markdown扩展语法中，勾选图表选项来启用该功能。</p>
<h6 id="序列图"><a href="#序列图" class="headerlink" title="序列图"></a>序列图</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">jpdsg-&gt;&gt;spreng: Says Hello</span><br><span class="line">Note right of spreng: spreng thinks\nabout it</span><br><span class="line">spreng--&gt;&gt;jpdsg: How are you?</span><br><span class="line">jpdsg-&gt;&gt;spreng: I am good thanks!</span><br></pre></td></tr></table></figure>

<h5 id="Span-元素"><a href="#Span-元素" class="headerlink" title="Span 元素"></a>Span 元素</h5><h6 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h6><p>​	快捷键：<code>Ctrl+K</code>。</p>
<p><a href="https://njuptstudent.github.io/">nnn</a></p>
<h6 id="URL网址"><a href="#URL网址" class="headerlink" title="URL网址"></a>URL网址</h6><p>​	文章中输入<code>&lt;URL网址&gt;</code>即可生成支持跳转的链接。使用<code>Ctrl</code>+点击此链接的方式跳转。Typora也支持自动链接标准URL。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">&lt;https://www.baidu.com/&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">www.baidu.com</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h6 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h6><p>​	文章中输入<code>**文本**</code>即可给文本加粗。</p>
<h6 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h6><p>​	文章中输入<code>^文本^</code>即可给文本添加上标效果。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">X^2^</span><br></pre></td></tr></table></figure>

<h6 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h6><p>​	文章中输入<code>~文本~</code>即可给文本添加下标效果。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">H~2~O</span><br></pre></td></tr></table></figure>

<h5 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h5><h6 id="嵌入内容"><a href="#嵌入内容" class="headerlink" title="嵌入内容"></a>嵌入内容</h6><p>​	文章中输入&lt;#iframe #src&#x3D;”在线视频嵌入代码或链接” #width&#x3D;”视频宽度” #height&#x3D;”视频高度”&gt;</iframe>即可插入视频。也可以通过在视频页面点击 “分享”&gt;“嵌入” 获取嵌入代码，然后在 Typora 中插入。（删去#</p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>typora</tag>
      </tags>
  </entry>
  <entry>
    <title>前端那些事NO.1</title>
    <url>/2025/02/05/%E5%89%8D%E7%AB%AF%E9%82%A3%E4%BA%9B%E4%BA%8BNO-1/</url>
    <content><![CDATA[<h3 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h3><h5 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="字体加粗"><a href="#字体加粗" class="headerlink" title="字体加粗"></a>字体加粗</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><pre><code>ctrl /
</code></pre>
<h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span>src=&quot;&quot;alt=&quot;&quot;<span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="标签嵌套"><a href="#标签嵌套" class="headerlink" title="标签嵌套"></a>标签嵌套</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot; &quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="功能性标签"><a href="#功能性标签" class="headerlink" title="功能性标签"></a>功能性标签</h3><h5 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h5><ol>
<li>空格 &amp;nbsp</li>
<li>版权 &amp;copy</li>
<li>引号 &amp;quot</li>
</ol>
<h2 id="come-on"><a href="#come-on" class="headerlink" title="come on"></a>come on</h2>]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>前端那些事NO.2</title>
    <url>/2025/02/06/%E5%89%8D%E7%AB%AF%E9%82%A3%E4%BA%9B%E4%BA%8BNO-2/</url>
    <content><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>掌握<strong>CSS</strong>的语法结构和在网页上的应用</li>
<li>掌握<strong>CSS</strong>的文本和字体样式</li>
<li>掌握<strong>CSS</strong>背景样式</li>
</ul>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>​	<strong>CSS</strong> (Cascading Style Sheets，层叠样式表），是一种用来为结构化文档（如 HTML 文档或 XML 应用）添加样式（字体、间距和颜色等）的计算机语言，<strong>CSS</strong> 文件扩展名为 <strong>.css</strong>。通过使用 <strong>CSS</strong> 我们可以大大提升网页开发的工作效率！<strong>CSS3</strong> 现在已被大部分现代浏览器支持，而下一版的 <strong>CSS4</strong> 仍在开发中。         </p>
<ul>
<li>样式定义<strong>如何显示</strong> HTML 元素</li>
<li>样式通常存储在<strong>样式表</strong>中</li>
<li>把样式添加到 HTML 4.0 中，是为了<strong>解决内容与表现分离的问题</strong></li>
<li><strong>外部样式表</strong>可以极大提高工作效率</li>
<li>外部样式表通常存储在 <strong>CSS 文件</strong>中</li>
<li>多个样式定义可<strong>层叠</strong>为一个</li>
</ul>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h4 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>will<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>:yellow;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span>   &#123;<span class="attribute">font-size</span>:<span class="number">36pt</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h2</span>   &#123;<span class="attribute">color</span>:blue;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span>    &#123;<span class="attribute">margin-left</span>:<span class="number">50px</span>;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这个标题设置的大小为 36 pt<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这个标题设置的颜色为蓝色：blue<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这个段落的左外边距为 50 像素：50px<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Will<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>:tan;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span>   &#123;<span class="attribute">color</span>:maroon;<span class="attribute">font-size</span>:<span class="number">20pt</span>;&#125;</span></span><br><span class="line"><span class="language-css">hr   &#123;<span class="attribute">color</span>:navy;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span>    &#123;<span class="attribute">font-size</span>:<span class="number">11pt</span>;<span class="attribute">margin-left</span>:<span class="number">150px</span>;&#125;//元素与相邻元素的距离</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>    &#123;<span class="attribute">color</span>:green;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>:yellow;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>   &#123;<span class="attribute">color</span>:black;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>  &#123;<span class="attribute">color</span>:blue;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你可以看到这个段落是</span><br><span class="line">被设定的 CSS 渲染的。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.bilibili.com/&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>这是一个链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>​	id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。HTML元素以id属性来设置id选择器,CSS 中 id 选择器以 “#” 来定义。</p>
<p>以下的样式规则应用于元素属性 id&#x3D;”para1”:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Will<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#para1</span></span></span><br><span class="line"><span class="language-css">&#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">text-align</span>:center;//居中</span></span><br><span class="line"><span class="language-css">	<span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125; </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;para1&quot;</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这个段落不受该样式的影响。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a>class选择器</h4><p>​	class 选择器用于描述一组元素的样式，class 选择器有别于id选择器，class可以在多个元素中使用。class 选择器在 HTML 中以 class 属性表示, 在 CSS 中，类选择器以一个点 <strong>.</strong> 号显示，在以下的例子中，所有拥有 center 类的 HTML 元素均为居中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Will<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.center</span></span></span><br><span class="line"><span class="language-css">&#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span>标题居中<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span>段落居中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>不居中！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端那些事NO.3</title>
    <url>/2025/02/06/%E5%89%8D%E7%AB%AF%E9%82%A3%E4%BA%9B%E4%BA%8BNO-3/</url>
    <content><![CDATA[<h2 id="创建CSS"><a href="#创建CSS" class="headerlink" title="创建CSS"></a>创建CSS</h2><p>​	当读到一个样式表时，浏览器会根据它来格式化 HTML 文档。</p>
<h4 id="如何插入样式表"><a href="#如何插入样式表" class="headerlink" title="如何插入样式表"></a>如何插入样式表</h4><p>插入样式表的方法有三种:</p>
<ul>
<li>外部样式表(External style sheet)</li>
<li>内部样式表(Internal style sheet)</li>
<li>内联样式(Inline style)</li>
</ul>
<h4 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h4><p>​	当样式需要应用于很多页面时，外部样式表将是理想的选择。在使用外部样式表的情况下，你可以通过改变一个文件来改变整个站点的外观。每个页面使用 <link> 标签链接到样式表。 <link> 标签在（文档的）头部：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​	浏览器会从文件 mystyle.css 中读到样式声明，并根据它来格式文档。</p>
<p>​	外部样式表可以在任何文本编辑器中进行编辑。文件不能包含任何的 html 标签。样式表应该以 .css 扩展名进行保存。下面是一个样式表文件的例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">hr &#123;<span class="attribute">color</span>:sienna;&#125; <span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>:<span class="number">20px</span>;&#125; <span class="selector-tag">body</span> &#123;<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&quot;/images/back40.gif&quot;</span>);&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><img src="https://www.runoob.com/images/lamp.gif" alt="Remark"> 不要在属性值与单位之间留有空格（如：”margin-left: 20 px” ），正确的写法是 “margin-left: 20px” 。</p>
</blockquote>
<h4 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h4><p>​	当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用 <style> 标签在文档头部定义内部样式表，就像这样:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"> hr &#123;<span class="attribute">color</span>:sienna;&#125; <span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>:<span class="number">20px</span>;&#125; <span class="selector-tag">body</span> &#123;<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&quot;images/back40.gif&quot;</span>);&#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h4><p>​	由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。请慎用这种方法，例如当样式仅需要在一个元素上应用一次时。要使用内联样式，你需要在相关的标签内使用样式（style）属性。Style 属性可以包含任何 CSS 属性。本例展示如何改变段落的颜色和左外边距：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:sienna;margin-left:20px&quot;</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="多重样式优先级"><a href="#多重样式优先级" class="headerlink" title="多重样式优先级"></a>多重样式优先级</h4><p>​	样式表允许以多种方式规定样式信息。样式可以规定在单个的 HTML 元素中，在 HTML 页的头元素中，或在一个外部的 CSS 文件中。甚至可以在同一个 HTML 文档内部引用多个外部样式表。</p>
<p>一般情况下，优先级如下：*（内联样式）Inline style &gt; （内部样式）Internal style sheet &gt;（外部样式）External style sheet &gt; 浏览器默认样式  *</p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端那些事之仿京东边框</title>
    <url>/2025/02/10/%E5%89%8D%E7%AB%AF%E9%82%A3%E4%BA%9B%E4%BA%8B%E4%B9%8B%E4%BB%BF%E4%BA%AC%E4%B8%9C%E8%BE%B9%E6%A1%86/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>京东边框<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置页面整体字体 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 定义无序列表样式，移除默认样式并设置宽度和边框 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">212px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 定义列表项样式，包括背景色、文字颜色、字体大小、居中对齐和鼠标悬停效果 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 去除列表项中h3元素的默认外边距 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span> <span class="selector-tag">h3</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 定义顶部列表项的特殊样式，包括高度、行高和背景颜色 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#top</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">45px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">45px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">220</span>, <span class="number">44</span>, <span class="number">44</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导航栏，包含一个无序列表用于商品分类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;top&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>全部商品分类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>家用电器<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>电脑办公<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>美妆个护<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>服饰鞋包<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>母婴玩具<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>图书音像<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>男装女装<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>内衣配饰<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>汽车用品<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/jdtu.png"></p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>前端那些事NO.4</title>
    <url>/2025/02/06/%E5%89%8D%E7%AB%AF%E9%82%A3%E4%BA%9B%E4%BA%8BNO-4/</url>
    <content><![CDATA[<h2 id="CSS-文本格式"><a href="#CSS-文本格式" class="headerlink" title="CSS 文本格式"></a>CSS 文本格式</h2><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><p>​	This text is styled with some of the text formatting properties. The heading uses the text-align, text-transform, and color properties. The paragraph is indented, aligned, and the space between characters is specified. The underline is removed from the <a href="https://www.runoob.com/try/try.php?filename=trycss_text">“尝试一下”</a> link.</p>
<hr>
<h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><p>颜色属性被用来设置文字的颜色。</p>
<p>颜色是通过<em>CSS</em>最经常的指定：</p>
<ul>
<li>十六进制值 - 如: <strong>＃FF0000</strong></li>
<li>一个<em>RGB</em>值 - 如: <strong>RGB(255,0,0)</strong></li>
<li>颜色的名称 - 如: <strong>red</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Will<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;<span class="attribute">color</span>:red;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>:<span class="number">#00ff00</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span><span class="selector-class">.ex</span> &#123;<span class="attribute">color</span>:<span class="built_in">rgb</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>);&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是标题 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个普通的段落。请注意,本文是红色的。页面中定义默认的文本颜色选择器。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;ex&quot;</span>&gt;</span>这是一个类为&quot;ex&quot;的段落。这个文本是蓝色的。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h4><p>​	文本排列属性是用来设置文本的水平对齐方式。文本可居中或对齐到左或右,两端对齐.当text-align设置为”justify”，每一行被展开为宽度相等，左，右外边距是对齐（如杂志和报纸）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Will<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span> &#123;<span class="attribute">text-align</span>:center;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span><span class="selector-class">.date</span> &#123;<span class="attribute">text-align</span><span class="selector-pseudo">:right</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span><span class="selector-class">.main</span> &#123;<span class="attribute">text-align</span>:justify;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>CSS text-align 实例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;date&quot;</span>&gt;</span>2015 年 3 月 14 号<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span>“当我年轻的时候，我梦想改变这个世界；当我成熟以后，我发现我不能够改变这个世界，我将目光缩短了些，决定只改变我的国家；当我进入暮年以后，我发现我不能够改变我们的国家，我的最后愿望仅仅是改变一下我的家庭，但是，这也不可能。当我现在躺在床上，行将就木时，我突然意识到：如果一开始我仅仅去改变我自己，然后，我可能改变我的家庭；在家人的帮助和鼓励下，我可能为国家做一些事情；然后，谁知道呢?我甚至可能改变这个世界。”<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>注意：<span class="tag">&lt;/<span class="name">b</span>&gt;</span> 重置浏览器窗口大小查看 <span class="symbol">&amp;quot;</span>justify<span class="symbol">&amp;quot;</span> 是如何工作的。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CSS text-align 实例</span><br><span class="line">2015 年 3 月 14 号</span><br><span class="line"></span><br><span class="line">“当我年轻的时候，我梦想改变这个世界；当我成熟以后，我发现我不能够改变这个世界，我将目光缩短了些，决定只改变我的国家；当我进入暮年以后，我发现我不能够改变我们的国家，我的最后愿望仅仅是改变一下我的家庭，但是，这也不可能。当我现在躺在床上，行将就木时，我突然意识到：如果一开始我仅仅去改变我自己，然后，我可能改变我的家庭；在家人的帮助和鼓励下，我可能为国家做一些事情；然后，谁知道呢?我甚至可能改变这个世界。”</span><br><span class="line"></span><br><span class="line">注意： 重置浏览器窗口大小查看 &quot;justify&quot; 是如何工作的。</span><br></pre></td></tr></table></figure>



<h4 id="修饰"><a href="#修饰" class="headerlink" title="修饰"></a>修饰</h4><p>​	text-decoration 属性用来设置或删除文本的装饰。从设计的角度看 text-decoration属性主要是用来删除链接的下划线：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Will<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">a</span> &#123;<span class="attribute">text-decoration</span>:none;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>链接到: <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.bilibili.com/&quot;</span>&gt;</span>runoob.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​	也可以这样装饰文字：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Will<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span> &#123;<span class="attribute">text-decoration</span>:overline;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h2</span> &#123;<span class="attribute">text-decoration</span>:line-through;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h3</span> &#123;<span class="attribute">text-decoration</span>:underline;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is heading 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is heading 2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>This is heading 3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># This is heading 1</span><br><span class="line"></span><br><span class="line">## This is heading 2</span><br><span class="line"></span><br><span class="line">### This is heading 3</span><br></pre></td></tr></table></figure>



<h4 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h4><p>​	文本转换属性是用来指定在一个文本中的大写和小写字母。可用于所有字句变成大写或小写字母，或每个单词的首字母大写。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>will<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span><span class="selector-class">.uppercase</span> &#123;<span class="attribute">text-transform</span>:uppercase;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span><span class="selector-class">.lowercase</span> &#123;<span class="attribute">text-transform</span>:lowercase;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span><span class="selector-class">.capitalize</span> &#123;<span class="attribute">text-transform</span>:capitalize;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;uppercase&quot;</span>&gt;</span>This is some text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;lowercase&quot;</span>&gt;</span>This is some text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;capitalize&quot;</span>&gt;</span>This is some text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">THIS IS SOME TEXT</span><br><span class="line">this is some text.</span><br><span class="line">This Is Some Text.</span><br></pre></td></tr></table></figure>

<h4 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h4><p>​	文本缩进属性是用来指定文本的第一行的缩进。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span> &#123;<span class="attribute">text-indent</span>:<span class="number">50px</span>;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>In my younger and more vulnerable years my father gave me some advice that I&#x27;ve been turning over in my mind ever since. &#x27;Whenever you feel like criticizing anyone,&#x27; he told me, &#x27;just remember that all the people in this world haven&#x27;t had the advantages that you&#x27;ve had.&#x27;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In my younger and more vulnerable years my father gave me some advice that I&#x27;ve been turning over in my mind ever since. &#x27;Whenever you feel like criticizing anyone,&#x27; he told me, &#x27;just remember that all the people in this world haven&#x27;t had the advantages that you&#x27;ve had.&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之const修饰成员函数</title>
    <url>/2025/02/10/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8Bconst%E4%BF%AE%E9%A5%B0%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="常函数"><a href="#常函数" class="headerlink" title="常函数"></a>常函数</h3><ul>
<li><p>成员函数加const后我们称这个函数为常函数</p>
</li>
<li><p>常函数内不可修改成员属性</p>
</li>
<li><p>成员属性声明时加关键字mutable后，在常函数中依然可以修改</p>
</li>
<li><p>类型	函数名（形式参数表）	const</p>
</li>
</ul>
<h3 id="常对象"><a href="#常对象" class="headerlink" title="常对象"></a>常对象</h3><ul>
<li><p>声明对象前加const称该对象为常对象</p>
</li>
<li><p>常对象只能调用常函数</p>
</li>
<li><p>const	类型名  常数据成员名</p>
</li>
</ul>
<h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> A_age;</span><br><span class="line">	<span class="keyword">mutable</span> <span class="type">int</span> B_age;<span class="comment">//特殊变量mutable,即使在常函数中也能修改</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">showperson</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//this-&gt;A_age = 20;无法修改</span></span><br><span class="line">		<span class="comment">//this-&gt;B_age = 30;可以</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; B_age&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person p;</span><br><span class="line">	p.B_age = <span class="number">80</span>;</span><br><span class="line">	p.<span class="built_in">showperson</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//常对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">const</span> Person p;</span><br><span class="line">	<span class="comment">//p.A_age=20会报错</span></span><br><span class="line">	p.B_age = <span class="number">30</span>;<span class="comment">//在常对象下也可以修改</span></span><br><span class="line">	<span class="comment">//常对象只能调用常函数</span></span><br><span class="line">	p.<span class="built_in">showperson</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">年龄：80</span><br><span class="line">年龄：30</span><br></pre></td></tr></table></figure>



<h3 id="课本实例"><a href="#课本实例" class="headerlink" title="课本实例"></a>课本实例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Croster</span></span><br><span class="line">&#123;</span><br><span class="line">	string name;</span><br><span class="line">	<span class="type">int</span> Math;</span><br><span class="line">	<span class="type">const</span> <span class="type">double</span> Score;<span class="comment">//定义学分常数据成员</span></span><br><span class="line">	<span class="type">double</span> GPA;<span class="comment">//绩点</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Croster</span>(string na = <span class="string">&quot;undef&quot;</span>, <span class="type">int</span> m = <span class="number">100</span>, <span class="type">double</span> s = <span class="number">3</span>);</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">GetGPA</span><span class="params">()</span> <span class="type">const</span></span>;<span class="comment">//常数据成员函数返回绩点</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l4_07.h&quot;</span></span></span><br><span class="line">Croster::<span class="built_in">Croster</span>(string na, <span class="type">int</span> m, <span class="type">double</span> s) :<span class="built_in">name</span>(na), <span class="built_in">Math</span>(m), <span class="built_in">Score</span>(s)</span><br><span class="line">&#123;</span><br><span class="line">	GPA = Math / <span class="number">100.0</span> * Score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Croster::GetGPA</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> GPA;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Croster::Display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;This is void Display().\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; name &lt;&lt; <span class="string">&quot;get &quot;</span> &lt;&lt; Math &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Your GPA is &quot;</span> &lt;&lt; <span class="built_in">GetGPA</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Croster::Display</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;This is void Display() const.\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; name &lt;&lt; <span class="string">&quot;get &quot;</span> &lt;&lt; Math &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Your GPA is &quot;</span> &lt;&lt; <span class="built_in">GetGPA</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l4_07.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">const</span> Croster <span class="title">stu_A</span><span class="params">(<span class="string">&quot;赵衍&quot;</span>, <span class="number">92</span>, <span class="number">3</span>)</span></span>;<span class="comment">//定义常对象</span></span><br><span class="line">	<span class="function">Croster <span class="title">stu_B</span><span class="params">(<span class="string">&quot;孙立&quot;</span>,<span class="number">98</span>,<span class="number">3</span>)</span></span>;</span><br><span class="line">	stu_A.<span class="built_in">Display</span>();</span><br><span class="line">	stu_B.<span class="built_in">Display</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is void Display() const.</span><br><span class="line">赵衍get 92</span><br><span class="line">Your GPA is 2.76</span><br><span class="line">This is void Display().</span><br><span class="line">孙立get 98</span><br><span class="line">Your GPA is 2.94</span><br></pre></td></tr></table></figure>

<p>​	该程序中的Display()函数有重载的版本,一个是常成员函数,另一个是普通成员函数,函数首部的最后是否有const加以区分。从运行结果可知，同样是调用Display()函数，常对象的调用的一定是常成员函数void Display() const，而普通对象在调用时遵循这样的原则：如果有普通成员函数的重载版本，则首先调用普通成员函数；否则，自动调用常成员函数，因为普通对象也是可以调用常函数的。</p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之this指针</title>
    <url>/2025/02/09/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8Bthis%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<p>​	this指针是隐含每一个非静态成员函数内的一种指针，this指针不需要定义，直接使用即可。</p>
<p>this指针的用途：</p>
<ul>
<li>当形参和成员变量同名时，可用this指针来区分</li>
<li>在类的非静态成员函数中返回对象本身，可使用return *this</li>
<li>存放当前对象的地址</li>
</ul>
<h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//当形参与成员变量相同时，用this指针区别</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Person&amp; <span class="title">personageAdd</span><span class="params">(Person&amp; p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;age += p.age;</span><br><span class="line">		<span class="comment">//返回对象本身</span></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;年龄是：&quot;</span> &lt;&lt; p<span class="number">1.</span>age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="comment">//链式法则</span></span><br><span class="line">	p<span class="number">2.</span><span class="built_in">personageAdd</span>(p1).<span class="built_in">personageAdd</span>(p1).<span class="built_in">personageAdd</span>(p1);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;年龄是：&quot;</span> &lt;&lt; p<span class="number">2.</span>age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">年龄是：10</span><br><span class="line">年龄是：40</span><br></pre></td></tr></table></figure>

<h3 id="课本实例"><a href="#课本实例" class="headerlink" title="课本实例"></a>课本实例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cdate</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> Date_Year, Date_Month, Date_Day;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">SetDate</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Cdate::SetDate</span><span class="params">(<span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Date_Day = d;</span><br><span class="line">	Date_Month = m;</span><br><span class="line">	Date_Year = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Cdate::Display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;调用该函数的this指针:&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;当前的对象Date_Year成员起始地址：&quot;</span>;</span><br><span class="line">	cout &lt;&lt; &amp;<span class="keyword">this</span>-&gt;Date_Year &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="keyword">this</span>-&gt;Date_Year &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;Date_Month &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;Date_Day &lt;&lt; endl;</span><br><span class="line">	cout&lt;&lt; Date_Year &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; Date_Month &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt;Date_Day &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Cdate date1;</span><br><span class="line">	date<span class="number">1.</span><span class="built_in">SetDate</span>(<span class="number">2025</span>, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;date1地址&quot;</span> &lt;&lt; &amp;date1 &lt;&lt; endl;</span><br><span class="line">	date<span class="number">1.</span><span class="built_in">Display</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date1地址0000002A83F1FA48</span><br><span class="line">调用该函数的this指针:0000002A83F1FA48</span><br><span class="line">当前的对象Date_Year成员起始地址：0000002A83F1FA48</span><br><span class="line">2025-2-4</span><br><span class="line">2025-2-4</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之初始化列表</title>
    <url>/2025/02/08/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<p>​	在此前的代码中，我们在构造函数体中使用赋值语句初始化对象的数据成员，还可以用另一种方式——<strong>初始化列表</strong></p>
<p>格式：构造函数（）：属性1（值1）属性2（值2）…{}</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CDate</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> Date_Year, Date_Month, Date_Day;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">CDate</span>(<span class="type">int</span> y = <span class="number">2000</span>, <span class="type">int</span> m = <span class="number">1</span>, <span class="type">int</span> d = <span class="number">1</span>);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l3_08.h&quot;</span></span></span><br><span class="line"><span class="comment">//传统初始化</span></span><br><span class="line"><span class="comment">//CDate::CDate(int y, int m, int d)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	cout &lt;&lt; &quot;Excuting constructor...\n&quot;;</span></span><br><span class="line"><span class="comment">//	Date_Day = d;</span></span><br><span class="line"><span class="comment">//	Date_Month = m;</span></span><br><span class="line"><span class="comment">//	Date_Year = y;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//初始化列表</span></span><br><span class="line">CDate::<span class="built_in">CDate</span>(<span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d):<span class="built_in">Date_Year</span>(y),<span class="built_in">Date_Month</span>(m),<span class="built_in">Date_Day</span>(d)</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Excuting constructor...\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CDate::Display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; Date_Year &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; Date_Month &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; Date_Day &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l3_08.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 定义一个CDate对象initiateday，使用默认构造函数初始化</span></span><br><span class="line">	CDate initiateday;</span><br><span class="line">	<span class="comment">// 定义一个CDate对象newday，使用带年份参数的构造函数初始化</span></span><br><span class="line">	<span class="function">CDate <span class="title">newday</span><span class="params">(<span class="number">2019</span>)</span></span>;</span><br><span class="line">	<span class="comment">// 定义一个CDate对象today，使用带年、月、日参数的构造函数初始化</span></span><br><span class="line">	<span class="function">CDate <span class="title">today</span><span class="params">(<span class="number">2019</span>, <span class="number">3</span>, <span class="number">9</span>)</span></span>;</span><br><span class="line">	<span class="comment">// 输出initiateday的日期信息</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Inintiateday is:&quot;</span>;</span><br><span class="line">	initiateday.<span class="built_in">Display</span>();</span><br><span class="line">	<span class="comment">// 输出newday的日期信息</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Newday is:&quot;</span>;</span><br><span class="line">	newday.<span class="built_in">Display</span>();</span><br><span class="line">	<span class="comment">// 输出today的日期信息</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Today is:&quot;</span>;</span><br><span class="line">	today.<span class="built_in">Display</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之函数调用规则</title>
    <url>/2025/02/07/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<p>默认情况下，C++编译器至少给一个类添加3个函数</p>
<ol>
<li>默认构造函数（无参，函数体为空）</li>
<li>默认析构函数（无参，函数体为空）</li>
<li>默认拷贝构造函数；对属性进行拷贝</li>
</ol>
<p>构造函数调用规则如下</p>
<ul>
<li>如果用户定义有参构造函数c++不在提供默认无参构造函数，但是会提供默认拷贝构造</li>
<li>如果用户定义默认拷贝函数，c++不会在通过其他构造函数</li>
</ul>
<p>举个栗子</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Person</span>() &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;默认构造函数。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Person</span>(<span class="type">int</span> a)</span><br><span class="line">	&#123;</span><br><span class="line">		age = a;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;有参构造函数。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//Person(const Person&amp; p)</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; &quot;拷贝构造函数。\n&quot;;</span></span><br><span class="line">	<span class="comment">//	age = p.age;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line">	~<span class="built_in">Person</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;析构函数。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有参构造函数。</span><br><span class="line">p2的年龄：10</span><br><span class="line">析构函数。</span><br><span class="line">析构函数。</span><br></pre></td></tr></table></figure>

















]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之友元</title>
    <url>/2025/02/10/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%8F%8B%E5%85%83/</url>
    <content><![CDATA[<p>​	在程序里，有些所有属性也想让类外特殊的一些函数进行访问，就需要用到友元技术。友元的目的就是让一个函数或类访问另一个类中私有成员。友元的关键字就是friend.</p>
<p>友元的三种实现：</p>
<ul>
<li>全局变量做友元</li>
<li>类做友元</li>
<li>成员函数做友元</li>
</ul>
<h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><p>全局变量做友元：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">goodgay</span><span class="params">(Building* b)</span></span>;</span><br><span class="line">	string bedroom;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Building</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		livingroom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">		bedroom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	string livingroom;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">goodgay</span><span class="params">(Building* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;好基友正在访问......&quot;</span> &lt;&lt; b-&gt;livingroom &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//如果直接改成卧室会报错</span></span><br><span class="line">	<span class="comment">//但如果把此全局函数复制到类的首部并加上friend则可以访问卧室</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;好基友正在访问......&quot;</span> &lt;&lt; b-&gt;bedroom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Building b;</span><br><span class="line">	<span class="built_in">goodgay</span>(&amp;b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">好基友正在访问......客厅</span><br><span class="line">好基友正在访问......卧室</span><br></pre></td></tr></table></figure>

<p>类做友元：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Goodgay</span>;</span><br><span class="line">	string bedroom;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Building</span>();</span><br><span class="line"></span><br><span class="line">	string livingroom;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Goodgay</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Building* b;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="built_in">Goodgay</span>();</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Building::<span class="built_in">Building</span>()</span><br><span class="line">&#123;</span><br><span class="line">	livingroom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">	bedroom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Goodgay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;好基友正在访问......&quot;</span> &lt;&lt; b-&gt;livingroom &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;好基友正在访问......&quot;</span> &lt;&lt; b-&gt;bedroom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Goodgay::<span class="built_in">Goodgay</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//创建新对象</span></span><br><span class="line">	b = <span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Goodgay gg;</span><br><span class="line">	gg.<span class="built_in">visit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">好基友正在访问......客厅</span><br><span class="line">好基友正在访问......卧室</span><br></pre></td></tr></table></figure>

<p>成员函数做友元：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Goodgay::visit</span><span class="params">()</span></span>; <span class="comment">// 友元声明</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string bedroom;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Building</span>();</span><br><span class="line"></span><br><span class="line">    string livingroom;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Goodgay</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Building* b;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="built_in">Goodgay</span>();</span><br><span class="line">    ~<span class="built_in">Goodgay</span>(); <span class="comment">// 析构函数，用来释放动态分配的内存</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Building::<span class="built_in">Building</span>()</span><br><span class="line">&#123;</span><br><span class="line">    livingroom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">    bedroom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Goodgay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;好基友正在访问......&quot;</span> &lt;&lt; b-&gt;livingroom &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;好基友正在访问......&quot;</span> &lt;&lt; b-&gt;bedroom &lt;&lt; endl; <span class="comment">// 正确访问私有成员</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Goodgay::<span class="built_in">Goodgay</span>()</span><br><span class="line">&#123;</span><br><span class="line">    b = <span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Goodgay::~<span class="built_in">Goodgay</span>() <span class="comment">// 析构函数，用来释放动态分配的内存</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> b;</span><br><span class="line">    b = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Goodgay gg;</span><br><span class="line">    gg.<span class="built_in">visit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">好基友正在访问......客厅</span><br><span class="line">好基友正在访问......卧室</span><br></pre></td></tr></table></figure>

<h3 id="课本实例"><a href="#课本实例" class="headerlink" title="课本实例"></a>课本实例</h3><h5 id="友元函数："><a href="#友元函数：" class="headerlink" title="友元函数："></a>友元函数：</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Croster</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">bool</span> <span class="title">Equal</span><span class="params">(Croster&amp;, Croster&amp;)</span></span>;</span><br><span class="line">	string name;</span><br><span class="line">	<span class="type">int</span> Math;</span><br><span class="line">	<span class="type">const</span> <span class="type">double</span> Score;<span class="comment">//定义学分常数据成员</span></span><br><span class="line">	<span class="type">double</span> GPA;<span class="comment">//绩点</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Croster</span>(string na = <span class="string">&quot;undef&quot;</span>, <span class="type">int</span> m = <span class="number">100</span>, <span class="type">double</span> s = <span class="number">3</span>);</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">GetGPA</span><span class="params">()</span> <span class="type">const</span></span>;<span class="comment">//常数据成员函数返回绩点</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l4_08.h&quot;</span></span></span><br><span class="line">Croster::<span class="built_in">Croster</span>(string na, <span class="type">int</span> m, <span class="type">double</span> s) :<span class="built_in">name</span>(na), <span class="built_in">Math</span>(m), <span class="built_in">Score</span>(s)</span><br><span class="line">&#123;</span><br><span class="line">	GPA = Math / <span class="number">100.0</span> * Score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Croster::GetGPA</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> GPA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Equal</span><span class="params">(Croster &amp;A, Croster &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (A.GPA==B.GPA)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l4_08.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Croster <span class="title">stuA</span><span class="params">(<span class="string">&quot;李梅&quot;</span>, <span class="number">96</span>, <span class="number">3</span>)</span>, <span class="title">stuB</span><span class="params">(<span class="string">&quot;孙立&quot;</span>, <span class="number">98</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">Equal</span>(stuA, stuB))</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;GPA is same\n&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;GPA is different\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="其他的大同小异，就不赘述了…………"><a href="#其他的大同小异，就不赘述了…………" class="headerlink" title="其他的大同小异，就不赘述了………….."></a>其他的大同小异，就不赘述了…………..</h5>]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之学生信息管理系统NO.1</title>
    <url>/2025/02/07/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9FNO-1/</url>
    <content><![CDATA[<p>最近准备陆续把之前敲过的代码放进来，顺序就……..(:</p>
<p>​	在对类的定义和使用有了初步认识之后，可以尝试面向对象的风格设计一个简单的学生信息管理系统（：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string name;</span><br><span class="line">	string ID;</span><br><span class="line">	string number;</span><br><span class="line">	string speciality;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">student</span>();</span><br><span class="line">	<span class="built_in">student</span>(string na, string id, string num, string spec, <span class="type">int</span> ag);</span><br><span class="line">	<span class="built_in">student</span>(<span class="type">const</span> student&amp; per);</span><br><span class="line">	<span class="function">string <span class="title">GetName</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">GetID</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">GetNumber</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">GetSpec</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">GetAge</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Input</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;student.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">student::<span class="built_in">student</span>()</span><br><span class="line">&#123;</span><br><span class="line">	name = <span class="string">&quot; &quot;</span>;</span><br><span class="line">	age = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student::<span class="built_in">student</span>(string na, string id, string num, string spec, <span class="type">int</span> ag):<span class="built_in">name</span>(na),<span class="built_in">ID</span>(id),<span class="built_in">number</span>(num),<span class="built_in">speciality</span>(spec),<span class="built_in">age</span>(age)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student::<span class="built_in">student</span>(<span class="type">const</span> student&amp; per)</span><br><span class="line">&#123;</span><br><span class="line">	name = per.name;</span><br><span class="line">	ID = per.ID;</span><br><span class="line">	number = per.number;</span><br><span class="line">	speciality = per.speciality;</span><br><span class="line">	age = per.age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">student::GetName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">student::GetID</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ID;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">student::GetNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">string</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">student::GetSpec</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> speciality;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">student::GetAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">student::Display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;姓 名：&quot;</span>;</span><br><span class="line">	cout &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;身份证：&quot;</span> &lt;&lt; ID &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;学 号：&quot;</span> &lt;&lt; number &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;专 业：&quot;</span> &lt;&lt; speciality &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;年 龄：&quot;</span> &lt;&lt; age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">student::Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入姓 名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入身份证号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; ID;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入年 龄：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; age;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入专 业：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; speciality;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入学 号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;student.h&quot;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">menu</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OutputStu</span><span class="params">(student* array)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InputStu</span><span class="params">(student* array)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SearchStu</span><span class="params">(student* array, string na)</span></span>;</span><br><span class="line"><span class="type">int</span> coo = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	student array[N];</span><br><span class="line">	<span class="type">int</span> choice;</span><br><span class="line">	string na;</span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		<span class="built_in">menu</span>();</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Please input your choice:&quot;</span>;</span><br><span class="line">		cin &gt;&gt; choice;</span><br><span class="line">		<span class="keyword">switch</span> (choice)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:<span class="built_in">InputStu</span>(array);<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:cout &lt;&lt; <span class="string">&quot;Input the name searched:&quot;</span> &lt;&lt; endl;</span><br><span class="line">			cin &gt;&gt; na;</span><br><span class="line">			<span class="type">int</span> i;</span><br><span class="line">			i = <span class="built_in">SearchStu</span>(array, na);</span><br><span class="line">			<span class="keyword">if</span> (i == N)</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;查无此人！\n&quot;</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				array[i].<span class="built_in">Display</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">OutputStu</span>(array);<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>:cout &lt;&lt; <span class="string">&quot;Thanks,see you...&quot;</span> &lt;&lt; endl;<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:cout &lt;&lt; <span class="string">&quot;Input error!&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">while</span> (choice);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*********1.录入信息*********\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*********2.查询信息*********\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*********3.浏览信息*********\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*********0.退    出*********\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OutputStu</span><span class="params">(student* array)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;学生总人数=&quot;</span> &lt;&lt; coo &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; coo;i++)</span><br><span class="line">		array[i].<span class="built_in">Display</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InputStu</span><span class="params">(student* array)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		array[coo].<span class="built_in">Input</span>();</span><br><span class="line">		coo++;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;继续输入吗？（Y or N)\n&quot;</span>;</span><br><span class="line">		cin &gt;&gt; ch;</span><br><span class="line">	&#125; <span class="keyword">while</span> ((ch == <span class="string">&#x27;Y&#x27;</span>) || (ch == <span class="string">&#x27;y&#x27;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SearchStu</span><span class="params">(student* array, string na)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i, j = N;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; coo;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (array[i].<span class="built_in">GetName</span>() == na)</span><br><span class="line">			j = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*********1.录入信息*********</span><br><span class="line">*********2.查询信息*********</span><br><span class="line">*********3.浏览信息*********</span><br><span class="line">*********0.退    出*********</span><br><span class="line">Please input your choice:1</span><br><span class="line">输入姓 名：zhangcheng</span><br><span class="line">输入身份证号：320106200101011819</span><br><span class="line">输入年 龄：18</span><br><span class="line">输入专 业：computer</span><br><span class="line">输入学 号：19070302</span><br><span class="line">继续输入吗？（Y or N)</span><br><span class="line">Y</span><br><span class="line">输入姓 名：wangcheng</span><br><span class="line">输入身份证号：320101200201014011</span><br><span class="line">输入年 龄：17</span><br><span class="line">输入专 业：accounting</span><br><span class="line">输入学 号：19070320</span><br><span class="line">继续输入吗？（Y or N)</span><br><span class="line">N</span><br><span class="line">*********1.录入信息*********</span><br><span class="line">*********2.查询信息*********</span><br><span class="line">*********3.浏览信息*********</span><br><span class="line">*********0.退    出*********</span><br><span class="line">Please input your choice:2</span><br><span class="line">Input the name searched:</span><br><span class="line">zhangcheng</span><br><span class="line">姓 名：zhangcheng</span><br><span class="line">身份证：320106200101011819</span><br><span class="line">学 号：19070302</span><br><span class="line">专 业：computer</span><br><span class="line">年 龄：18</span><br><span class="line">*********1.录入信息*********</span><br><span class="line">*********2.查询信息*********</span><br><span class="line">*********3.浏览信息*********</span><br><span class="line">*********0.退    出*********</span><br><span class="line">Please input your choice:3</span><br><span class="line">学生总人数=2</span><br><span class="line">姓 名：zhangcheng</span><br><span class="line">身份证：320106200101011819</span><br><span class="line">学 号：19070302</span><br><span class="line">专 业：computer</span><br><span class="line">年 龄：18</span><br><span class="line">姓 名：wangcheng</span><br><span class="line">身份证：320101200201014011</span><br><span class="line">学 号：19070320</span><br><span class="line">专 业：accounting</span><br><span class="line">年 龄：17</span><br><span class="line">*********1.录入信息*********</span><br><span class="line">*********2.查询信息*********</span><br><span class="line">*********3.浏览信息*********</span><br><span class="line">*********0.退    出*********</span><br><span class="line">Please input your choice:0</span><br><span class="line">Thanks,see you...</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之学生信息管理系统NO.2</title>
    <url>/2025/02/11/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9FNO-2/</url>
    <content><![CDATA[<p>​	经过一个单元的学习，学生信息管理系统迎来了优化！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student2</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">subject</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> score[<span class="number">3</span>];</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> SMath, SEng, SCpp;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">subject</span>();</span><br><span class="line">	<span class="built_in">subject</span>(<span class="type">int</span> math, <span class="type">int</span> eng, <span class="type">int</span> cpp);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Input</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Delete</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">student2</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;subject.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student2</span></span><br><span class="line">&#123;</span><br><span class="line">	string name;</span><br><span class="line">	string ID;</span><br><span class="line">	<span class="type">double</span> GPA;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> count;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">student2</span>();</span><br><span class="line">	<span class="built_in">student2</span>(string na, string id);</span><br><span class="line">	<span class="function">string <span class="title">GetName</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ReckonGPA</span><span class="params">(<span class="type">const</span> subject&amp; sub)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">GetGPA</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">(<span class="type">const</span> subject&amp; sub)</span> <span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Input</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Delete</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">GetCount</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">OutputStu</span><span class="params">(<span class="type">const</span> student2* array)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;subject.h&quot;</span></span></span><br><span class="line">subject::<span class="built_in">subject</span>():<span class="built_in">SMath</span>(<span class="number">0</span>), <span class="built_in">SEng</span>(<span class="number">0</span>), <span class="built_in">SCpp</span>(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">		score[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subject::<span class="built_in">subject</span>(<span class="type">int</span> math, <span class="type">int</span> eng, <span class="type">int</span> cpp):<span class="built_in">SMath</span>(<span class="number">0</span>), <span class="built_in">SEng</span>(<span class="number">0</span>), <span class="built_in">SCpp</span>(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">	score[<span class="number">0</span>]=math;</span><br><span class="line">	score[<span class="number">1</span>]=eng;</span><br><span class="line">	score[<span class="number">2</span>]=cpp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">subject::Display</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;Math &quot;</span>&lt;&lt;<span class="string">&quot; SEng &quot;</span>&lt;&lt;<span class="string">&quot;SCpp &quot;</span>&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;SMath&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;SEng&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;SCpp&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;score[i];</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">subject::Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;输入成绩：&quot;</span>&lt;&lt;endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入 数学：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; score[<span class="number">0</span>];</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入 英语：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; score[<span class="number">1</span>];</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入 C++：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; score[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">subject::Insert</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(score[<span class="number">0</span>]&lt;<span class="number">0</span>)</span><br><span class="line">		<span class="built_in">Input</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">subject::Delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">		score[i]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;student2.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">student2::Delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GPA=<span class="number">-1</span>;</span><br><span class="line">    count--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> student2::count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">student2::GetCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2::<span class="built_in">student2</span>()</span><br><span class="line">&#123;</span><br><span class="line">    name = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">    ID = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">    GPA = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2::<span class="built_in">student2</span>(string na, string id)</span><br><span class="line">&#123;</span><br><span class="line">    name = na;</span><br><span class="line">    ID = id;</span><br><span class="line">    GPA = <span class="number">-1</span>;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">student2::GetName</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">student2::ReckonGPA</span><span class="params">(<span class="type">const</span> subject&amp; sub)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GPA = ((sub.score[<span class="number">0</span>] - <span class="number">60</span>) / <span class="number">40.0</span> * sub.SMath * sub.SMath + (sub.score[<span class="number">0</span>]<span class="number">-60</span>)/<span class="number">40.0</span>*sub.SEng*sub.SEng + (sub.score[<span class="number">0</span>]<span class="number">-60</span>)/<span class="number">40.0</span>*sub.SCpp*sub.SCpp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">student2::GetGPA</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GPA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">student2::Display</span><span class="params">(<span class="type">const</span> subject&amp; sub)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Name: &quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ID: &quot;</span> &lt;&lt; ID &lt;&lt; endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot; Math &quot;</span>&lt;&lt;<span class="string">&quot; SEng &quot;</span>&lt;&lt;<span class="string">&quot; SCpp &quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">        cout&lt;&lt;sub.score[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;GPA: &quot;</span> &lt;&lt; GPA &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">student2::Display</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Name: &quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ID: &quot;</span> &lt;&lt; ID &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">student2::Input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter name: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; name;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter ID: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; ID;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">student2::Insert</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(GPA&lt;<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">Input</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OutputStu</span><span class="params">(<span class="type">const</span> student2* array)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;学生总人数=&quot;</span>&lt;&lt;student2::<span class="built_in">GetCount</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; student2::<span class="built_in">GetCount</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i].<span class="built_in">GetGPA</span>() != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;name: &quot;</span>&lt;&lt;array[i].name&lt;&lt;<span class="string">&quot;, ID: &quot;</span>&lt;&lt;array[i].ID&lt;&lt;<span class="string">&quot;, GPA: &quot;</span>&lt;&lt;array[i].GPA&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;student2.h&quot;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">menu</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">InputStu</span><span class="params">(student2* array)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InputSel</span><span class="params">(subject* Select, <span class="type">int</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SearchStu</span><span class="params">(<span class="type">const</span> student2* array, string na)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">InsertStu</span><span class="params">(student2* array)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeleteStu</span><span class="params">(student2* array,subject* Select, string na)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	student2 array[N];</span><br><span class="line">	subject Select[N];</span><br><span class="line">	<span class="type">int</span> choice, i;</span><br><span class="line">	string name;</span><br><span class="line">	<span class="type">char</span> ch = <span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">menu</span>();</span><br><span class="line">		cin &gt;&gt; choice;</span><br><span class="line">		<span class="keyword">switch</span> (choice)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			<span class="keyword">while</span> (ch == <span class="string">&#x27;Y&#x27;</span> || ch == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				i = <span class="built_in">InputStu</span>(array);</span><br><span class="line">				<span class="built_in">InputSel</span>(Select, i);</span><br><span class="line">				array[i].<span class="built_in">ReckonGPA</span>(Select[i]);</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;Do you want to add more students? (Y/N): &quot;</span>;</span><br><span class="line">				cin &gt;&gt; ch;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Enter the name of the student to search:\n &quot;</span>;</span><br><span class="line">			cin &gt;&gt; name;</span><br><span class="line">			<span class="type">int</span> i;</span><br><span class="line">			i = <span class="built_in">SearchStu</span>(array, name);</span><br><span class="line">			<span class="keyword">if</span> (i == N)</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;Student not found.&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				array[i].<span class="built_in">Display</span>(Select[i]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			<span class="built_in">OutputStu</span>(array);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			i = <span class="built_in">InsertStu</span>(array);</span><br><span class="line">			<span class="keyword">if</span> (i)</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;成功插入一条记录\n&quot;</span>;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;录入成绩吗？(Y/N):&quot;</span>;</span><br><span class="line">				cin &gt;&gt; ch;</span><br><span class="line">				<span class="keyword">if</span> (ch == <span class="string">&#x27;Y&#x27;</span> || ch == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					Select[i].<span class="built_in">Input</span>();</span><br><span class="line">					array[i].<span class="built_in">ReckonGPA</span>(Select[i]);</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;已达到最大容量，无法插入。\n&quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Enter the name of the student to delete:\n &quot;</span>;</span><br><span class="line">			cin &gt;&gt; name;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">DeleteStu</span>(array, Select, name))</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;删除成功。\n&quot;</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;删除失败。\n&quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Invalid choice.\n&quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">while</span> (choice);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*********1.录入信息*********\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*********2.查询信息*********\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*********3.浏览信息*********\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*********4.插入信息*********\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*********5.删除信息*********\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*********0.退    出*********\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">InputStu</span><span class="params">(student2* array)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (student2::<span class="built_in">GetCount</span>() ==N)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;已达到最大容量，无法插入。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (array[i].<span class="built_in">GetGPA</span>() &gt; <span class="number">0</span>)</span><br><span class="line">			i++;</span><br><span class="line">		array[i].<span class="built_in">Input</span>();</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;录入成功。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InputSel</span><span class="params">(subject* Select, <span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Select[i].<span class="built_in">Input</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SearchStu</span><span class="params">(<span class="type">const</span> student2* array, string na)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i,j=N;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (array[i].<span class="built_in">GetGPA</span>() != <span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (array[i].<span class="built_in">GetName</span>() == na)</span><br><span class="line">			&#123;</span><br><span class="line">				j = i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> j;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">InsertStu</span><span class="params">(student2* array)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (student2::<span class="built_in">GetCount</span>() == N)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;已达到最大容量，无法插入。\n&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (array[i].<span class="built_in">GetGPA</span>() &gt; <span class="number">0</span>)</span><br><span class="line">		i++;</span><br><span class="line">	array[i].<span class="built_in">Input</span>();</span><br><span class="line">	<span class="keyword">return</span> i;</span><br><span class="line">		</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeleteStu</span><span class="params">(student2* array, subject* Select, string na)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (student2::<span class="built_in">GetCount</span>() == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;学生信息为空，无法删除。\n&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> i = <span class="built_in">SearchStu</span>(array, na);</span><br><span class="line">	<span class="keyword">if</span> (i == N)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;学生不存在。\n&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	array[i].<span class="built_in">Delete</span>();</span><br><span class="line">	Select[i].<span class="built_in">Delete</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*********1.录入信息*********</span><br><span class="line">*********2.查询信息*********</span><br><span class="line">*********3.浏览信息*********</span><br><span class="line">*********4.插入信息*********</span><br><span class="line">*********5.删除信息*********</span><br><span class="line">*********0.退    出*********</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之对象成员</title>
    <url>/2025/02/05/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%AF%B9%E8%B1%A1%E6%88%90%E5%91%98/</url>
    <content><![CDATA[<p>The function of good software is to make the complex appear to be simple.</p>
<p>​                                                                                                                     ————-Grady Booch</p>
<h3 id="Main-Point"><a href="#Main-Point" class="headerlink" title="Main Point"></a>Main Point</h3><ul>
<li>认识对象成员</li>
<li>掌握对象成员的构造与析构</li>
</ul>
<h3 id="一-定义"><a href="#一-定义" class="headerlink" title="一.定义"></a>一.定义</h3><p>​	<strong>对象成员</strong>简单地说就是在定义一个新类型是，可以用已有的类类型实例化对象作为数据成员使用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>	</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">    A obj_a;</span><br><span class="line">    B obj_b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中x,y 是普通的数据成员，而obj_a,obj_b是类类型A和B实例化的对象，再次作为C的数据成员出现，称之为对象成员。</p>
<p>​	注：对象成员和任何其他成员一样，存在服务属性问题。如果对象成员在新类中被定义为private，则只能从新类内部引用，如果将对象成员在新类中定义为public，就可以在新类外部对其进行访问，但是对象成员本身的私有属性成员仍然是不可直接访问的。</p>
<h3 id="二-对象成员的构造与析构"><a href="#二-对象成员的构造与析构" class="headerlink" title="二.对象成员的构造与析构"></a>二.对象成员的构造与析构</h3><p>​	与普通对象一样，对象成员在创建时需要调用构造函数，在生命周期结束时需要调用析构函数。</p>
<h5 id="构造与析构函数的调用次序"><a href="#构造与析构函数的调用次序" class="headerlink" title="构造与析构函数的调用次序"></a>构造与析构函数的调用次序</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">A</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;创建A\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">A</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;析构A\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line">	A a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">B</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;创建B\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">B</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;析构B\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	B obj;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建A</span><br><span class="line">创建B</span><br><span class="line">析构B</span><br><span class="line">析构A</span><br></pre></td></tr></table></figure>



<h5 id="含有参数的对象成员构造函数的调用"><a href="#含有参数的对象成员构造函数的调用" class="headerlink" title="含有参数的对象成员构造函数的调用"></a>含有参数的对象成员构造函数的调用</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CDate</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> Date_Year, Date_Month, Date_Day;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">CDate</span>(<span class="type">int</span> y = <span class="number">2000</span>, <span class="type">int</span> m = <span class="number">1</span>, <span class="type">int</span> d = <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">CDate</span>(<span class="type">const</span> CDate &amp;date);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l3_09.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Croster</span></span><br><span class="line">&#123;</span><br><span class="line">	string name;</span><br><span class="line">	CDate birthday;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Croster</span>(string na, <span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span>;</span><br><span class="line">	~<span class="built_in">Croster</span>();</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l3_09.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">CDate::<span class="built_in">CDate</span>(<span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d):<span class="built_in">Date_Year</span>(y),<span class="built_in">Date_Month</span>(m),<span class="built_in">Date_Day</span>(d)</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Constructor called.\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CDate::<span class="built_in">CDate</span>(<span class="type">const</span> CDate&amp; date)</span><br><span class="line">&#123;</span><br><span class="line">	Date_Year = date.Date_Year;</span><br><span class="line">	Date_Month = date.Date_Month;</span><br><span class="line">	Date_Day = date.Date_Day<span class="number">+1</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Copy Constructor called.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CDate::Display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; Date_Year &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; Date_Month &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; Date_Day &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l4_02.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Croster::<span class="built_in">Croster</span>(string na, <span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d) :<span class="built_in">birthday</span>(y, m, d)</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Croster constructor called.\n&quot;</span>;</span><br><span class="line">	name = na;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Croster::Display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">	birthday.<span class="built_in">Display</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Croster::~<span class="built_in">Croster</span>()</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Croster deconstructor called.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l4_02.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Croster <span class="title">stuA</span><span class="params">(<span class="string">&quot;王衍&quot;</span>, <span class="number">2000</span>, <span class="number">3</span>, <span class="number">27</span>)</span></span>;</span><br><span class="line">	stuA.<span class="built_in">Display</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Constructor called.</span><br><span class="line">Croster constructor called.</span><br><span class="line">王衍</span><br><span class="line">2000-3-27</span><br><span class="line">Croster deconstructor called.</span><br></pre></td></tr></table></figure>



<h3 id="三-总结"><a href="#三-总结" class="headerlink" title="三.总结"></a>三.总结</h3><p>​	在实际应用中，在已有的简单类的基础上构建新的复杂类，不仅能提高开发行了，而且增加代码的可维护性。</p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之小task</title>
    <url>/2025/02/07/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%8Ftask/</url>
    <content><![CDATA[<h1 id="task"><a href="#task" class="headerlink" title="task"></a>task</h1><p>​	设计一个产品类Product,允许通过如下方式创建产品对象。</p>
<ol>
<li>通过指定产品名创建。</li>
<li>通过指定产品名和产品价格创建。</li>
<li>通过指定产品名，产品价格，出厂日期（对象成员）创建。</li>
<li>Product还应该包含如下属性：生产厂家，易碎标记，有效日期（使用对象成员）。设计该类时，至少增加3个其他属性。成员函数包括访问和修改这些属性的操作。</li>
<li>在main()中定义对象，并输出相关信息。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Product</span>();</span><br><span class="line">	<span class="built_in">Product</span>(string na);</span><br><span class="line">	<span class="built_in">Product</span>(string na, <span class="type">double</span> pr);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">SetProduct</span><span class="params">(string na, <span class="type">double</span> pr, string fa, <span class="type">bool</span> ea, string co, <span class="type">double</span> h)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">output</span><span class="params">()</span></span>;</span><br><span class="line">	~<span class="built_in">Product</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string name;</span><br><span class="line">	<span class="type">double</span> price;</span><br><span class="line">	string factory;</span><br><span class="line">	<span class="type">bool</span> easy_break;</span><br><span class="line">	string color;</span><br><span class="line">	<span class="type">double</span> high;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Product::<span class="built_in">Product</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Product::<span class="built_in">Product</span>(string na)</span><br><span class="line">&#123;</span><br><span class="line">	na = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Product::<span class="built_in">Product</span>(string na, <span class="type">double</span> pr)</span><br><span class="line">&#123;</span><br><span class="line">	na = name;</span><br><span class="line">	pr = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Product::SetProduct</span><span class="params">(string na, <span class="type">double</span> pr, string fa, <span class="type">bool</span> ea, string co, <span class="type">double</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	name = na;</span><br><span class="line">	price = pr;</span><br><span class="line">	factory = fa;</span><br><span class="line">	easy_break = ea;</span><br><span class="line">	color = co;</span><br><span class="line">	high = h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Product::output</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; price &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; factory&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; easy_break &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; color &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; high &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Product::~<span class="built_in">Product</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Product <span class="title">p1</span><span class="params">(<span class="string">&quot;car&quot;</span>)</span></span>;</span><br><span class="line">	<span class="function">Product <span class="title">p2</span><span class="params">(<span class="string">&quot;glass&quot;</span>, <span class="number">3.00</span>)</span></span>;</span><br><span class="line">	p<span class="number">1.</span><span class="built_in">SetProduct</span>(<span class="string">&quot;car&quot;</span>, <span class="number">100000.0</span>, <span class="string">&quot;nj&quot;</span>, <span class="number">0</span>, <span class="string">&quot;red&quot;</span>, <span class="number">1.5</span>);</span><br><span class="line">	p<span class="number">1.</span><span class="built_in">output</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">car 100000</span><br><span class="line">nj 0</span><br><span class="line">red 1.5</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之拷贝构造函数的调用</title>
    <url>/2025/02/07/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<p>emmmm,这一篇是对之前一章构造函数的补充。</p>
<h2 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h2><p>​	拷贝构造函数也是一种重载版本的构造函数，它是用一个已存在的对象初始化另一个新创建的同类对象。该函数的参数与普通构造函数不同，是一个同类的常引用。高效地传递对象，也能保证原对象不被修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">类名（const 类名&amp;对象名）；</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Person</span>()&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;默认构造函数。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Person</span>(<span class="type">int</span> a)</span><br><span class="line">	&#123;</span><br><span class="line">		age = a;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;有参构造函数。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;拷贝构造函数。\n&quot;</span>;</span><br><span class="line">		age = p.age;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Person</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;析构函数。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用一个已经创建完毕的对象来初始化一个新对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p2的年龄：&quot;</span> &lt;&lt;p<span class="number">2.</span>age &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//值传递的方式给函数参数传值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dowork</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt;<span class="string">&quot;年龄：&quot;</span> &lt;&lt; p.age &lt;&lt; endl;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="built_in">dowork</span>(p);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//值方式返回局部变量</span></span><br><span class="line"> <span class="function">Person <span class="title">dowork2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	cout &lt;&lt; (<span class="type">int</span>*)&amp;p1 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; p<span class="number">1.</span>age &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Person</span>(p1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person p = <span class="built_in">dowork2</span>();</span><br><span class="line">	cout &lt;&lt; (<span class="type">int</span>*)&amp;p &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line">	<span class="built_in">test03</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用一个已经创建完毕的对象来初始化一个新对象</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有参构造函数。</span><br><span class="line">拷贝构造函数。</span><br><span class="line">p2的年龄：10</span><br><span class="line">析构函数。</span><br><span class="line">析构函数。</span><br></pre></td></tr></table></figure>

<ul>
<li>值传递的方式给函数参数传值</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有参构造函数。</span><br><span class="line">拷贝构造函数。</span><br><span class="line">年龄：10</span><br><span class="line">析构函数。</span><br><span class="line">析构函数。</span><br></pre></td></tr></table></figure>

<ul>
<li>值方式返回局部变量</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有参构造函数。</span><br><span class="line">000000DB556FF364</span><br><span class="line">年龄：10</span><br><span class="line">拷贝构造函数。</span><br><span class="line">析构函数。</span><br><span class="line">000000DB556FF4A4</span><br><span class="line">析构函数。</span><br></pre></td></tr></table></figure>





















































]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之构造函数</title>
    <url>/2025/02/06/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="Main-Point"><a href="#Main-Point" class="headerlink" title="Main Point"></a>Main Point</h2><ul>
<li>掌握构造函数的定义，特点和作用</li>
<li>掌握无参构造函数与带默认参数值的构造函数的定义与使用</li>
<li>掌握复制构造函数的定义与使用</li>
<li>掌握析构函数的定义与使用</li>
</ul>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>​	构造函数是类的一种特殊的成员函数。</p>
<p>特点：</p>
<ol>
<li>无返回值，不用void</li>
<li>函数名与类名相同</li>
<li>构造函数可以有参数，可以发生重载</li>
<li>创建对象的时候，构造函数会自动调用，而且只调用一次</li>
</ol>
<h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><p>​	创建类的对象时，系统会自动调用构造函数。同样，当对象生命结束时，需要释放所占的内存资源，程序将自动调用类的析构函数来完成。</p>
<p>特点：</p>
<ol>
<li>进行清理操作</li>
<li>无返回值，不用void</li>
<li>函数名于类名名称前加~</li>
<li>析构函数无参，不能重载</li>
<li>对象在销毁前会自动调用析构函数，而且仅调用一次</li>
</ol>
<h2 id="构造函数和析构函数实例"><a href="#构造函数和析构函数实例" class="headerlink" title="构造函数和析构函数实例"></a>构造函数和析构函数实例</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CDate</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> Date_Year, Date_Month, Date_Day;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//构造函数</span></span><br><span class="line">	<span class="comment">//无返回值无void</span></span><br><span class="line">	<span class="comment">//函数名与类名相同</span></span><br><span class="line">	<span class="comment">//可以有参数，可以重载</span></span><br><span class="line">	<span class="comment">//创建对象时，构造函数会自动调用，并且只调用一次</span></span><br><span class="line">	<span class="built_in">CDate</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l3_07.h&quot;</span></span></span><br><span class="line">CDate::<span class="built_in">CDate</span>(<span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d)</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Executing constructor...&quot;</span>;</span><br><span class="line">	Date_Year = y;</span><br><span class="line">	Date_Month = m;</span><br><span class="line">	Date_Day = d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CDate::Display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; Date_Year &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; Date_Month &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; Date_Day &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l3_07.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">CDate <span class="title">today</span><span class="params">(<span class="number">2025</span>, <span class="number">2</span>, <span class="number">5</span>)</span></span>;<span class="comment">//定义对象同时完成初始化</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;today is...\n&quot;</span>;</span><br><span class="line">	today.<span class="built_in">Display</span>();</span><br><span class="line">	today = <span class="built_in">CDate</span>(<span class="number">2010</span>, <span class="number">3</span>, <span class="number">4</span>);<span class="comment">//定义无名对象</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;today is...\n&quot;</span>;</span><br><span class="line">	today.<span class="built_in">Display</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Executing constructor...today is...</span><br><span class="line">2025-2-5</span><br><span class="line">Executing constructor...today is...</span><br><span class="line">2010-3-4</span><br></pre></td></tr></table></figure>

<h2 id="构造函数分类及调用"><a href="#构造函数分类及调用" class="headerlink" title="构造函数分类及调用"></a>构造函数分类及调用</h2><h4 id="两种分类方式"><a href="#两种分类方式" class="headerlink" title="两种分类方式"></a>两种分类方式</h4><ul>
<li><p>有参</p>
</li>
<li><p>无参</p>
</li>
</ul>
<h4 id="三种分类方式"><a href="#三种分类方式" class="headerlink" title="三种分类方式"></a>三种分类方式</h4><ul>
<li>括号法</li>
<li>显示法</li>
<li>隐式转换法</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//普通构造函数</span></span><br><span class="line">	<span class="built_in">Person</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;无参构造函数。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Person</span>(<span class="type">int</span> a)</span><br><span class="line">	&#123;</span><br><span class="line">		age = a;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;有参构造函数。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Person</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;析构。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//拷贝构造函数</span></span><br><span class="line">	<span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//将传入的人身上所有的属性拷贝到我身上。</span></span><br><span class="line">		age = p.age;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;拷贝构造函数。\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">task1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//括号法</span></span><br><span class="line">	<span class="comment">//Person p1;//默认构造函数</span></span><br><span class="line">	<span class="comment">//Person p2(10);//有参构造函数</span></span><br><span class="line">	<span class="comment">//Person p3(p2);//拷贝构造函数</span></span><br><span class="line">	<span class="comment">//默认构造函数不能写（）</span></span><br><span class="line">	<span class="comment">//显示法</span></span><br><span class="line">	Person p1;</span><br><span class="line">	Person p2 = <span class="built_in">Person</span>(<span class="number">10</span>);</span><br><span class="line">	Person p3 = <span class="built_in">Person</span> (p2);</span><br><span class="line">	<span class="comment">//Person(10);匿名对象</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;a\n&quot;;</span></span><br><span class="line">	<span class="comment">//隐式写法</span></span><br><span class="line">	Person p4 = <span class="number">10</span>;<span class="comment">//等价于Person p4=Person(10)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">task1</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">无参构造函数。</span><br><span class="line">有参构造函数。</span><br><span class="line">拷贝构造函数。</span><br><span class="line">有参构造函数。</span><br><span class="line">析构。</span><br><span class="line">析构。</span><br><span class="line">析构。</span><br><span class="line">析构。</span><br></pre></td></tr></table></figure>





























]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之析构函数和动态内存分配</title>
    <url>/2025/02/08/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
    <content><![CDATA[<p>​	程序中经常要为类成员申请动态内存空间。比如在构造函数中，使用new操作符申请了一块动态内存空间，那么该对象生命周期结束时，申请的动态内存空间如何释放呢？我们通过一个简单的类来学习在析构函数中释放动态内存空间。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CMessage</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span>* pmessage;<span class="comment">//字符指针变量</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">CMessage</span>(<span class="type">const</span> <span class="type">char</span>* text = <span class="string">&quot;中国一点也没有少！&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		pmessage = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(text) + <span class="number">1</span>];</span><br><span class="line">		<span class="built_in">strcpy_s</span>(pmessage, <span class="built_in">strlen</span>(text) + <span class="number">1</span>, text);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; pmessage&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">CMessage</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Destructor called.\n&quot;</span>;</span><br><span class="line">		<span class="keyword">delete</span>[]pmessage;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l3_11.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CMessage Mes1;</span><br><span class="line">	<span class="function">CMessage <span class="title">Mes2</span><span class="params">(<span class="string">&quot;爱我中华！&quot;</span>)</span></span>;</span><br><span class="line">	CMessage* pm = <span class="keyword">new</span> <span class="built_in">CMessage</span>(<span class="string">&quot;我爱我的祖国&quot;</span>);</span><br><span class="line">	Mes<span class="number">1.</span><span class="built_in">show</span>();</span><br><span class="line">	Mes<span class="number">2.</span><span class="built_in">show</span>();</span><br><span class="line">	pm-&gt;<span class="built_in">show</span>();</span><br><span class="line">	<span class="keyword">delete</span> pm;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">中国一点也没有少！</span><br><span class="line">爱我中华！</span><br><span class="line">我爱我的祖国</span><br><span class="line">Destructor called.</span><br><span class="line">Destructor called.</span><br><span class="line">Destructor called.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象之静态成员</title>
    <url>/2025/02/09/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%9D%99%E6%80%81%E6%88%90%E5%91%98/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>​	静态成员就是在成员变量和成员函数前加关键词static。</p>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h4 id="静态成员变量"><a href="#静态成员变量" class="headerlink" title="静态成员变量"></a>静态成员变量</h4><ul>
<li>所以对象共享同一份数据</li>
<li>在编译阶段分配内存</li>
<li>类内声明，类外初始化</li>
</ul>
<h4 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h4><ul>
<li>所有对象共享同一函数</li>
<li>静态成员函数只能访问静态成员变量</li>
</ul>
<h2 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>();</span><br><span class="line">	~<span class="built_in">Person</span>();</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> m_A;</span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_A = <span class="number">2000</span>;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;static void 调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> Person::m_A = <span class="number">10</span>;</span><br><span class="line">Person::<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person::~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//通过对象进行访问</span></span><br><span class="line">	Person P;</span><br><span class="line">	<span class="comment">//100</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; P.m_A &lt;&lt; endl;</span><br><span class="line">	Person p2;</span><br><span class="line">	p<span class="number">2.</span>m_A = <span class="number">20</span>;</span><br><span class="line">	<span class="comment">//200</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; P.m_A &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//通过类名进行访问</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; Person::m_A &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">年龄：10</span><br><span class="line">年龄：20</span><br><span class="line">年龄：20</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//通过类名进行访问</span></span><br><span class="line">	Person::<span class="built_in">func</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; Person::m_A &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//通过对象进行访问</span></span><br><span class="line">	Person P;</span><br><span class="line">	P.<span class="built_in">func</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; P.m_A &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static void 调用</span><br><span class="line">年龄：2000</span><br><span class="line">static void 调用</span><br><span class="line">年龄：2000</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line">	<span class="built_in">test03</span>();</span><br><span class="line">	<span class="built_in">test04</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="书本实例"><a href="#书本实例" class="headerlink" title="书本实例"></a>书本实例</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Croster</span></span><br><span class="line">&#123;</span><br><span class="line">	string name;</span><br><span class="line">	<span class="type">int</span> Math;</span><br><span class="line">	<span class="comment">/*int English;*/</span></span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> Sum;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Croster</span>(string na = <span class="string">&quot;undef&quot;</span>, <span class="type">int</span> m = <span class="number">100</span><span class="comment">/*, int e = 100*/</span>);</span><br><span class="line">	<span class="comment">/*void Display();*/</span></span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> Count;</span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l4_03.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> Croster::Count = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> Croster::Sum;</span><br><span class="line">Croster::<span class="built_in">Croster</span>(string na, <span class="type">int</span> m) :<span class="built_in">name</span>(na), <span class="built_in">Math</span>(m)</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;欢迎新同学&quot;</span> &lt;&lt; endl;</span><br><span class="line">	Count--;</span><br><span class="line">	Sum += Math;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Croster::Display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//cout&lt;&lt;&quot;name:&quot;&lt;&lt;name&lt;&lt;endl;</span></span><br><span class="line">	<span class="comment">//静态成员函数不允许访问非静态成员</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Sum:&quot;</span> &lt;&lt; Sum &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">if</span> (Count == <span class="number">100</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Average=0&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Average=&quot;</span> &lt;&lt; Sum * <span class="number">1.0</span> / (<span class="number">100</span> - Count) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l4_03.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Croster::<span class="built_in">Display</span>();</span><br><span class="line">	Croster list[<span class="number">3</span>] = &#123; <span class="built_in">Croster</span>(<span class="string">&quot;赵衍&quot;</span>,<span class="number">95</span>),<span class="built_in">Croster</span>(<span class="string">&quot;钱多多&quot;</span>,<span class="number">90</span>),<span class="built_in">Croster</span>(<span class="string">&quot;孙立&quot;</span>,<span class="number">92</span>) &#125;;</span><br><span class="line">	list[<span class="number">1</span>].<span class="built_in">Display</span>();</span><br><span class="line">	<span class="function">Croster <span class="title">stu_A</span><span class="params">(<span class="string">&quot;李梅&quot;</span>)</span></span>;</span><br><span class="line">	stu_A.<span class="built_in">Display</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sum:0</span><br><span class="line">Average=0</span><br><span class="line">欢迎新同学</span><br><span class="line">欢迎新同学</span><br><span class="line">欢迎新同学</span><br><span class="line">Sum:277</span><br><span class="line">Average=92.3333</span><br><span class="line">欢迎新同学</span><br><span class="line">Sum:377</span><br><span class="line">Average=94.25</span><br></pre></td></tr></table></figure>





















]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>grammar</tag>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
